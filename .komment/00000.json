[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a robot arm with five joints and a gripper, and controls its movement based on user input from a joystick. The code uses the `robotpy` library to interact with the robot arm and the `pygame` library for user input. It processes user input from the joystick in three different modes: move mode, home mode, and calibration mode. In move mode, the code moves the robot arm based on user input from the joystick, adjusting the position and orientation of the robot arm accordingly. In home mode, the code sets the robot arm's position and orientation to their default positions. In calibration mode, the code adjusts the sensitivity of the joystick input based on user input from a button on the joystick. The code also includes functionality for switching between different modes of operation based on the joystick's buttons.",
        "items": [
          {
            "id": "ef29c7a1-cb6b-8dad-1742-e9e410868437",
            "ancestors": [],
            "description": "Manages a robot's movements and actions based on data from an API, updating the robot's position, orientation, and mode of operation. It also handles button presses and moves the robot to a home position.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "4 by default, which means the worker will move to a new position every 0.05 seconds."
              },
              {
                "name": "rgb",
                "type_name": "8element",
                "description": "3-dimensional, representing the color of the worker's suit in RGB format."
              },
              {
                "name": "timestamp",
                "type_name": "int",
                "description": "Used to store the timestamp of when the worker was created."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "4 by default, indicating that the worker will start with a check for the fourth state (mode) of the robot's axes."
              },
              {
                "name": "physicsClient",
                "type_name": "physicsPhysicsClient",
                "description": "Used to communicate with the ROS node that handles the robot's physics simulations, allowing for updates on the robot's position, orientation, and joint angles."
              },
              {
                "name": "plane",
                "type_name": "instance",
                "description": "2D plane that represents the workspace of the robot. It is used to store the position and orientation of the end effector in relation to the workspace."
              },
              {
                "name": "table_id",
                "type_name": "int",
                "description": "Used to identify a specific worker in a table of workers, allowing for efficient handling of different workers' inputs."
              },
              {
                "name": "robot_urdf",
                "type_name": "obb",
                "description": "A dictionary containing the robot's URDF (Uniform Resource Locator Definition Framework) information, which defines the robot's geometry, joints, and other relevant properties."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "Tuple",
                "description": "Used to store the position of the robot at the beginning of a launch operation. It contains values for the x, y, and z coordinates of the robot's initial position."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "numpymatrix",
                "description": "Used to store the orientation of a robot's end effector in a specific workspace."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "int",
                "description": "7-bit binary encoded, indicating which joint of the robot's end effector the worker's end effector is attached to."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "4 by default, representing the specific worker's ID."
              },
              {
                "name": "home_angles",
                "type_name": "ndarray",
                "description": "4D, representing the target angles for each joint of the robot in home position."
              },
              {
                "name": "observation_angles",
                "type_name": "8element",
                "description": "A list of angles that represent the orientation of the robot's end effector relative to its initial position."
              },
              {
                "name": "cylinderId",
                "type_name": "int",
                "description": "0 by default, indicating that the worker is a generic robot without any specific identifiers or features."
              },
              {
                "name": "threadKinovaAngles",
                "type_name": "ndarray",
                "description": "4D, representing the angles for each joint in the Kinova robot, where each dimension corresponds to a different joint."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "async",
                "description": "Used to read data from a proxy server. It retrieves the data from the server using the provided connection and returns the received data as a dictionary."
              },
              {
                "name": "colorKinova",
                "type_name": "str",
                "description": "Optional, representing the RGB color code for the robot's body, which can be used to customize the \nrobot's appearance."
              },
              {
                "name": "depthKinova",
                "type_name": "list",
                "description": "Used to store the depth of the kinematic chain, which is a measure of the distance between the end effector and the starting position of the robot's joints."
              },
              {
                "name": "target_angles",
                "type_name": "ndarray",
                "description": "0-dimensional, storing the target angles for each joint of the robot in radians as a vector. It is used to store the desired positions of the robot's joints based on the received data from the Robot Operating System (ROS)."
              },
              {
                "name": "target_position",
                "type_name": "3element",
                "description": "Defined as a list of tuples containing the target positions for the robot's joints, gripper, and end effector. It stores the target position values for each axis of movement based on the current mode and buttons pressed."
              },
              {
                "name": "target_orientation",
                "type_name": "3x3",
                "description": "Used to store the desired orientation of the end effector relative to the base link. It is updated based on the input from the joystick and other controls."
              },
              {
                "name": "target_velocities",
                "type_name": "ndarray",
                "description": "3D array representing the desired velocities for each joint of the robot in the target position."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "int",
                "description": "0-based, indicating the currently selected joint of a robotic arm for motion control based on input from a joystick."
              },
              {
                "name": "move_mode",
                "type_name": "int",
                "description": "0 by default, representing the current mode of the robot (0: move, 1: home, 2: orient, 3: pose, 4: robot2)."
              },
              {
                "name": "ext_joints",
                "type_name": "7element",
                "description": "Used to keep track of the joints of the robot for each move mode. It stores the index of the selected joint for each move mode, starting from 0."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "object",
                "description": "Used to simulate the movement of a Kinova arm, which is a robotic arm used in industrial automation applications. It contains methods that allow the worker to move the arm based on input from sensors and buttons."
              },
              {
                "name": "ext_gripper",
                "type_name": "8bit",
                "description": "0-255, representing the external gripper position (0-255) in the robot's end effector frame. It is used to control the movement of the external gripper in conjunction with the other joints of the robot."
              },
              {
                "name": "timer",
                "type_name": "int",
                "description": "0 by default, it keeps track of how long the worker has been running."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "A method that computes the new values of the robot's position, orientation, and joint angles based on the raw data received from the Joy input device."
              },
              {
                "name": "joint_speeds",
                "type_name": "ndarray",
                "description": "7-long, where each element represents the speed of a joint (in degrees per second) to move the robot to its desired position."
              },
              {
                "name": "speeds",
                "type_name": "int",
                "description": "0-dimensional, representing the maximum speed at which each joint can move in the robot. It is used to limit the movement of the robot's joints based on their current position."
              },
              {
                "name": "angles",
                "type_name": "8element",
                "description": "Used to store the target angles for each joint of the robot in degrees."
              },
              {
                "name": "gains",
                "type_name": "ndarray",
                "description": "2D, where each row represents a joint and each column represents a gain value for that joint. The gains control the speed and accuracy of the robot's movements."
              },
              {
                "name": "posesTimes",
                "type_name": "ndarray",
                "description": "4D, representing the position and orientation of the robot over time in a sequence of poses."
              },
              {
                "name": "poses",
                "type_name": "8element",
                "description": "9array of dictionaries, each representing a pose (position and orientation) of the robot's end effector."
              },
              {
                "name": "calibrator",
                "type_name": "instance",
                "description": "Used to store a calibration object that is used to convert raw accelerometer values to joint angles for the robot arm."
              },
              {
                "name": "cameraKinovaTimer",
                "type_name": "float",
                "description": "0 by default, it measures the time the robot takes to perform a specific task."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "method",
                "description": "Used to read the data from the Kinova camera. It takes no arguments and returns a dictionary containing the camera data."
              },
              {
                "name": "showKinovaStateTimer",
                "type_name": "float",
                "description": "Used to show how long it takes for the worker to complete a task."
              },
              {
                "name": "showKinovaAngles",
                "type_name": "instance",
                "description": "0-based indexing for the joint angles of the Kinova robot arm, where 0 represents the base joint, 1-6 represent the shoulder, elbow, wrist, and hip joints, respectively."
              },
              {
                "name": "gainsTimer",
                "type_name": "float",
                "description": "Used to store a timer for gaining the joints, which is used to update the target position of the robot based on the user input."
              },
              {
                "name": "updateGains",
                "type_name": "lambda",
                "description": "Used to update the gains of the robot based on the data from the controller. It takes the robot's current position, orientation, and button states as input and updates the gains accordingly."
              },
              {
                "name": "aamed",
                "type_name": "attribute",
                "description": "Used to store a reference to the worker's IAM user data."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 66,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 780,
            "docLength": null
          },
          {
            "id": "54b5398d-3159-1685-8846-8ed20f5a9ddf",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Initializes the SpecificWorker class, setting up various timers and connectors for reading data from the Kinova arm, computing new angles based on user inputs, and updating gains based on previous measurements.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map Kinova API endpoints to the corresponding RoboComp API endpoints for communication with the Kinova arm."
              },
              {
                "name": "startup_check",
                "type_name": "optional",
                "description": "Used to check if the Kinova arm has been calibrated before or not. If it hasn't been calibrated, the function will run the calibration process."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 67,
              "insert": 68,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 126,
            "docLength": null
          },
          {
            "id": "969afdf3-ac40-7eaa-b343-bffb24fe1850",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Sets parameters for an instance of the `GenericWorker` class.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Used to set parameters for the function."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "Returned when the method execution completes successfully."
            },
            "name": "setParams",
            "location": {
              "start": 228,
              "insert": 234,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "0371c7e5-2efb-f5af-cb4d-62d84a647967",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Computes the joint angles and velocities for a Kinova arm based on the current position of the end effector and the target position. It also controls the movement of the robot using PyBullet and Kinova's API.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 237,
              "insert": 240,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 209,
            "docLength": null
          },
          {
            "id": "cc2317ee-44b8-f286-3f4e-5b94bb7ee3e1",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Tests various components and interfaces of a RoboCompKinovaArm, including TPose, TGripper, TJoint, TJoints, AxisParams, ButtonParams, and TData.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 485,
              "insert": 486,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "39dc58dd-37ea-03a2-ba4f-a1ebfa525311",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Calculates the difference between the positions of a kinova and a pybullet object, and adjusts the position of the cylinder base to minimize the error.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The difference between the positions of two sets of keypoints detected by the AAMED algorithm, used to correct the position of a cylinder."
            },
            "name": "correctTargetPosition",
            "location": {
              "start": 502,
              "insert": 505,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 38,
            "docLength": null
          },
          {
            "id": "7ef93e0b-5a9c-a4ad-7248-bb3d68cfb473",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Initializes various tools and objects within the `SpecificWorker` class, including a Swift environment, a Kinova robot, and axes for the robot's end effector and goal position.",
            "params": [],
            "returns": null,
            "name": "initialize_toolbox",
            "location": {
              "start": 564,
              "insert": 566,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 38,
            "docLength": null
          },
          {
            "id": "8b38c936-7985-e881-644b-b78e31ef015c",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Computes the joint velocities for a robot arm based on its end effector position and orientation. It uses the kinematic structure of the arm to compute the joint angles and takes into account constraints on the motion of the arm.",
            "params": [],
            "returns": null,
            "name": "toolbox_compute",
            "location": {
              "start": 626,
              "insert": 628,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 60,
            "docLength": null
          },
          {
            "id": "a83871f6-0a16-0abe-754c-b5aeb163704c",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Reads the fixed camera image from a PyBullet simulation and processes it to generate an RGB image.",
            "params": [],
            "returns": {
              "type_name": "3D",
              "description": "2D image captured by a camera."
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 768,
              "insert": 769,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 44,
            "docLength": null
          },
          {
            "id": "532e5298-961d-83aa-cc49-7437da5e8f5f",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Retrieves depth and color images from a Kinova camera, normalizes them, and appends them to instances of `depthKinova` and `colorKinova`.",
            "params": [],
            "returns": {
              "type_name": "True",
              "description": "A boolean value indicating whether the operation was successful or not."
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 839,
              "insert": 840,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "1a89959f-99b9-399f-624a-437d405fa051",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Calculates and prints the angles of a Kinova robot's joints, as well as the difference between those angles and the corresponding values retrieved from PyBullet.",
            "params": [],
            "returns": null,
            "name": "showKinovaAngles",
            "location": {
              "start": 855,
              "insert": 856,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "8d0303c3-462d-d5af-3d4b-e7add31c6c56",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Sets the target velocities for joints in a robot using PyBullet, and then applies those velocities to the robot's motors.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 865,
              "insert": 866,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "015b4d73-2134-cc93-6b4a-7a44ba7133eb",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Controls the velocity of a robot using PyBullet, setting joint motor control values for each joint based on target velocities provided in a list.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 875,
              "insert": 877,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "678efc8b-c731-5db5-644f-8027c8922ae1",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Reads data from a proxy server, specifically obtaining joint states and gripper distances, and then multiplies the gripper distance by 0.8 before sleeping for 0.05 seconds.",
            "params": [],
            "returns": null,
            "name": "readDataFromProxy",
            "location": {
              "start": 882,
              "insert": 883,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "b07f4e08-7fe2-af83-8247-ef46e953b2f2",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Moves the joints of a Kinova arm based on angles provided as input, using the `moveJointsWithAngle` method of the `kinovaarm_proxy` object.",
            "params": [
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "2D array containing radians representing joint angles to move in degrees."
              }
            ],
            "returns": null,
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 891,
              "insert": 892,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "02dad8cd-3ab6-b4b6-3b4d-30a58f3cee97",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Controls the movement of a robot's joints using speed commands generated based on error values and gain values.",
            "params": [],
            "returns": null,
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 896,
              "insert": 898,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "8a1d995c-51c8-88b3-8e4f-f242cfff2aa2",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Updates the gains of a robot's joints based on the difference between the current position and the desired position, and the timestamp of the current pose.",
            "params": [],
            "returns": null,
            "name": "updateGains",
            "location": {
              "start": 916,
              "insert": 917,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "7c8c8f06-ec71-539a-a446-17e94d0ebfc2",
            "ancestors": [
              "ef29c7a1-cb6b-8dad-1742-e9e410868437"
            ],
            "description": "Processes data from a joystick and updates the robot's position, orientation, and move mode based on the input axes and buttons. It also handles home positions for the robot's joints and gripper.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Passed as an argument from another function or main method, containing the joystick input data as a dictionary of axes and buttons."
              }
            ],
            "returns": null,
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 944,
              "insert": 945,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An interface `ifaces.RoboCompKinovaArm` that provides several methods for interacting with a Robocomp Kinova arm, including `startup`, `get_pose`, `get_gripper_state`, `move_joints_with_speed`, and `set_center_of_tool`. The code also implements these methods and provides additional functionality such as `buclePrueba` which demonstrates how to use the `get_pose` method to retrieve the current state of the arm and move it to a new position. Overall, the code provides a way for developers to interact with a Robocomp Kinova arm using Python.",
        "items": [
          {
            "id": "33f83743-73ae-b295-0445-708a86481b58",
            "ancestors": [],
            "description": "Manages a robotic arm's joints and gripper, providing methods for computing the arm's pose, getting the joints and gripper state, and moving the joints with speed or angle.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, indicating the interval between timer timeouts for computing joint positions."
              },
              {
                "name": "startup_check",
                "type_name": "unbound",
                "description": "Called when the worker is initialized. It performs some testing and checks to ensure that the robotic arm is working correctly."
              },
              {
                "name": "kinova",
                "type_name": "ifacesRoboCompKinovaArm",
                "description": "A reference to an instance of the KinovaGen3 class, which provides access to the RoboCompKinovaArm API."
              },
              {
                "name": "flag",
                "type_name": "bool",
                "description": "Used to indicate when the worker should perform its job."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a callable object at a specific interval, in this case, the function `compute`."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "A method that runs periodically to retrieve joint information from the Kinova arm."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "A list of objects representing the joint states of the Kinova arm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "A representation of the gripper state of the RoboCompKinovaArm."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 112,
            "docLength": null
          },
          {
            "id": "a54b7c1e-4f11-7bb1-8b42-eead5f562197",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Initializes an instance of the SpecificWorker class by setting up its properties and event handlers. It creates a KinovaGen3 object, sets a flag to False, and starts a timer to trigger computation every `Period` seconds.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map proxy objects to their corresponding worker objects."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to enable or disable a check when the SpecificWorker initializes."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "66eeb551-e7a1-2cbd-f545-ccdaf5390ef3",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets parameters for an instance of the `SpecificWorker` class, which inherits from `GenericWorker`. It returns `True` indicating successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "objectinstance",
                "description": "Passed to the method for modification or alteration."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "100% true."
            },
            "name": "setParams",
            "location": {
              "start": 59,
              "insert": 65,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f3cb01cb-8c05-e8a9-0a4d-ad750e3d481c",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and updates the positions, velocities, and forces of joints and gripper of a Robocomp Kinova arm based on sensor readings and returns True if successful.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTGripper",
              "description": "A struct consisting of distance and timestamp, and another value of type ifacesRoboCompKinovaArmTJoints which is also a struct consisting of joint angles, velocities, forces, and timestamp."
            },
            "name": "compute",
            "location": {
              "start": 68,
              "insert": 71,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "a05d1afd-2aa2-6a87-3e46-22fb2506f129",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Tests the RoboCompKinovaArm TPose and TGripper classes, and then calls QTimer.singleShot(200, QApplication.instance().quit) to quit the application after a delay of 200 milliseconds.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 98,
              "insert": 99,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "01df8849-6ec2-0789-564d-0e0e573b4987",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Closes the gripper of a robotic arm with the `kinova` module.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 113,
              "insert": 118,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "30554e28-9096-3f80-3346-24812daec6f0",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and returns the center of a tool referenced to a specific interface, using the `RoboCompKinovaArm` interface.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to specify the reference frame for the tool center point calculation."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A Pose object representing the center of the tool referenced to the arm."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "ee72a45f-0dc9-1f83-2c4b-1f36ab1420c1",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Opens the gripper of a Kinova arm, a robotic arm used for material handling and manipulation tasks, using the `kinova.open_gripper_speed()` method.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 139,
              "insert": 144,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "90e4fc0f-8760-5b9e-b846-4c49ef362865",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets the center of a tool referenced to a given pose within a specific worker class, inheriting from `GenericWorker`.",
            "params": [
              {
                "name": "pose",
                "type_name": "kinovageometryPose",
                "description": "Used to specify the position and orientation of the tool relative to the arm."
              },
              {
                "name": "referencedTo",
                "type_name": "KinovaArm_ReferencePoint",
                "description": "Used to specify the reference point for the tool center coordinate calculation."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 156,
              "insert": 161,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7960f2a5-1f08-9d9e-f640-ac6e796a90e5",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Moves the joints of a robot arm to specified angles, using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "angles",
                "description": "A joint angle representation containing multiple angles for different joints of the robot arm to move to."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 172,
              "insert": 173,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "74e70278-a86d-1591-4648-0387e24923b8",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Retrieves the current pose of an object using the `kinova.get_pose()` method and stores it in a variable called `state`.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]