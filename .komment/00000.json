[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a robot arm with 3 degrees of freedom (DOF) and implements a control system using a joystick and buttons. The code uses the `robot2` library to simulate the robot arm and `math` library for mathematical operations. The main function takes in a dictionary of data representing the current state of the robot and the desired position and orientation of the end effector, which is the part of the robot that interacts with objects in the environment.\n\nThe code first initializes the robot arm's position and orientation to their starting positions. It then iterates over the buttons in the data dictionary and updates the robot arm's move mode based on the button presses. The move mode determines which degree of freedom the robot arm will move in. The code also handles home commands for the robot arm, which reset the position and orientation of the end effector to their default positions.\n\nFor each axis of movement (X, Y, Z), the code updates the target position of the end effector based on the button presses and then adjusts the robot arm's position to match the target position. The code also handles the gripper degree of freedom by updating the target position of the end effector accordingly.\n\nOverall, this code implements a control system for a robot arm with 3 DOF using joystick and button inputs to control its movement and orientation.",
        "items": [
          {
            "id": "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac",
            "ancestors": [],
            "description": "Manages the communication between a PyBullet environment and a Kinova arm, translating joint angles and button presses into actions for the arm to perform. It also updates the robot's position and orientation based on user inputs.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "float",
                "description": "0 by default, indicating that the worker will run its function at a fixed rate (in this case, once every 100 milliseconds)."
              },
              {
                "name": "rgb",
                "type_name": "ndarray",
                "description": "3D array representing the red, green, and blue values of a color image or video frame."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "1 by default. It represents whether the worker has finished starting up and is ready to work."
              },
              {
                "name": "physicsClient",
                "type_name": "instance",
                "description": "Used to store a reference to the physics client that is used for communication with the robot's physics engine."
              },
              {
                "name": "plane",
                "type_name": "8dimensional",
                "description": "Used to store the position and orientation of the end effector in a reference frame, specifically the world coordinate system."
              },
              {
                "name": "table_id",
                "type_name": "int",
                "description": "Used to store a unique identifier for each table that the worker can handle, allowing the worker to manage multiple tables simultaneously."
              },
              {
                "name": "robot_urdf",
                "type_name": "obbOBB",
                "description": "Used to represent the robot's end effector in 3D space, which is essential for controlling the robot's movements."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "8element",
                "description": "Used to store the position of the robot's launch pad when it is launched from a specific location on the ground."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "npndarray",
                "description": "Used to store the orientation of the robot at the time of launch."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "8bit",
                "description": "Used to specify the index of the end effector link (e.g., gripper) of a specific robot arm in a kinematic chain. It helps identify the correct end effector for joint-based control of the robot arm."
              },
              {
                "name": "home_angles",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the desired joint angles for each joint in the robot's home position."
              },
              {
                "name": "observation_angles",
                "type_name": "7dimensional",
                "description": "Used to store the joint angles observed by the worker's end effector during execution of a task."
              },
              {
                "name": "observation_angles_2",
                "type_name": "ndarray",
                "description": "Used to store the angles of the robot's joints observed from the simulation."
              },
              {
                "name": "observation_angles_3",
                "type_name": "7element",
                "description": "Used to store the angles of the robot's joints in the Kinova Arm, which are observed by the worker."
              },
              {
                "name": "observation_angles_cube",
                "type_name": "3D",
                "description": "Used to store the angles of the cube observed by the worker, which will be used to calculate the joint speeds."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "Used to identify the specific worker robot, with each robot having a unique ID."
              },
              {
                "name": "pybullet_cup",
                "type_name": "str",
                "description": "A reference to a PyBullet cup object, which is used to handle interactions with the robot's end effector."
              },
              {
                "name": "square",
                "type_name": "ndarray",
                "description": "4-dimensional, representing the speed of each joint in the robot's arm as a square vector."
              },
              {
                "name": "hilo_lectura",
                "type_name": "list",
                "description": "Used to store the joint speeds read from the HIL (Hardware-in-the-Loop) interface."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "async",
                "description": "Used to read data from a Kinova robot proxy, which is a simulation of the real-world kinematics of a robot. It takes in data from the proxy and updates the target positions, orientations, and gains of the robot based on user inputs from the joystick."
              },
              {
                "name": "target_angles",
                "type_name": "7element",
                "description": "Used to store the target angles for each joint of the robot."
              },
              {
                "name": "target_position",
                "type_name": "3D",
                "description": "Used to store the target position of the robot's end effector in Python Robotics library."
              },
              {
                "name": "target_orientation",
                "type_name": "3x3",
                "description": "Used to store the desired orientation of the end effector (gripper) of the robot in quaternion form. It is used to calculate the orientation of the end effector based on the joystick inputs."
              },
              {
                "name": "target_velocities",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the target velocities for each joint of the robot in radians per second."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "7element",
                "description": "Initialized to a random joint and updated based on the joystick inputs, representing the currently selected joint for movement."
              },
              {
                "name": "move_mode",
                "type_name": "int",
                "description": "0, 1, 2, or 3, representing four different movement modes for the robot arm, including home positioning, joint angle control, gripper control, and mode switching."
              },
              {
                "name": "n_rotations",
                "type_name": "ndarray",
                "description": "Used to store the rotation angles of the end effector for each joint in a specific order."
              },
              {
                "name": "ext_joints",
                "type_name": "7element",
                "description": "Used to store the joint angles of a Kinova arm, which are used to compute the gains for the robot's motors."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "pybulletPyBullet",
                "description": "Used to simulate the movement of a Kinova arm using the PyBullet library. It allows the worker to send movement commands to the Kinova arm and receive its current position and orientation."
              },
              {
                "name": "ext_gripper",
                "type_name": "8element",
                "description": "A gripper state, which represents the position and orientation of the robot's end effector (gripper) in 3D space."
              },
              {
                "name": "posesTimes",
                "type_name": "ndarray",
                "description": "1D array storing the time stamps of the robot's poses in milliseconds since the start of the simulation."
              },
              {
                "name": "poses",
                "type_name": "7element",
                "description": "Used to store the current joint positions of the robot in radians."
              },
              {
                "name": "timestamp",
                "type_name": "int",
                "description": "Used to store the current timestamp of the worker, which is used to control the movement of the robot."
              },
              {
                "name": "timer",
                "type_name": "int",
                "description": "Used to keep track of the time spent working on a task, allowing for the calculation of the worker's speed."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "Used to compute the target position, orientation, and speed for each joint based on the user input data from a joystick or keyboard and mouse."
              },
              {
                "name": "timer2",
                "type_name": "int",
                "description": "2 seconds, indicating the time interval between executions of the `updateGains` method."
              },
              {
                "name": "movePybulletWithExternalVel",
                "type_name": "instance",
                "description": "Used to move a robot arm with an external velocity signal. It calls the `moveJointsWithSpeed` method of the `KinovaArm` proxy object with the external velocity signal as input."
              },
              {
                "name": "joint_speeds",
                "type_name": "ndarray",
                "description": "7-element vector containing joint speeds (radians per second) for a Kinova arm, which are used to calculate the joint angles based on the input joystick data."
              },
              {
                "name": "gains",
                "type_name": "7element",
                "description": "Used to store the joint gains for each joint in the robot, which are calculated based on the user's input and the error between the desired and actual joint angles."
              },
              {
                "name": "speeds",
                "type_name": "npndarray",
                "description": "Used to store the joint speeds as a list of values in radians per second."
              },
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "7-dimensional, where each element represents the angle of a joint in radians. It stores the current angles of the robot's joints based on the input from the joystick adapter."
              },
              {
                "name": "timer3",
                "type_name": "int",
                "description": "3, indicating that the worker is running on a machine with 3 CPU cores."
              },
              {
                "name": "moveKinovaWithSpeeds",
                "type_name": "instance",
                "description": "Used to move the robot's joints with specific speeds. It takes in a list of joint speeds and moves the joints using the PyBullet API."
              },
              {
                "name": "timer4",
                "type_name": "int",
                "description": "4, indicating that this worker has a timer with a duration of 4 seconds."
              },
              {
                "name": "movePybulletWithToolbox",
                "type_name": "instance",
                "description": "Used to move a robot arm with joint speeds calculated by the toolbox and sent to the PyBullet environment. It handles the communication between the toolbox and PyBullet to execute the moves."
              },
              {
                "name": "colorKinova",
                "type_name": "str",
                "description": "Used to represent the color of the Kinova robot's end effector. It determines the color of the \nend effector in the simulation, which can be useful for visualization purposes or when \ncommunicating with other agents."
              },
              {
                "name": "depthKinova",
                "type_name": "ndarray",
                "description": "1x7, representing the joint angles of a Kinova arm as a depth image."
              },
              {
                "name": "calibrator",
                "type_name": "instance",
                "description": "Used to store the calibration parameters for the robot's joints, such as gains and timestamps, which are calculated during the calibration process."
              },
              {
                "name": "timer5",
                "type_name": "int",
                "description": "5 seconds, which is the time interval between data updates from the joystick adapter."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "method",
                "description": "Used to read the camera data from the Kinova robot's camera sensor. It takes no arguments and returns a list of tuples containing the camera image and its timestamp."
              },
              {
                "name": "timer6",
                "type_name": "float",
                "description": "6 seconds, which is the time interval between data updates from the joystick adapter."
              },
              {
                "name": "correctCupPosition",
                "type_name": "ndarray",
                "description": "1-dimensional, indicating the correct position of the cup to be reached by the robot arm."
              },
              {
                "name": "timer7",
                "type_name": "int",
                "description": "7, indicating that the worker has 7 joints or degrees of freedom."
              },
              {
                "name": "showKinovaAngles",
                "type_name": "ndarray",
                "description": "0 or 1, indicating whether to show the kinova angles or not when the move mode changes."
              },
              {
                "name": "aamed",
                "type_name": "attribute",
                "description": "Used to hold the joint speeds in radians per second for each joint of the robot. It is a list of 7 elements, where each element represents the speed of one of the joints of the robot."
              },
              {
                "name": "flag",
                "type_name": "int",
                "description": "4 by default, which means that the worker can perform 4 different actions based on the input data."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 64,
              "insert": 65,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 772,
            "docLength": null
          },
          {
            "id": "1c6cf14b-99f0-5294-6249-e0abeba9c96b",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Of SpecificWorker initializes various kinova arm variables, creates timers for movement and calibration, and sets up the PyBullet environment for the robot.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map Kinova arm joints names to PyBullet joints names. It allows the user to customize the mapping between the two frameworks."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "Used to check if the startup sequence has been run before, avoiding unnecessary recomputation of the joints angles."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 65,
              "insert": 66,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 152,
            "docLength": null
          },
          {
            "id": "41f83c24-ecbc-77b6-7b4f-e391eb40af9e",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Sets parameters for an instance of the `GenericWorker` class it belongs to, returning `True`.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Passed to set parameters."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True when successful and otherwise an error occurs."
            },
            "name": "setParams",
            "location": {
              "start": 257,
              "insert": 263,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "15bb65b5-b826-9a8c-e143-c7d095f05d10",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Calculates the angles for the robot to reach a specific position and orientation, based on the observation angles obtained from the camera feed. It also performs the necessary joint movements to achieve these angles and updates the target positions and velocities accordingly.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 266,
              "insert": 269,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 172,
            "docLength": null
          },
          {
            "id": "4a08669b-59a7-5aa5-3d41-063efa1b1db8",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Performs various tests on different components of the RoboCompKinovaArm and its adapters, including TPose, TGripper, TJoint, TJoints, AxisParams, ButtonParams, and TData.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 474,
              "insert": 475,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "390a96e1-f35e-78bd-6c44-2c794bd13999",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Calculates the position of a cup based on the error between the detected keypoints and the expected position, and updates the base position and orientation of the cup using PyBullet's API.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The difference between the position of the cup and the keypoints detected by AAMED."
            },
            "name": "correctCupPosition",
            "location": {
              "start": 491,
              "insert": 497,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "db335943-4b47-2a86-a24b-ed5727fb0634",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Initializes the toolbox of a SpecificWorker, setting up the kinematic chain, adding objects to the environment, and defining the desired end-effector pose for task execution.",
            "params": [],
            "returns": null,
            "name": "initialize_toolbox",
            "location": {
              "start": 554,
              "insert": 556,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "38a01bf7-e769-01ae-564c-8795f043d3cb",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Performs computations for a specific worker robot in a simulated environment. It updates the worker's position, orientation, and velocity based on its kinematics and dynamics, and computes joint angles to approach a target position and orientation.",
            "params": [],
            "returns": null,
            "name": "toolbox_compute",
            "location": {
              "start": 609,
              "insert": 611,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 62,
            "docLength": null
          },
          {
            "id": "4e5ab999-cf95-a1b9-444b-b19d5e1e6e63",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Generates a camera image using PyBullet, given its intrinsic parameters and the current position and rotation of the camera. It then displays the resulting image in an OpenGL window.",
            "params": [],
            "returns": {
              "type_name": "3D",
              "description": "4 dimensional numpy array that represents a RGB image of the camera frame."
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 750,
              "insert": 752,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 40,
            "docLength": null
          },
          {
            "id": "d3ccb4c0-cd10-2d97-fd4a-c0e8161aaeda",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Retrieves depth and color images from Kinova cameras through a proxy, normalizes the depth image, and appends it to a list along with the corresponding alive time.",
            "params": [],
            "returns": {
              "type_name": "OptionalTupleNParray",
              "description": "2-element tuple containing a 3D numpy array of depth image and a list of alive time for each pixel, as well as a 2-dimensional numpy array of color image and a list of alive time for each pixel."
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 812,
              "insert": 813,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "e43a9571-293d-6ebc-d741-de5f7455f878",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Displays kinova angles and differences between joint states from PyBullet and the SpecificWorker's `ext_joints` attribute.",
            "params": [],
            "returns": null,
            "name": "showKinovaAngles",
            "location": {
              "start": 837,
              "insert": 838,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "e13edd6c-0847-87bc-fb47-1392e738a897",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Sets the target velocities for joints defined by an external module, then converts those velocities to radians and multiplies them by a factor of 1.2 before passing them to PyBullet's `setJointMotorControl2` method to control the robot's movement.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 854,
              "insert": 855,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "b1b5a64f-5873-93a4-784f-f214e83cfe70",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Within the `SpecificWorker` class controls the velocities of joints associated with a robot identified by `robot_id` using PyBullet's `setJointMotorControl2` method, based on target velocities provided in an array.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 864,
              "insert": 866,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "d3962ec5-bd66-9ab9-0a49-de9792109ee7",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Retrieves joint and gripper state data from a Kinova arm proxy, scales the gripper distance by 80%, and sleeps for 0.05 seconds before repeating the process.",
            "params": [],
            "returns": null,
            "name": "readDataFromProxy",
            "location": {
              "start": 871,
              "insert": 872,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "f1dd6ca3-9dfb-d184-d44b-9f1b5102b60f",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Converts angles to degrees and rounds them to an array, then passes the array to the `kinovaarm_proxy.moveJointsWithAngle` method to move the robot's joints based on the provided angles.",
            "params": [
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "2D array representing joint angles in radians."
              }
            ],
            "returns": null,
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 880,
              "insert": 881,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f645a9f0-ab50-57a0-9146-71a936f0cd98",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Moves the joints of a Kinova arm using predefined speeds, retrieved from the robot's state.",
            "params": [],
            "returns": null,
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 885,
              "insert": 887,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d5ae105c-76b6-b097-094d-6831fbcf7076",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Updates gains for joints based on error between desired and actual angles, calculated using PyBullet and Kinova angles. It also updates the current timestamp and the poses array.",
            "params": [],
            "returns": null,
            "name": "updateGains",
            "location": {
              "start": 898,
              "insert": 899,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "7d30a804-4396-76bc-a740-5f13ebc55921",
            "ancestors": [
              "7efb37a0-bd3b-5d83-4940-306aa5a9e3ac"
            ],
            "description": "Receives data from a joystick and updates the position and orientation of a robot based on the received data. It also handles button presses and changes the move mode of the robot accordingly.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Passed as an argument to the function, containing the data from the joystick input, including axis values and button states."
              }
            ],
            "returns": null,
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 927,
              "insert": 928,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An interface `ifaces.RoboCompKinovaArm` that provides methods for interacting with a Kinova Gen3 robot arm, including getting the current pose and gripper state, setting the center of tool, opening and closing the gripper, and moving joints to specific angles or at a specified speed. The code also implements these methods and adds some additional functionality, such as a `buclePrueba` method that demonstrates how to use the `get_pose` and `move_joints_to` methods of the Kinova arm. Overall, the code provides a basic interface for interacting with a Kinova Gen3 robot arm in Python.",
        "items": [
          {
            "id": "24e16778-a09e-aba3-f444-b111e77b1ea0",
            "ancestors": [],
            "description": "Manages a robotic arm and gripper, controlling their movements and joint angles through method calls. It also provides methods for getting joint states, gripper state, and pose information.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, which represents the time interval for the timer in milliseconds."
              },
              {
                "name": "startup_check",
                "type_name": "inline",
                "description": "Defined as a function that tests various aspects of the `RoboCompKinovaArm` interface, including its pose and gripper state."
              },
              {
                "name": "kinova",
                "type_name": "ifacesRoboCompKinovaArmTKinova",
                "description": "Used to interact with the Kinova Gen3 robot arm."
              },
              {
                "name": "flag",
                "type_name": "int",
                "description": "Initialized to False. It is used to indicate whether the startup check has been performed or not."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `compute` method at regular intervals (period) using the `timeout` method."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "Called when the timer timeout occurs. It initializes variables, gets joints and gripper state from the Kinova arm, and then computes the final pose of the arm based on the joint angles and gripper distance."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "Initialized with joint positions, velocities, and forces from the KinovaGen3 arm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "A representation of the gripper state of the Kinova arm."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 115,
            "docLength": null
          },
          {
            "id": "46026663-0642-68b0-4e47-0df8b45a655b",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Initializes an instance of SpecificWorker, setting up its internal state and starting a timer for periodic computation.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map proxy names to their corresponding kinova objects, allowing for easy interaction with multiple kinova devices through a single interface."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to determine whether to run the `startup_check()` method during initialization."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "c0319a6c-381b-f790-a240-f8be36357038",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Sets parameters for an instance of a `GenericWorker` subclass, `SpecificWorker`. It returns `True` upon successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Used to set parameters for the function."
              }
            ],
            "returns": {
              "type_name": "OptionalTrue",
              "description": "A value that may or may not be present and can have any value."
            },
            "name": "setParams",
            "location": {
              "start": 59,
              "insert": 65,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "8831fd58-2d0f-c7ba-eb4e-669d8da08f4a",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Computes and returns joints and gripper states for an arm robot based on sensor readings.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTJoints",
              "description": "A list of TJoint objects containing information about the robot's joints, followed by a TGripper object containing information about the gripper's state."
            },
            "name": "compute",
            "location": {
              "start": 68,
              "insert": 70,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "a43cec88-b410-0b98-2347-6a8e12ea0adf",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Tests various aspects of the `ifaces.RoboCompKinovaArm` interface and quits the application after 200 milliseconds.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 98,
              "insert": 99,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "ec921b6f-39a6-5184-eb4b-8194fb82d428",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Is a method of the `SpecificWorker` class that closes the gripper of a Kinova arm at a speed determined by the `close_gripper_speed()` method of the kinova object.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 113,
              "insert": 118,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "31d55e30-7098-7787-cb44-6c9c12419df0",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Retrieves the center of a tool relative to a Kinova Arm, using the arm's pose as reference.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to specify the reference frame for the tool center coordinates."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A pose object representing the center of the tool referenced to the arm."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "242c02ff-b58b-84a0-7c42-004e7b0e519b",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Opens the gripper of a Kinova arm, a type of robotic arm, using the `kinova.open_gripper_speed()` method.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 139,
              "insert": 144,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ab7ceb05-3753-49be-6a49-67f718326591",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Sets the center of a tool referenced to a pose in the KinovaArm framework.",
            "params": [
              {
                "name": "pose",
                "type_name": "kinovaPose",
                "description": "Used to set the center of the tool relative to the arm's end effector."
              },
              {
                "name": "referencedTo",
                "type_name": "object",
                "description": "Used to reference the coordinate system that the tool should be set to."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 156,
              "insert": 161,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "02972692-68d4-5e86-454f-674d81cb8aeb",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Moves the joints of a Kinova arm to specified angles using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "Angle",
                "description": "Used to set the joint angles for movement of the Kinova arm."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 172,
              "insert": 173,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "80f67422-b2bd-2dbe-644b-c23e5a54ce3f",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Retrieves and stores the current pose state of an object using the `kinova.get_pose()` method, which is a part of the `GenericWorker` class that the function inherits from.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]