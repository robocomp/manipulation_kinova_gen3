[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class KinovaController that interacts with a Kinova robot arm through the PyBullet library. The class handles subscriptions to data streams from the robot and updates the joint angles and gains based on the received data. It also has methods for moving the robot arm to specific positions and orientations, and for controlling the gripper. The code uses the PyBullet library to interact with the robot and the PyQt5 library for handling GUI events.",
        "items": [
          {
            "id": "2a3c131b-f889-73ba-c741-e36f76969bdd",
            "ancestors": [],
            "description": "Manages the movement and orientation of a robot based on user inputs, controlling the robot's axes and gripper to perform specific tasks. It receives data from a user input device and updates the robot's position and orientation accordingly.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "5 by default, which represents the number of times the worker will execute the given command per period."
              },
              {
                "name": "rgb",
                "type_name": "ndarray",
                "description": "3-dimensional, representing the red, green, and blue colors of the robot's body parts in the current state."
              },
              {
                "name": "timestamp",
                "type_name": "int",
                "description": "Used to store the timestamp of when the worker was created."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "4 by default, indicating that the worker has started its work cycle. It is used to check if the worker has finished its work cycle after receiving a `data` message from the robot."
              },
              {
                "name": "physicsClient",
                "type_name": "object",
                "description": "Used to handle physics-related operations, such as moving the robot's end effector or updating the robot's orientation."
              },
              {
                "name": "plane",
                "type_name": "str",
                "description": "Used to store the name of the plane the robot is currently working on."
              },
              {
                "name": "table_id",
                "type_name": "int",
                "description": "4 by default, which represents the worker's table number."
              },
              {
                "name": "robot_urdf",
                "type_name": "str",
                "description": "A path to a file containing the robot's URDF (Universal Robot Description Format) file, which defines the robot's kinematics and dynamics."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "list",
                "description": "Used to store the launch position of the robot. It has three elements: (x, y, z) representing the position of the robot's end effector in the workspace."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "OptionalListfloat",
                "description": "Used to store the orientation of the robot's end effector relative to its base. It is used to calculate the orientation of the end effector in 3D space based on the joint angles and orientation of the robot's body."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "int",
                "description": "2 by default, indicating that the end effector is the second link of the robot's arm. It is used to define the index of the end effector in the robot's link structure."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "4 by default, indicating that this worker is the fourth robot in a fleet of robots."
              },
              {
                "name": "home_angles",
                "type_name": "3element",
                "description": "Used to store the home positions of the joints, which are the initial positions of the robot when it is turned on."
              },
              {
                "name": "observation_angles",
                "type_name": "list",
                "description": "A list of angles representing the orientation of the robot's end effector relative to its initial position, which are used for controlling the robot's gripper."
              },
              {
                "name": "pybullet_cup",
                "type_name": "attribute",
                "description": "Used to store a reference to the PyBullet cup object, which is used for simulating robot movements."
              },
              {
                "name": "square",
                "type_name": "int",
                "description": "4 by default, representing the number of dimensions of the worker's workspace."
              },
              {
                "name": "threadKinovaAngles",
                "type_name": "list",
                "description": "Used to store the angles of the robot's joints in the Kinova Robotics API format, which are used for controlling the robot's movements."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "operator",
                "description": "Used to read data from a proxy server representing a robot. It takes in the robot's joint angles and button presses as input and updates the robot's position, orientation, and move mode based on the received data."
              },
              {
                "name": "colorKinova",
                "type_name": "str",
                "description": "4 characters long, representing the color of the robot's body."
              },
              {
                "name": "depthKinova",
                "type_name": "int",
                "description": "3 by default, indicating that the worker has a depth sensor connected to it."
              },
              {
                "name": "target_angles",
                "type_name": "3D",
                "description": "Used to store the target orientations for each joint of the robot."
              },
              {
                "name": "target_position",
                "type_name": "3element",
                "description": "Used to store the target position of the robot's end effector in the joint space, which can be updated based on the input axis values."
              },
              {
                "name": "target_orientation",
                "type_name": "3D",
                "description": "Used to store the target orientation of the robot in a specific work mode, which is updated based on the axis values received from the API."
              },
              {
                "name": "target_velocities",
                "type_name": "ndarray",
                "description": "4-dimensional, representing the target velocities for the four joints of the robot (X, Y, Z, and gripper) in the `robot2` frame."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "int",
                "description": "0-based indexed joint id selected by the user from the joystick."
              },
              {
                "name": "move_mode",
                "type_name": "int",
                "description": "0 by default, it represents the current mode of the robot's move, with values ranging from 0 to 4, where each value corresponds to a specific move command."
              },
              {
                "name": "ext_joints",
                "type_name": "list",
                "description": "1-dimensional, it contains the joint names of the robot that are exposed to external controls (move mode, home, etc.)."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "instance",
                "description": "Used to handle communication with the Kinova arm controller."
              },
              {
                "name": "ext_gripper",
                "type_name": "str",
                "description": "Used to store the external gripper's position information."
              },
              {
                "name": "timer",
                "type_name": "int",
                "description": "0 by default, indicating that the worker has not been running for a specific amount of time."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "Defined as a function that takes no arguments, computes and updates various robot parameters based on the received data packet."
              },
              {
                "name": "joint_speeds",
                "type_name": "ndarray",
                "description": "3x1, representing the joint speeds for each axis (X, Y, and Z) as floats between 0 and 1."
              },
              {
                "name": "speeds",
                "type_name": "list",
                "description": "Used to store the desired speed values for each joint of the robot. It stores the speed values as a list of tuples, where each tuple contains the joint name and the desired speed value in the range of [0, 1]."
              },
              {
                "name": "angles",
                "type_name": "list",
                "description": "Used to store the current angle values of the joints in the robot. It has a size of 3, corresponding to the 3 degrees of freedom (DOF) of the robot. Each element in the list corresponds to one DOF, and its value represents the angle of the joint in radians."
              },
              {
                "name": "gains",
                "type_name": "ndarray",
                "description": "Used to define the control gains for the robot's joints, which are used to calculate the new position and orientation of the robot based on the user inputs."
              },
              {
                "name": "posesTimes",
                "type_name": "ndarray",
                "description": "3D array representing the positions and orientations of the robot over time, with each element representing a pose (position and orientation) at a specific time step."
              },
              {
                "name": "poses",
                "type_name": "list",
                "description": "3D positional vectors that represent the robot's end effector positions in each mode."
              },
              {
                "name": "calibrator",
                "type_name": "instance",
                "description": "Used to store the calibration data for the specific robot worker, which contains information\n     about the joint angles and button presses required to reach a target position or orientation."
              },
              {
                "name": "cameraKinovaTimer",
                "type_name": "float",
                "description": "0 by default, which represents the time to wait before taking a new image from the camera in milliseconds."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "Callable",
                "description": "Used to read data from a Kinova camera, which is a robotic arm's onboard camera."
              },
              {
                "name": "showKinovaStateTimer",
                "type_name": "int",
                "description": "3 by default, indicating that the worker will show the Kinova state every 3 seconds."
              },
              {
                "name": "showKinovaAngles",
                "type_name": "bool",
                "description": "Used to show the angles of the robot's joints when it moves in response to user input."
              },
              {
                "name": "gainsTimer",
                "type_name": "float",
                "description": "Used to store the gains of the robot's joints in a timer format, which is used to calculate the new position and orientation of the robot based on the input data."
              },
              {
                "name": "updateGains",
                "type_name": "Callable",
                "description": "Used to update the gains of the worker based on certain conditions, such as the position and orientation of the robot's end effector."
              },
              {
                "name": "aamed",
                "type_name": "attribute",
                "description": "Used to store a list of axes names that are moved by the worker when it's in move mode. It's used to track which axes are being moved and how much they are being moved."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 66,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 762,
            "docLength": null
          },
          {
            "id": "9ea6e6b2-0501-70b4-4347-a028a8a1b472",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Sets up the PyBullet environment, loads URDF models for the Kinova arm and cup, reads real-time angles from the Kinova controller, starts timers for reading camera images, computing joint speeds, and updating gains, and initializes other variables and classes.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "int",
                "description": "Used to specify the index of the Kinova robot in the PyBullet environment. It maps the Kinova robot's ID to the PyBullet robot ID, allowing for proper communication between the two frameworks."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "0 by default, which means that the method will check for the robot's home position and angles after startup. If set to a non-zero value, it will disable this check and the method will not update the robot's position and angles after startup."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 67,
              "insert": 68,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 131,
            "docLength": null
          },
          {
            "id": "46561904-8d1f-3080-5c42-347327806e33",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Sets the parameters for an instance of the `SpecificWorker` class, which is a subclass of `GenericWorker`. It returns `True` indicating successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Used to set parameters for the function."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "100% of the time."
            },
            "name": "setParams",
            "location": {
              "start": 233,
              "insert": 239,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "b1c6b092-75db-c197-014f-fc02f48b1a3e",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Performs calibration and movement of a robot arm to reach specific angles, while also tracking the time elapsed since the start of the program. It also reads camera images and detects objects using YOLO detection.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 242,
              "insert": 245,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 185,
            "docLength": null
          },
          {
            "id": "5c6d051f-8658-ffac-c34f-6a9fad3eb2fd",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Tests various components and methods of the `ifaces` module, including `RoboCompKinovaArm`, `TGripper`, `TJoint`, `TJoints`, `RoboCompJoystickAdapter`, and `AxisParams`.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 468,
              "insert": 469,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "5c4e78f0-fc7d-5887-024b-109977cf089d",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Calculates the position of a cup using computer vision and motion tracking, based on images captured by a camera and the position of the cup's base tracked by PyBullet. The function adjusts the position of the cup to match the desired position.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The distance between the predicted and actual keypoints of the cup."
            },
            "name": "correctCupPosition",
            "location": {
              "start": 485,
              "insert": 492,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "8100eaae-5bf8-a48a-b946-71846ff5cf53",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Initializes various components of the environment and the end-effector, including a Swift model, Kinova Gen3 robot, and a cylinder object. It also sets the desired end-effector pose and the time step for simulation.",
            "params": [],
            "returns": null,
            "name": "initialize_toolbox",
            "location": {
              "start": 552,
              "insert": 554,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "c8b814ea-5419-bd93-f94c-472b43daa9e3",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Computes and updates the worker's kinematic and dynamic variables, including its end effector position and orientation, using a toolbox of functions provided by the class `Kinova`. It also implements a position controller to move the end effector towards a goal pose.",
            "params": [],
            "returns": null,
            "name": "toolbox_compute",
            "location": {
              "start": 607,
              "insert": 609,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 57,
            "docLength": null
          },
          {
            "id": "38f2e3c7-54aa-c9bc-8949-2688cb1dd9f1",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Reads camera data from a PyBullet robot and processes it to display an RGB image.",
            "params": [],
            "returns": {
              "type_name": "2D",
              "description": "A grayscale image captured by a camera."
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 744,
              "insert": 745,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 44,
            "docLength": null
          },
          {
            "id": "727d66e5-9175-71bd-5c4e-2363f573431b",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Retrieves camera data from Kinova API and stores it in member variables `depthKinova` and `colorKinova`. It also displays the depth image using `cv2.imshow`.",
            "params": [],
            "returns": {
              "type_name": "True",
              "description": "1."
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 815,
              "insert": 816,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "b826dca9-7160-459d-9549-0c3938fbd38f",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Calculates and prints the kinematic angles and differences between the robot's actual angles and those retrieved from PyBullet for a specific robot instance.",
            "params": [],
            "returns": null,
            "name": "showKinovaAngles",
            "location": {
              "start": 841,
              "insert": 842,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "3691cae7-6bce-1983-944b-b77d77a1f671",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Modifies the velocity of the robot's joints based on external inputs and updates the target velocities for the motor control.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 851,
              "insert": 852,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "49db037f-513a-3497-da43-46066b001fba",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Controls the velocity of robot joints using PyBullet's `setJointMotorControl2()` method, based on target velocities provided in a list.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 861,
              "insert": 863,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "40e3bf78-9ef5-52bd-cb4a-c020f1f8372a",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Reads data from a Kinova arm proxy, including joints state and gripper state, and adjusts the gripper distance by 80% of its original value before sleeping for 0.05 seconds.",
            "params": [],
            "returns": null,
            "name": "readDataFromProxy",
            "location": {
              "start": 868,
              "insert": 869,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "7f2d14d2-48d7-1e81-1446-3409d0b995a0",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Converts angles into joint angles and passes them to the `moveJointsWithAngle` method of the `kinovaarm_proxy` object, which moves the robot's kinonic arm based on the provided angles.",
            "params": [
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "360-degree radian angles provided by the user for moving the Kinova arm."
              }
            ],
            "returns": null,
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 877,
              "insert": 878,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "4b81f128-f885-e6a1-0840-c2dd88629a1e",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Calculates joint speeds for a Kinova arm based on current joint angles and adds them to a list, which is then passed to the `moveJointsWithSpeed` method of the kinova arm proxy for movement.",
            "params": [],
            "returns": null,
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 882,
              "insert": 884,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "708366b7-d351-f38b-2544-e35cfbabafe2",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Updates the gains for a specific robotic arm based on the current joint angles and velocities, using a PID controller to adjust the gains based on the error between the desired and actual joint angles.",
            "params": [],
            "returns": null,
            "name": "updateGains",
            "location": {
              "start": 902,
              "insert": 903,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "7cf06a97-5d04-b5b0-7144-4b70a375c586",
            "ancestors": [
              "2a3c131b-f889-73ba-c741-e36f76969bdd"
            ],
            "description": "Receives data from a joystick and updates the position and orientation of a robot based on the joystick movements. It also handles button presses and switches between different modes of the robot's movement.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Passed from the main function, containing the received joystick data from the user's input."
              }
            ],
            "returns": null,
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 930,
              "insert": 931,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An interface `ifaces.RoboCompKinovaArm` that provides several methods for interacting with a Robocomp Kinova arm, including `startup`, `get_pose`, `get_gripper_state`, `move_joints_with_speed`, and `set_center_of_tool`. The code also implements these methods and provides additional functionality such as `buclePrueba` which demonstrates how to use the `get_pose` method to retrieve the current state of the arm and move it to a new position. Overall, the code provides a way for developers to interact with a Robocomp Kinova arm using Python.",
        "items": [
          {
            "id": "33f83743-73ae-b295-0445-708a86481b58",
            "ancestors": [],
            "description": "Manages a robotic arm's joints and gripper, providing methods for computing the arm's pose, getting the joints and gripper state, and moving the joints with speed or angle.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, indicating the interval between timer timeouts for computing joint positions."
              },
              {
                "name": "startup_check",
                "type_name": "unbound",
                "description": "Called when the worker is initialized. It performs some testing and checks to ensure that the robotic arm is working correctly."
              },
              {
                "name": "kinova",
                "type_name": "ifacesRoboCompKinovaArm",
                "description": "A reference to an instance of the KinovaGen3 class, which provides access to the RoboCompKinovaArm API."
              },
              {
                "name": "flag",
                "type_name": "bool",
                "description": "Used to indicate when the worker should perform its job."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a callable object at a specific interval, in this case, the function `compute`."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "A method that runs periodically to retrieve joint information from the Kinova arm."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "A list of objects representing the joint states of the Kinova arm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "A representation of the gripper state of the RoboCompKinovaArm."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 112,
            "docLength": null
          },
          {
            "id": "a54b7c1e-4f11-7bb1-8b42-eead5f562197",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Initializes an instance of the SpecificWorker class by setting up its properties and event handlers. It creates a KinovaGen3 object, sets a flag to False, and starts a timer to trigger computation every `Period` seconds.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map proxy objects to their corresponding worker objects."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to enable or disable a check when the SpecificWorker initializes."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "66eeb551-e7a1-2cbd-f545-ccdaf5390ef3",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets parameters for an instance of the `SpecificWorker` class, which inherits from `GenericWorker`. It returns `True` indicating successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "objectinstance",
                "description": "Passed to the method for modification or alteration."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "100% true."
            },
            "name": "setParams",
            "location": {
              "start": 59,
              "insert": 65,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f3cb01cb-8c05-e8a9-0a4d-ad750e3d481c",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and updates the positions, velocities, and forces of joints and gripper of a Robocomp Kinova arm based on sensor readings and returns True if successful.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTGripper",
              "description": "A struct consisting of distance and timestamp, and another value of type ifacesRoboCompKinovaArmTJoints which is also a struct consisting of joint angles, velocities, forces, and timestamp."
            },
            "name": "compute",
            "location": {
              "start": 68,
              "insert": 71,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "a05d1afd-2aa2-6a87-3e46-22fb2506f129",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Tests the RoboCompKinovaArm TPose and TGripper classes, and then calls QTimer.singleShot(200, QApplication.instance().quit) to quit the application after a delay of 200 milliseconds.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 98,
              "insert": 99,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "01df8849-6ec2-0789-564d-0e0e573b4987",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Closes the gripper of a robotic arm with the `kinova` module.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 113,
              "insert": 118,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "30554e28-9096-3f80-3346-24812daec6f0",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and returns the center of a tool referenced to a specific interface, using the `RoboCompKinovaArm` interface.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to specify the reference frame for the tool center point calculation."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A Pose object representing the center of the tool referenced to the arm."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "ee72a45f-0dc9-1f83-2c4b-1f36ab1420c1",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Opens the gripper of a Kinova arm, a robotic arm used for material handling and manipulation tasks, using the `kinova.open_gripper_speed()` method.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 139,
              "insert": 144,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "90e4fc0f-8760-5b9e-b846-4c49ef362865",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets the center of a tool referenced to a given pose within a specific worker class, inheriting from `GenericWorker`.",
            "params": [
              {
                "name": "pose",
                "type_name": "kinovageometryPose",
                "description": "Used to specify the position and orientation of the tool relative to the arm."
              },
              {
                "name": "referencedTo",
                "type_name": "KinovaArm_ReferencePoint",
                "description": "Used to specify the reference point for the tool center coordinate calculation."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 156,
              "insert": 161,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7960f2a5-1f08-9d9e-f640-ac6e796a90e5",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Moves the joints of a robot arm to specified angles, using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "angles",
                "description": "A joint angle representation containing multiple angles for different joints of the robot arm to move to."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 172,
              "insert": 173,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "74e70278-a86d-1591-4648-0387e24923b8",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Retrieves the current pose of an object using the `kinova.get_pose()` method and stores it in a variable called `state`.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]