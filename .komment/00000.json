[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class called `JoystickAdapter` that acts as an interface between a joystick and a robot's control system. The class has several methods for processing data from the joystick, including `sendData`, which takes in a dictionary of joystick data and updates the robot's position and orientation based on the input values. The code also defines four different move modes (0-3) that the robot can be in, each with its own set of axes and buttons to process. Additionally, it includes a `robot2_target_pos` attribute to store the target positions for another robot.",
        "items": [
          {
            "id": "5ecff79a-4f6c-bbbb-c240-0aecd378c519",
            "ancestors": [],
            "description": "Acts as a bridge between a kinova arm and an external joystick, allowing the user to control the robot's movements and orientations through the joystick inputs. It translates the joystick data into movement commands for the kinova arm and also handles buttons presses for moving the robot to specific positions or orientations.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "instance",
                "description": "50 milliseconds by default, indicating how often the worker will check for new tasks to execute."
              },
              {
                "name": "rgb",
                "type_name": "8element",
                "description": "Used to store the red, green, and blue values of the color of the robot's body."
              },
              {
                "name": "startup_check",
                "type_name": "lambda",
                "description": "Used to check if the robot arm should move to a specific position or orientation during startup. The lambda function takes in the joint angles and returns True if the arm should move, False otherwise."
              },
              {
                "name": "physicsClient",
                "type_name": "instance",
                "description": "Used to get physics client for controlling the robot movement"
              },
              {
                "name": "plane",
                "type_name": "ndarray",
                "description": "4D, representing the position and orientation of the robot's end effector in a 4D space."
              },
              {
                "name": "table_id",
                "type_name": "int",
                "description": "Used to store a unique identifier for each table in the worker's workspace. It is used to differentiate between tables in the worker's attention."
              },
              {
                "name": "robot_urdf",
                "type_name": "str",
                "description": "A file path to a Robot URDF file which contains information about the robot's geometry, joints, and limits."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "list",
                "description": "Used to store the position of the robot at the time of launching the application, which is used for calculating the target position and orientation of the robot."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "list",
                "description": "Defined as a list of Euler angles, representing the orientation of the robot at the time of launch."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "int",
                "description": "Used to specify the index of the end effector link in the robot's kinematic chain."
              },
              {
                "name": "home_angles",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the angles of the robot's joints when it is at its home position."
              },
              {
                "name": "observation_angles",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the joint angles observed by the worker."
              },
              {
                "name": "observation_angles_2",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the angles of the robot's joints as observed by the worker."
              },
              {
                "name": "observation_angles_3",
                "type_name": "ndarray",
                "description": "3D, representing the joint angles of the robot in radians as observed by the Kinova arm."
              },
              {
                "name": "observation_angles_cube",
                "type_name": "ndarray",
                "description": "3-dimensional, representing the angles of the cube robot's joints as observations from a simulation or real-world data."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "Used to identify a specific robot in a fleet of robots, allowing for more efficient control \nof the robots' movements and actions."
              },
              {
                "name": "pybullet_cup",
                "type_name": "attribute",
                "description": "Used to specify the name of a pybullet environment that the worker uses for its simulations."
              },
              {
                "name": "square",
                "type_name": "instance",
                "description": "4 by default, which means that the worker can move to any position within a square shape with sides of length equal to the maximum distance it can move in each direction."
              },
              {
                "name": "hilo_lectura",
                "type_name": "instance",
                "description": "A function that sends data from a joystick to a HIL (Hardware-in-the-Loop) system."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "method",
                "description": "Responsible for reading data from a proxy server, which is used to control a robot's movements based on user input."
              },
              {
                "name": "target_angles",
                "type_name": "7element",
                "description": "Used to store the target angles for each joint of the robot, which are calculated based on the input joystick data."
              },
              {
                "name": "target_position",
                "type_name": "list",
                "description": "Used to store the target position of the robot's end effector for each axis (X, Y, Z, gripper). The values are stored as floats in a list format."
              },
              {
                "name": "target_orientation",
                "type_name": "3x3",
                "description": "Used to store the desired orientation of the robot's end effector as a quaternion. It is updated based on the user input and is used to compute the robot's new position and orientation using the kinematic chain."
              },
              {
                "name": "target_velocities",
                "type_name": "ndarray",
                "description": "7-dimensional, where each element represents the target velocity for one joint in radians per second. It is used to store the desired joint velocities for movement planning and control."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "int",
                "description": "0-based indexing of a joint in the robot's end effector, indicating which joint to control based on the joystick input."
              },
              {
                "name": "move_mode",
                "type_name": "int",
                "description": "0 by default, which controls the move mode (joint movement or end-effector movement) based on the input joystick data. It can take on values of 0, 1, 2, 3, or 4 to switch between different move modes."
              },
              {
                "name": "n_rotations",
                "type_name": "int",
                "description": "10 by default, indicating the number of rotational degrees to move the end effector for each joint."
              },
              {
                "name": "ext_joints",
                "type_name": "dict",
                "description": "Used to store the joint angles of a kinova arm for which the worker is responsible, as well as various gains and timestamps related to the joints."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "ROBOT_PROXY",
                "description": "Used to interact with the Kinova robot arm through a Python interface, allowing the worker to move the robot's joints and perform other actions."
              },
              {
                "name": "ext_gripper",
                "type_name": "instance",
                "description": "7-dimensional array that stores the gripper angles for the kinova arm, which are used to control the movement of the gripper."
              },
              {
                "name": "posesTimes",
                "type_name": "ndarray",
                "description": "Used to store the timestamp of each pose of the robot, used for calculating joint gains through the `updateGains()` method."
              },
              {
                "name": "poses",
                "type_name": "ndarray",
                "description": "3D array containing the joint angles and positions of the robot for a specific timestamp."
              },
              {
                "name": "timestamp",
                "type_name": "int",
                "description": "Used to store the current timestamp in milliseconds since the robot's startup."
              },
              {
                "name": "timer",
                "type_name": "int",
                "description": "0 by default, it counts the time spent in the move_mode method since it was last reset."
              },
              {
                "name": "compute",
                "type_name": "instance",
                "description": "Used to compute the robot's position, orientation, and joint angles based on the received data from the joystick adapter."
              },
              {
                "name": "timer2",
                "type_name": "float",
                "description": "Used to represent the time it takes for the worker to perform its task after the move mode has been selected."
              },
              {
                "name": "movePybulletWithExternalVel",
                "type_name": "method",
                "description": "Responsible for moving the robot arm based on external velocities provided by the user."
              },
              {
                "name": "joint_speeds",
                "type_name": "ndarray",
                "description": "Used to store the joint speeds for movement with angles."
              },
              {
                "name": "gains",
                "type_name": "7element",
                "description": "Used to store the gains for each joint in the kinova arm. The gains are calculated based on the error between the desired angle and the actual angle, and they are updated in real-time during the movement."
              },
              {
                "name": "speeds",
                "type_name": "ndarray",
                "description": "Used to store the joint speeds of the kinova robot in radians per second. It's updated by calling the `updateGains()` method based on the joystick data received."
              },
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "Used to store the joint angles of the robot in radians, which can be modified using the `moveKinovaWithAngles()` method."
              },
              {
                "name": "timer3",
                "type_name": "int",
                "description": "3 by default, indicating that the worker will run for 3 iterations or steps of its move mode loop."
              },
              {
                "name": "moveKinovaWithSpeeds",
                "type_name": "method",
                "description": "Responsible for moving the Kinova arm based on the joint speeds provided by the `updateGains` method. It takes in the `speeds` attribute, which contains the joint speeds, and moves the arm using the `kinovaarm_proxy` object."
              },
              {
                "name": "timer4",
                "type_name": "float",
                "description": "4 seconds by default, which is the time it takes for the worker to move the robotic arm to a specific position based on the input data from the joystick."
              },
              {
                "name": "movePybulletWithToolbox",
                "type_name": "instance",
                "description": "Used to move the pybullt arm with the tool box."
              },
              {
                "name": "colorKinova",
                "type_name": "attribute",
                "description": "Used to specify the color of the Kinova arm. It allows the user to customize the appearance of the robot."
              },
              {
                "name": "depthKinova",
                "type_name": "instance",
                "description": "Used to store information about a kinova arm's joint angles, velocities, and accelerations."
              },
              {
                "name": "calibrator",
                "type_name": "instance",
                "description": "Used to store the calibration data for the robotic arm, including the joint angles and speeds at \ndifferent points in time."
              },
              {
                "name": "timer5",
                "type_name": "float",
                "description": "Used to keep track of the time spent executing the `updateGains` method. It is used to update the gains of the robot's joints based on the error between the desired and actual angles."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "method",
                "description": "Responsible for reading the camera data from the Kinova robot's onboard camera, which is then used to determine the position and orientation of the robot."
              },
              {
                "name": "timer6",
                "type_name": "float",
                "description": "6 seconds, which is the time interval between updates of the robot's joint angles and positions in the simulation."
              },
              {
                "name": "correctCupPosition",
                "type_name": "numpyarray",
                "description": "Used to store the correct position of the cup during the robot's movement, which is calculated based on the angle of each joint."
              },
              {
                "name": "timer7",
                "type_name": "float",
                "description": "Used to keep track of the elapsed time since the start of the worker's move_mode period."
              },
              {
                "name": "showKinovaAngles",
                "type_name": "instance",
                "description": "Used to display the angles of the Kinova arm in degrees."
              },
              {
                "name": "gainsTimer",
                "type_name": "int",
                "description": "Used to keep track of the elapsed time since the last joint angle update, which is used to calculate the gains for each joint."
              },
              {
                "name": "updateGains",
                "type_name": "instance",
                "description": "Used to update the gains for each joint based on the error between the desired angle and the actual angle."
              },
              {
                "name": "aamed",
                "type_name": "instance",
                "description": "Used to store the absolute angle values of the joints of the robot in radians."
              },
              {
                "name": "flag",
                "type_name": "int",
                "description": "4-bit field that stores a boolean flag indicating whether the worker is in move mode or not. It can take on values of 0, 1, 2, or 3 to represent different modes of movement (e.g., move, home, etc.)."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 64,
              "insert": 65,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 787,
            "docLength": null
          },
          {
            "id": "ddafe0f7-6969-d59f-8b49-fde38ea1060f",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Initializes the SpecificWorker class by setting up timers, connecting signal handlers, and defining various variables needed for the robot's control and state estimation. It also sets the desired motion mode and home angles for the robot.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map the pybullet joints indices to the Kinova arm's joint names. It allows the worker to communicate with the kinova arm using the pybullet library, while still using the kinova arm's native joint names and angles."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "0 by default, which means that the worker will check for kinova specific code at startup. If set to 1, it skips the check and moves straight to the main loop."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 65,
              "insert": 66,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 155,
            "docLength": null
          },
          {
            "id": "87c0419b-83f8-abaa-f54f-bdbe6aec3154",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Sets the parameters of an object of the `SpecificWorker` class, returning `True`.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Passed to set parameters of the class."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "Returned when the parameters are successfully set."
            },
            "name": "setParams",
            "location": {
              "start": 260,
              "insert": 266,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "a48ac68d-2eda-3cb6-df42-b6d1ec073298",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Performs computations for the SpecificWorker, including correcting cup position and moving to observation angles using PyBullet. It also reads camera images and detects objects using YOLO.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 269,
              "insert": 272,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 186,
            "docLength": null
          },
          {
            "id": "1ec2fd65-b4d8-518b-9746-01526044e95a",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Tests various components and methods of the `ifaces` module, including `RoboCompKinovaArm`, `TGripper`, `TJoint`, `TJoints`, `RoboCompJoystickAdapter`, and `AxisParams`, `ButtonParams`, and `TData`.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 492,
              "insert": 493,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "db522f69-206d-1c99-b047-10fde0612c8b",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Calculates the error between the positions of a cup and a Kinect RGB camera, and adjusts the position of the cup to minimize the error.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "Ether a positive error value indicating a mismatch between the estimated and actual positions of the cup or -1 if no keypoints were detected."
            },
            "name": "correctCupPosition",
            "location": {
              "start": 509,
              "insert": 515,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "1dc01c86-5aa0-e9bf-be44-00a642795ba5",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Sets up the toolbox for a specific worker by initializing various objects, adding them to the environment, and defining the desired end-effector pose.",
            "params": [],
            "returns": null,
            "name": "initialize_toolbox",
            "location": {
              "start": 572,
              "insert": 574,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "80980cae-55ad-ddbd-bf45-e21c8a68f647",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Performs various computations related to the robot's end effector, including forward kinematics, Jacobian matrices, and joint velocity limiting. It also updates the robot's position and orientation based on the computed end effector pose.",
            "params": [],
            "returns": null,
            "name": "toolbox_compute",
            "location": {
              "start": 627,
              "insert": 629,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 57,
            "docLength": null
          },
          {
            "id": "a2f6a704-a6d2-77b5-b64f-d1ed4c7b4608",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Computes a fixed perspective projection matrix and a view matrix for a camera, given the intrinsic parameters of the camera and the position and rotation of the camera in the world. It then retrieves an image from the camera using the view matrix and returns the image.",
            "params": [],
            "returns": {
              "type_name": "2D",
              "description": "A grayscale image of the camera's field of view obtained by applying a fixed perspective projection to the raw camera data and then resizing it to the desired size."
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 764,
              "insert": 766,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 40,
            "docLength": null
          },
          {
            "id": "a0c01f54-53ef-10a0-7c43-210b5e22868e",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Retrieves depth and color images from Kinova cameras, normalizes them, and stores them in instance variables `depthKinova` and `colorKinova`.",
            "params": [],
            "returns": {
              "type_name": "Boolean",
              "description": "`True` if the operation was successful, otherwise it returns `False`."
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 827,
              "insert": 828,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "e3ed4f08-da95-c59f-2644-71e43be78b70",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Displays the angles of a Kinova robot's joints and compares them to the corresponding values from PyBullet.",
            "params": [],
            "returns": null,
            "name": "showKinovaAngles",
            "location": {
              "start": 852,
              "insert": 853,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "9663b434-c8e6-e382-a945-5c9acc298dd1",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Controls the velocity of the robot's joints using PyBullet, taking into account external velocities provided by an external joint controller.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 869,
              "insert": 870,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a46dca9b-fc37-2b8a-1c4b-cf8e6c3badc5",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Controls the velocity of a robot using PyBullet. It iterates over the robot's joints and sets their velocities to the target velocities provided in the function arguments.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 879,
              "insert": 881,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "a9da502d-f96b-7598-fc48-6ae5fb3c9939",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Reads joint state and gripper state from a proxy server, scales down gripper distance by 80%, and sleeps for 0.05 seconds before repeating the process.",
            "params": [],
            "returns": null,
            "name": "readDataFromProxy",
            "location": {
              "start": 886,
              "insert": 887,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "7c2a3811-575e-da85-8847-035838f6da38",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Sets joint angles for a Kinova arm based on supplied angles in degrees, then calls the `moveJointsWithAngle` method of the `kinovaarm_proxy` object to move the arm.",
            "params": [
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "360-degree radian angles to move the Kinova arm."
              }
            ],
            "returns": null,
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 895,
              "insert": 896,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "cf2535bd-f70c-d0a2-554e-4d66563e83b8",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Calculates and applies joint speeds for a Kinova arm based on angles and gains, and moves the joints with the calculated speeds using the `moveJointsWithSpeed` method of the `kinovaarm_proxy` object.",
            "params": [],
            "returns": null,
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 900,
              "insert": 902,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "de49621f-c4a9-31ba-d64a-313a71cd092f",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Updates the gains of the robot's joints based on the difference between the current pose and the desired position, and also updates the timestamp of the pose.",
            "params": [],
            "returns": null,
            "name": "updateGains",
            "location": {
              "start": 920,
              "insert": 921,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "24b78a8c-1ede-3abe-6448-2d568e2fa94e",
            "ancestors": [
              "5ecff79a-4f6c-bbbb-c240-0aecd378c519"
            ],
            "description": "Receives input data from a joystick and updates the position and orientation of a robot based on the received data. It handles different modes, axes, and buttons in the input data.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Passed to the function when sending data from a joystick. The dict contains axis and button values as keys and corresponding values, which are then processed by the function according to their names and modes."
              }
            ],
            "returns": null,
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 948,
              "insert": 949,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An interface `ifaces.RoboCompKinovaArm` that provides several methods for interacting with a Robocomp Kinova arm, including `startup`, `get_pose`, `get_gripper_state`, `move_joints_with_speed`, and `set_center_of_tool`. The code also implements these methods and provides additional functionality such as `buclePrueba` which demonstrates how to use the `get_pose` method to retrieve the current state of the arm and move it to a new position. Overall, the code provides a way for developers to interact with a Robocomp Kinova arm using Python.",
        "items": [
          {
            "id": "33f83743-73ae-b295-0445-708a86481b58",
            "ancestors": [],
            "description": "Manages a robotic arm's joints and gripper, providing methods for computing the arm's pose, getting the joints and gripper state, and moving the joints with speed or angle.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, indicating the interval between timer timeouts for computing joint positions."
              },
              {
                "name": "startup_check",
                "type_name": "unbound",
                "description": "Called when the worker is initialized. It performs some testing and checks to ensure that the robotic arm is working correctly."
              },
              {
                "name": "kinova",
                "type_name": "ifacesRoboCompKinovaArm",
                "description": "A reference to an instance of the KinovaGen3 class, which provides access to the RoboCompKinovaArm API."
              },
              {
                "name": "flag",
                "type_name": "bool",
                "description": "Used to indicate when the worker should perform its job."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a callable object at a specific interval, in this case, the function `compute`."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "A method that runs periodically to retrieve joint information from the Kinova arm."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "A list of objects representing the joint states of the Kinova arm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "A representation of the gripper state of the RoboCompKinovaArm."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 112,
            "docLength": null
          },
          {
            "id": "a54b7c1e-4f11-7bb1-8b42-eead5f562197",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Initializes an instance of the SpecificWorker class by setting up its properties and event handlers. It creates a KinovaGen3 object, sets a flag to False, and starts a timer to trigger computation every `Period` seconds.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map proxy objects to their corresponding worker objects."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to enable or disable a check when the SpecificWorker initializes."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "66eeb551-e7a1-2cbd-f545-ccdaf5390ef3",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets parameters for an instance of the `SpecificWorker` class, which inherits from `GenericWorker`. It returns `True` indicating successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "objectinstance",
                "description": "Passed to the method for modification or alteration."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "100% true."
            },
            "name": "setParams",
            "location": {
              "start": 59,
              "insert": 65,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f3cb01cb-8c05-e8a9-0a4d-ad750e3d481c",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and updates the positions, velocities, and forces of joints and gripper of a Robocomp Kinova arm based on sensor readings and returns True if successful.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTGripper",
              "description": "A struct consisting of distance and timestamp, and another value of type ifacesRoboCompKinovaArmTJoints which is also a struct consisting of joint angles, velocities, forces, and timestamp."
            },
            "name": "compute",
            "location": {
              "start": 68,
              "insert": 71,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "a05d1afd-2aa2-6a87-3e46-22fb2506f129",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Tests the RoboCompKinovaArm TPose and TGripper classes, and then calls QTimer.singleShot(200, QApplication.instance().quit) to quit the application after a delay of 200 milliseconds.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 98,
              "insert": 99,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "01df8849-6ec2-0789-564d-0e0e573b4987",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Closes the gripper of a robotic arm with the `kinova` module.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 113,
              "insert": 118,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "30554e28-9096-3f80-3346-24812daec6f0",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and returns the center of a tool referenced to a specific interface, using the `RoboCompKinovaArm` interface.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to specify the reference frame for the tool center point calculation."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A Pose object representing the center of the tool referenced to the arm."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "ee72a45f-0dc9-1f83-2c4b-1f36ab1420c1",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Opens the gripper of a Kinova arm, a robotic arm used for material handling and manipulation tasks, using the `kinova.open_gripper_speed()` method.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 139,
              "insert": 144,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "90e4fc0f-8760-5b9e-b846-4c49ef362865",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets the center of a tool referenced to a given pose within a specific worker class, inheriting from `GenericWorker`.",
            "params": [
              {
                "name": "pose",
                "type_name": "kinovageometryPose",
                "description": "Used to specify the position and orientation of the tool relative to the arm."
              },
              {
                "name": "referencedTo",
                "type_name": "KinovaArm_ReferencePoint",
                "description": "Used to specify the reference point for the tool center coordinate calculation."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 156,
              "insert": 161,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7960f2a5-1f08-9d9e-f640-ac6e796a90e5",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Moves the joints of a robot arm to specified angles, using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "angles",
                "description": "A joint angle representation containing multiple angles for different joints of the robot arm to move to."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 172,
              "insert": 173,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "74e70278-a86d-1591-4648-0387e24923b8",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Retrieves the current pose of an object using the `kinova.get_pose()` method and stores it in a variable called `state`.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]