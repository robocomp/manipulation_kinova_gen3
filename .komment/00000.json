[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a robot controller that receives data from a sensor and uses it to control the movement of a robot. The code uses the `robot2` library to interact with the robot and performs various actions based on the sensor data, including moving the robot's end effector to a specific position, changing the robot's orientation, and pressing buttons on the robot's arm.\n\nThe code summarizes as follows:\n\n* It defines a class `RobotController` that receives sensor data from a `data` dictionary and controls the movement of a robot using the `robot2` library.\n* It has four modes of operation: `mode_0`, `mode_1`, `mode_2`, and `mode_3`, each with a different set of actions based on the sensor data.\n* In `mode_0`, it receives data from the robot's sensors, including the end effector position, orientation, and buttons.\n* In `mode_1`, it moves the robot's end effector to a specific position based on the sensor data.\n* In `mode_2`, it changes the robot's orientation based on the sensor data.\n* In `mode_3`, it presses buttons on the robot's arm based on the sensor data.\n\nThe code uses the `robot2` library to interact with the robot and perform various actions, including moving the robot's end effector, changing its orientation, and pressing buttons on its arm.",
        "items": [
          {
            "id": "05ac5550-5077-5daf-a14c-1c2016e053e2",
            "ancestors": [],
            "description": "Manages a robot's movements and actions based on user input from a game controller. It receives data from the controller, updates the robot's position and orientation, and performs specific actions based on the user's inputs.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "float|int",
                "description": "4 by default, indicating that the worker performs actions every 4 seconds."
              },
              {
                "name": "rgb",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the red, green, and blue color values for the worker's visual representation in the simulation."
              },
              {
                "name": "timestamp",
                "type_name": "float|int",
                "description": "Representing the time in milliseconds since the epoch (January 1, 1970, 00:00:00 UTC) that the worker has been running."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Set to `True` if the worker has been started, and `False` otherwise. It is used to check whether the worker has been started before performing any actions."
              },
              {
                "name": "physicsClient",
                "type_name": "Tuple[float,float,float,float]",
                "description": "Used to store the position and orientation of the robot in a physics engine simulation."
              },
              {
                "name": "plane",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to represent the position and orientation of the worker's end effector relative to its base."
              },
              {
                "name": "table_id",
                "type_name": "int|str",
                "description": "Used to store the ID of a table that the worker can interact with, such as a user interface or a database."
              },
              {
                "name": "robot_urdf",
                "type_name": "Tuple[float,float,float]",
                "description": "Represented as a list of three elements that represent the x, y, and z positions of the robot's end effector. It is used to define the position of the robot's end effector in the world coordinate system."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "Tuple[float,float,float]",
                "description": "A list of initial position values for the robot's launch position on the X, Y, and Z axes."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "Tuple[float,float,float]",
                "description": "A reference to the robot's initial orientation."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "int|str",
                "description": "3 in the given code snippet, indicating that the end effector is linked to the third robot link."
              },
              {
                "name": "robot_id",
                "type_name": "int|str",
                "description": "Used to identify the specific worker among multiple workers of the same robot model."
              },
              {
                "name": "home_angles",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the home position of the robot's end effector in the X, Y, and Z axes, respectively."
              },
              {
                "name": "observation_angles",
                "type_name": "List[float]",
                "description": "Used to store the angles observed for each axis during a specific time step, with values ranging from -180 to 180."
              },
              {
                "name": "table_center",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the center coordinates of a table in front of the robot for pick and place operations."
              },
              {
                "name": "cylinderId",
                "type_name": "int|str",
                "description": "Used to store the identifier of the cylinder to be moved by the worker."
              },
              {
                "name": "threadKinovaAngles",
                "type_name": "Tuple[float]",
                "description": "Defined as a list of angles for each axis (X, Y, Z) and gripper, which are used to control the robot's movement."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "Callable[Tuple,Tuple]",
                "description": "Used to read data from a proxy server. It takes no arguments and returns a tuple containing the data read from the proxy server."
              },
              {
                "name": "colorKinova",
                "type_name": "str|int",
                "description": "Used to store the color of the Kinova robot, which can be any valid hex code or a number between 0 and 255."
              },
              {
                "name": "depthKinova",
                "type_name": "int|str",
                "description": "4D array representing the depth values for a Kinova robot arm, where each dimension represents a different axis (X, Y, Z, or gripper)."
              },
              {
                "name": "target_angles",
                "type_name": "List[float]",
                "description": "Used to store the target angles for each axis (X, Y, Z, and gripper) in degrees."
              },
              {
                "name": "target_position",
                "type_name": "List[float]",
                "description": "Used to store the target position of the robot's end effector in 3D space, which can be modified through the `X`, `Y`, and `Z` axes."
              },
              {
                "name": "target_orientation",
                "type_name": "List[float]",
                "description": "Used to store the target orientation of the robot's end effector in quaternion form. It represents the desired orientation of the end effector with respect to the base coordinate system, which can be updated based on user inputs or other factors."
              },
              {
                "name": "target_velocities",
                "type_name": "List[float]",
                "description": "Used to store the target velocities for each joint of the robot, which are calculated based on the user input."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "Tuple[float]",
                "description": "Used to store the selected joint position as reported by the joystick. It keeps track of the current position of the robot's end effector in real-time based on the user input from the joysticks."
              },
              {
                "name": "move_mode",
                "type_name": "int|str",
                "description": "Used to store the current mode of the robot (e.g., move, home, etc.) It can take on values such as 'move', 'home', or a number between 0 and 4 to represent different modes."
              },
              {
                "name": "ext_joints",
                "type_name": "Tuple[float]",
                "description": "A list of joint positions to move the robotic arm to in external mode."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "Tuple[int,str]",
                "description": "Used to store the current state of the kinova arm's joint positions and orientations."
              },
              {
                "name": "ext_gripper",
                "type_name": "str|float",
                "description": "Used to represent the external gripper position, which can be set using a linear or angular motion control command."
              },
              {
                "name": "timer",
                "type_name": "float|int",
                "description": "Used to keep track of time spent on a task, default value is 0."
              },
              {
                "name": "compute",
                "type_name": "float|int",
                "description": "Used to compute the target position, orientation, or gripper position based on the data from the robot's end effector, gripper, or other sensors. It takes into account the current pose of the robot and the desired position or orientation of the end effector, gripper, or other objects, and computes the necessary moves to reach the desired position or orientation."
              },
              {
                "name": "joint_speeds",
                "type_name": "List[float]",
                "description": "A list of joint speed values for each joint of the robot in the specific worker, which are used to control the movement of the robot."
              },
              {
                "name": "speeds",
                "type_name": "List[float]",
                "description": "Used to store the speed values for each axis of movement for the robot, which are set based on the input from the user."
              },
              {
                "name": "angles",
                "type_name": "Tuple[float,float,float]",
                "description": "Represented as a sequence of three floating-point numbers representing the angles for the X, Y, and Z axes of the robot's end effector."
              },
              {
                "name": "gains",
                "type_name": "float|int",
                "description": "Used to store the gains for each axis of the robot, which are used to calculate the target position of the end effector based on the desired position and orientation of the robot."
              },
              {
                "name": "posesTimes",
                "type_name": "Tuple[float,float,float]",
                "description": "3-element list containing the current position, orientation, and time of the robot's arm in a specific mode."
              },
              {
                "name": "poses",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the position and orientation of the robot in various configurations. It contains 6 elements representing the position \nand orientation of the robot along the X, Y, Z axes and gripper position."
              },
              {
                "name": "calibrator",
                "type_name": "Tuple[float,float,float]|List[float]",
                "description": "Used to store the calibration parameters for the robot's end effector. It contains the position and orientation of the end effector in Cartesian space with respect to the robot's base, which are obtained through calibration of the robot."
              },
              {
                "name": "cameraKinovaTimer",
                "type_name": "float|int",
                "description": "Used to control the timing of the robot's movements based on camera input."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to read the current position of the camera on a Kinova robot."
              },
              {
                "name": "showKinovaStateTimer",
                "type_name": "float|int",
                "description": "3, indicating that the worker will show the Kinova state timer every 3 seconds."
              },
              {
                "name": "showKinovaAngles",
                "type_name": "bool",
                "description": "Used to show the angles of the Kinova robot in degrees during debugging purposes."
              },
              {
                "name": "gainsTimer",
                "type_name": "float|int",
                "description": "Used to store a timer value for gaining or moving the robot's end effector in a specific mode."
              },
              {
                "name": "updateGains",
                "type_name": "float|int",
                "description": "Used to update the gains of the robot's joints based on the input from the user through the GUI."
              },
              {
                "name": "contactPointTimer",
                "type_name": "float|int",
                "description": "Used to control the speed of the worker's movements, it starts at 0 and increases by 0.1 every second until it reaches a maximum value, after which it resets to 0."
              },
              {
                "name": "detectContactPoints",
                "type_name": "float|List[float]",
                "description": "0 by default, which means it doesn't detect any contact points. It returns a list of floating-point numbers representing the positions of the robot's end effector in relation to the workpiece."
              },
              {
                "name": "aamed",
                "type_name": "str|List[str]",
                "description": "Used to store the name of the current action or command being executed by the worker, such as \"move_mode\" or \"home\"."
              },
              {
                "name": "pybullet_offset",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the offset values for the robot's end effector in the X, Y, and Z axes."
              },
              {
                "name": "left_force_series",
                "type_name": "List[float]",
                "description": "A list of force values that will be applied to the left end effector of the robot in a specific order."
              },
              {
                "name": "right_force_series",
                "type_name": "List[float]",
                "description": "A series of right forces applied to the robot's end effector at different points in time during a task."
              },
              {
                "name": "graphTimes",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the time taken for each graph creation attempt."
              },
              {
                "name": "fig",
                "type_name": "float|int",
                "description": "Used to store the current position of the robot's figure in a specific axis."
              },
              {
                "name": "ax1",
                "type_name": "float",
                "description": "Representing the x-axis position or orientation value for the robot."
              },
              {
                "name": "ax2",
                "type_name": "float",
                "description": "Representing the value for the second axis (Y-axis) of the robot's end effector position. It is used to move the end effector along the Y-axis by a specified amount in response to user input."
              },
              {
                "name": "line1",
                "type_name": "str|List[str]",
                "description": "50 characters long, containing a line of Python code that defines a specific worker's move mode based on the value of the `axis` attribute."
              },
              {
                "name": "line2",
                "type_name": "str|List[str]",
                "description": "Used to store a list of lines of instructions for a specific worker. Each line represents a single instruction, such as \"move_mode\" or \"home\"."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 68,
              "insert": 69,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 971,
            "docLength": null
          },
          {
            "id": "d1fc8826-27d2-cab5-f444-8ebc26fe3f28",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Initializes various parameters and timers for controlling the Kinova arm, camera, and gains, as well as plotting forces on a graph.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "Dict[str, int]",
                "description": "Used to map the kinova arm joints indices to the actual joints names used by the PyBullet environment. It allows to customize the mapping between the kinova arm joints and the pybullet joints."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the robot's kinematic data is available before starting the main loop. It is set to `True` by default, meaning that the main loop will only start once the kinematic data is available. If the kinematic data is not available, the program will wait for it to become available before proceeding."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initialize the SpecificWorker class\nspecific_worker = SpecificWorker(proxy_map)\n",
              "description": "\nIn this example, the user has created an instance of the `SpecificWorker` class and passed in the `proxy_map` as a parameter to the `__init__` function. The `__init__` function then calls the parent's `__init__` function to initialize the GenericWorker class.\n\nIt is important to note that this code does not include any specific examples on how to use the `SpecificWorker` class, but it demonstrates the basic idea of creating an instance of a class and passing in parameters to its constructor."
            },
            "name": "__init__",
            "location": {
              "start": 69,
              "insert": 70,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 158,
            "docLength": null
          },
          {
            "id": "9d092a83-9775-7d93-e34e-45cafaf99be5",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Sets parameters for the worker instance.",
            "params": [
              {
                "name": "params",
                "type_name": "Union[str, dict]",
                "description": "Used to set parameters for the function."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "True if the parameters are successfully set, and False otherwise."
            },
            "usage": {
              "language": "python",
              "code": "worker = SpecificWorker(proxy_map)\nparams = {\"Period\": 50, \"rgb\": [], \"timestamp\": int(time.time()*1000)}\nworker.setParams(params)\n",
              "description": ""
            },
            "name": "setParams",
            "location": {
              "start": 268,
              "insert": 274,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "999022f5-cfa1-b3ad-b84f-2aa15a48ddd0",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Computes the joint angles and velocities based on the current pose and target position, and moves the robot using PyBullet and Kinova's API.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Importing necessary libraries\nimport time\nfrom specific_worker import SpecificWorker\n\nif __name__ == '__main__':\n    # Creating an instance of the SpecificWorker class\n    worker = SpecificWorker(proxy_map={\"kinovaarm\": \"tcp://192.168.100.7:50001\"}, startup_check=True)\n\n    # Calling the compute function with some input arguments\n    worker.compute(\"some input\", 42, foo=\"bar\")\n\n    # Waiting for a few seconds before calling the compute function again\n    time.sleep(3)\n",
              "description": "\nIn this example, we first import the necessary libraries and then create an instance of the SpecificWorker class using the default constructor. We then call the compute function with some input arguments to demonstrate how it can be used. Finally, we wait for a few seconds before calling the compute function again to show how it can be called repeatedly in a loop.\nNote that this is just a simple example and that there are many other ways to use the compute function depending on the specific requirements of your application."
            },
            "name": "compute",
            "location": {
              "start": 277,
              "insert": 280,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 341,
            "docLength": null
          },
          {
            "id": "91ed72b3-9f2e-2c99-1843-ceeb4c6615fe",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Tests various components and interfaces of the RoboCompKinovaArm library, including TPose, TGripper, TJoint, TJoints, AxisParams, ButtonParams, and TData.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "from SpecificWorker import GenericWorker\n\n# Initialize the worker with a proxy map and enable startup check\nworker = SpecificWorker(proxy_map, startup_check=True)\n\n# Start the worker in its own thread\nworker.start()\n\n# Wait for the worker to finish\nworker.join()\n",
              "description": "\nIn this example, the user initializes an instance of the `SpecificWorker` class with a proxy map and enables the startup check option. The worker is then started in its own thread using the `start()` method and waits until it finishes using the `join()` method."
            },
            "name": "startup_check",
            "location": {
              "start": 653,
              "insert": 654,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "4edf90a1-260b-a68b-4441-aea1a245181e",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Modifies the joint angles of a robot to change its grip on an object, based on the provided distance value.",
            "params": [
              {
                "name": "distance",
                "type_name": "float",
                "description": "Used to set the angle of the gripper."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initiate SpecificWorker class object\nworker = SpecificWorker(proxy_map)\n\n# Use changePybulletGripper method to change gripper distance to 0.5\nworker.changePybulletGripper(0.5)\n\n# Use changePybulletGripper method again with a different value of distance (i.e., 1.0)\nworker.changePybulletGripper(1.0)\n",
              "description": ""
            },
            "name": "changePybulletGripper",
            "location": {
              "start": 670,
              "insert": 671,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "aafb9e42-cc78-909a-7640-2101ed895085",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Detects contact points on a robot's left and right fingertips using the getContactPoints method, and then extracts the force values associated with these contacts to plot them on a graph.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Create an instance of the SpecificWorker class\nworker = SpecificWorker(proxy_map=ProxyMap())\n\n# Set the period at which contact points are detected\nworker.Period = 50\n\n# Connect to the physics client and set up the simulation environment\nworker.physicsClient = p.connect(p.GUI)\np.setAdditionalSearchPath(pybullet_data.getDataPath())\np.configureDebugVisualizer(p.COV_ENABLE_GUI, 0)\np.setGravity(0, 0, -9.81)\np.setRealTimeSimulation(1)\nflags = p.URDF_USE_INERTIA_FROM_FILE\np.resetDebugVisualizerCamera(cameraDistance=1.5, cameraYaw=50, cameraPitch=-35, cameraTargetPosition=[0, 0, 0.5])\nworker.plane = p.loadURDF(\"./URDFs/plane/plane.urdf\")\nworker.table_id = p.loadURDF(\"./URDFs/table/table.urdf\", basePosition=[0, 0, 0], baseOrientation)\n\n# Detect contact points at a specified period\nworker.detectContactPoints()\n",
              "description": ""
            },
            "name": "detectContactPoints",
            "location": {
              "start": 683,
              "insert": 685,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "347941b3-36e3-73b4-1849-5b56c235020b",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Calculates the error between the predicted and actual positions of a target object based on keypoints detected using AAMED and adjusts the base position and orientation of a cylinder to minimize the error.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The difference between the estimated position of the target and the actual position of the target as determined by the AAMED algorithm."
            },
            "usage": {
              "language": "python",
              "code": "from specific_worker import SpecificWorker\n\n# Initialize worker instance\nworker = SpecificWorker()\n\n# Correct target position of a cylinder object in PyBullet simulation\nerror = worker.correctTargetPosition(cylinder_id)\n\nif error == -1:\n    print(\"No keypoints detected\")\nelse:\n    # Display the corrected position of the cylinder object\n    print(f\"Cylinder object's new position: {p.getBasePositionAndOrientation(cylinder_id)[0]}\")\n",
              "description": ""
            },
            "name": "correctTargetPosition",
            "location": {
              "start": 717,
              "insert": 718,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "2222ca08-15bb-2b96-2141-f6d2e2404395",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Initializes the toolbox, sets up kinematic constraints, and defines objects to be manipulated in the environment.",
            "params": [
              {
                "name": "target_position",
                "type_name": "Tuple[float, float, float]",
                "description": "Passed to create a transformation matrix for reaching a desired position of an end effector (gripper) in the robot's workspace."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "from SpecificWorker import SpecificWorker\n\n# Initialize the worker object\nworker = SpecificWorker(proxy_map={})\n\n# Set the target position for the robot to reach\ntarget_position = [0.4, 0.4, 0.5]\n\n# Call the initialize_toolbox method and pass in the target position as an argument\nworker.initialize_toolbox(target_position)\n",
              "description": "\nIn this example, the end-user creates a new object of the SpecificWorker class and calls the initialize_toolbox method on it. The target position is passed as an argument to the method, which initializes the toolbox for the specific task."
            },
            "name": "initialize_toolbox",
            "location": {
              "start": 751,
              "insert": 753,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "e1e6d8a1-9a94-e19d-f849-11bb9181f48b",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Computes the joint velocities and positions for the robot to approach a target position while avoiding joint limits. It uses the kinematic tree to compute the end-effector pose and updates the joint angles, ee axes, and target velocities accordingly.",
            "params": [
              {
                "name": "target_position",
                "type_name": "Tuple[float, float, float]",
                "description": "Used to compute the target joint angles for the robot to reach a specific position in the workspace."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "import pybullet as p\nimport numpy as np\nfrom specific_worker import SpecificWorker\n\n# Initialize the worker\nspecific_worker = SpecificWorker(proxy_map={})\n\n# Set the target position for the robot's end effector\ntarget_position = [0.5, 0.5, 1]\n\n# Call the toolbox compute method with the target position as an argument\nresult = specific_worker.toolbox_compute(target_position)\n\n# Print the result\nprint(result)\n",
              "description": ""
            },
            "name": "toolbox_compute",
            "location": {
              "start": 798,
              "insert": 800,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 56,
            "docLength": null
          },
          {
            "id": "7781ea31-719a-1d8c-bb4e-378859bcb759",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Reads camera data from a PyBullet robot simulation and processes it to generate an RGB image, which is displayed in real-time.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The camera image as a BGR color channel."
            },
            "usage": {
              "language": "python",
              "code": "import time\nfrom pybullet_utils import SpecificWorker\n\n# Connect to the bullet physics server\nworker = SpecificWorker(proxy_map=None)\n\n# Get a fixed camera image\nimage, timestamp = worker.read_camera_fixed()\n\n# Display the image in a window\ncv2.imshow(\"Fixed Camera\", image)\ncv2.waitKey(3)\n",
              "description": ""
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 933,
              "insert": 934,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 44,
            "docLength": null
          },
          {
            "id": "e4f40fdc-7032-ef88-6d4d-fd30b82047ee",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Retrieves depth and color images from the Kinova camera, normalizes the depth image, and appends it to a list along with the time stamp.",
            "params": [],
            "returns": {
              "type_name": "bool",
              "description": "True when the operation is successful, and False otherwise."
            },
            "usage": {
              "language": "python",
              "code": "import SpecificWorker\n\n# Instantiate a worker object and pass in proxy_map\nworker = SpecificWorker(proxy_map)\n\n# Call the readKinovaCamera method and append the resulting data to the rgb list\nworker.readKinovaCamera()\n\n# Print the length of the rgb list to show that data was appended\nprint(len(worker.rgb))\n",
              "description": ""
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 1004,
              "insert": 1005,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "fffb4203-1306-a098-bb4d-9b57750b553b",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Displays information about the robot's kinematics, including joint angles and differences between PyBullet and the robot's actual positions.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initialize the SpecificWorker object and load the PyBullet simulation environment\nworker = SpecificWorker(proxy_map)\nworker.load_simulation()\n\n# Print the current joint angles of the Kinova robot in the PyBullet simulation\nworker.showKinovaAngles()\n",
              "description": ""
            },
            "name": "showKinovaAngles",
            "location": {
              "start": 1020,
              "insert": 1021,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "8d620501-0d13-5aae-cc44-9e3189e1b3ea",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Updates the target velocities for joints based on an external velocity input, and then sets motor control targets using PyBullet's `setJointMotorControl2` function.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "from specific_worker import SpecificWorker\n\n# Initializing a new instance of the SpecificWorker class\nspecific_worker = SpecificWorker()\n\n# Setting up the external joints for the robot\nspecific_worker.ext_joints = [Joint1, Joint2]\n\n# Moving the robot with an external velocity\nspecific_worker.movePybulletWithExternalVel(robot_id=0)\n",
              "description": ""
            },
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 1031,
              "insert": 1032,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "510852ca-f4cf-51b3-fd46-7f0b86126673",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Controls the velocities of joints of a robot using PyBullet, setting motor velocity targets for each joint based on user-defined target velocities.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Import the SpecificWorker class from the module\nfrom specific_worker import SpecificWorker\n\n# Instantiate a new object of the SpecificWorker class\nspecific_worker = SpecificWorker()\n\n# Call the movePybulletWithToolbox method with the target velocities list as an argument\nspecific_worker.movePybulletWithToolbox(target_velocities=[1, 2, 3])\n",
              "description": "\nIn this example, we first import the SpecificWorker class from the specific_worker module. We then create a new object of the SpecificWorker class and call its movePybulletWithToolbox method with a target velocities list as an argument. The target velocities list is a sequence of values that represents the desired velocity for each joint in the robot."
            },
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 1041,
              "insert": 1043,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "d8dfcc69-0a72-bf99-d341-3ccb11b05050",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Retrieves joint and gripper state data from a Kinova arm proxy using the `kinovaarm_proxy.getJointsState()` and `kinovaarm_proxy.getGripperState()` methods, respectively. It then scales down the gripper distance by a factor of 0.8 before sleeping for 0.05 seconds to repeat the process.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initiate proxy_map with the relevant information for connecting to a Kinova Arm\nproxy_map = {}\nspecific_worker = SpecificWorker(proxy_map, startup_check=False)\nspecific_worker.readDataFromProxy()\n",
              "description": ""
            },
            "name": "readDataFromProxy",
            "location": {
              "start": 1048,
              "insert": 1049,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "1a374816-2660-66a5-f846-509b1a189c46",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Converts angles (degrees) to radians and then rounds them to the nearest degree, storing the result in a list called `jointAngles`. The method then calls the moveJointsWithAngle method on the kinova arm proxy with the rounded angles.",
            "params": [
              {
                "name": "angles",
                "type_name": "np.angle2rad | np.number",
                "description": "An input angle array in radians for the robot's joint angles."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Create an instance of the SpecificWorker class\nspecific_worker = SpecificWorker(proxy_map)\n\n# Move the Kinova arm to a specific joint angle configuration\nangles = [0, 1.57, -2.35, 0.6, 1.3, -0.8]\nspecific_worker.moveKinovaWithAngles(angles)\n",
              "description": "\nIn this example, the `SpecificWorker` class instance is created and then a list of joint angles is defined and passed to the `moveKinovaWithAngles` method. The method uses this list to set the desired joint angle configuration for the Kinova arm."
            },
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 1057,
              "insert": 1058,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "c7948a8c-8acf-e693-ab40-24b13f08c965",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Calculates joint speeds based on angle errors and applies them to the Kinova arm through the moveJointsWithSpeed method.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initialize an instance of SpecificWorker\nworker = SpecificWorker(proxy_map)\n\n# Move the Kinova robot with speeds for each joint in a specific order\njoint_speeds = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\nworker.moveKinovaWithSpeeds(joint_speeds)\n",
              "description": ""
            },
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 1062,
              "insert": 1064,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "2dad3bbf-6d21-53b0-0b47-343419424fc5",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Updates the gains for each joint based on the difference between the current pose and the desired pose, and the timestamp of the current pose.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initialize the worker with the necessary proxies and check for startup issues\nworker = SpecificWorker(proxy_map, startup_check=True)\n\n# Use the updateGains method to calculate the gains for each joint\nworker.updateGains()\n\n# Get the updated gains for each joint\ngains = worker.gains\n",
              "description": ""
            },
            "name": "updateGains",
            "location": {
              "start": 1082,
              "insert": 1083,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "84b5588e-84b5-5e90-004d-e2df011b6c5b",
            "ancestors": [
              "05ac5550-5077-5daf-a14c-1c2016e053e2"
            ],
            "description": "Receives data from a joystick and updates the robot's position, orientation, and move mode based on the input axes and buttons.",
            "params": [
              {
                "name": "data",
                "type_name": "Tuple[Axis, Button]",
                "description": "Responsible for providing data from the joystick or other input devices."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Import the necessary libraries\nimport pybullet as p\nfrom generic_worker import SpecificWorker\n\n# Initialize a new instance of the SpecificWorker class\nspecific_worker = SpecificWorker()\n\n# Set up the environment and robot\nspecific_worker.setup(p)\n\n# Set the move mode to mode 4 (robot2)\nspecific_worker.move_mode = 4\n\n# Get the current state of the robot's position and orientation\nspecific_worker.get_state()\n\n# Send a command to move the robot in a specific direction using the joystick\nspecific_worker.joystick_adapter_send_data(1, 0, -1)\n\n# Get the new state of the robot's position and orientation\nspecific_worker.get_state()\n",
              "description": ""
            },
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 1110,
              "insert": 1111,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class `RoboCompKinovaArm` that implements various interfaces from the `ifaces` module, which provides a set of abstractions for interacting with the RoboComp Kinova arm. The code provides implementations for methods such as `get_pose`, `move_joints_with_speeds`, `get_gripper_state`, and more. Additionally, it defines several methods for working with joint angles, cartesian moves, and gripper states. Overall, the code appears to provide a way to interact with the RoboComp Kinova arm using Python, including movements and manipulation of objects.",
        "items": [
          {
            "id": "b675b733-f301-1c9b-5843-306040339c2e",
            "ancestors": [],
            "description": "Manages a RoboCompKinovaArm, providing methods for getting and setting joints' state, gripper state, and pose. It also includes a startup check and a method to move joints with speed or angle.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, representing the period of time (in milliseconds) between successive invocations of the `compute()` method."
              },
              {
                "name": "startup_check",
                "type_name": "Python",
                "description": "Used for testing the RoboCompKinovaArm functionality."
              },
              {
                "name": "kinova",
                "type_name": "KinovaGen3",
                "description": "Used to interact with the RoboCompKinovaArm device."
              },
              {
                "name": "flag",
                "type_name": "bool",
                "description": "Used to indicate whether the worker has performed its computation or not, allowing the `compute()` method to be called only once."
              },
              {
                "name": "timer",
                "type_name": "QtCoreQTimer",
                "description": "Used to schedule a callable object (i.e., a slot) to be executed after a specified interval, typically for processing sensor data or other tasks that require periodic updates."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "Used to execute a function when a specific event occurs, such as a timeout. The function executed by the `compute` attribute is responsible for retrieving data from the Kinova arm and updating the worker's internal state."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "A list of objects representing the joint states of the RoboCompKinovaArm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "Used to store the current state of the gripper, such as its position and speed."
              },
              {
                "name": "speeds",
                "type_name": "ifacesRoboCompKinovaArmTJointSpeeds",
                "description": "Used to store the joint speed values for moving the robotic arm with speed."
              },
              {
                "name": "moveWithSpeed",
                "type_name": "bool",
                "description": "Used to control the movement of joints with speed. When set to True, it enables the movement of joints with a predefined speed, otherwise it disables it."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 120,
            "docLength": null
          },
          {
            "id": "86b3b1cc-8637-aeaf-4049-5d25c62b5dbf",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets up an instance of `SpecificWorker`, inheriting from `GenericWorker`. It initializes member variables, including a period for computing and a list of joints and gripper speeds.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to pass a mapping of kinova interface names to their corresponding implementations."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the kinova arm is already started or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "226c1de8-c82c-87b6-a344-6cd3bcfd570a",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets parameters for an instance of `SpecificWorker` subclassing `GenericWorker`. It returns `True` indicating successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "objectinstance",
                "description": "Used to set parameters for an instance of a class."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "The default value returned by the method when no exception occurs."
            },
            "name": "setParams",
            "location": {
              "start": 62,
              "insert": 68,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "cdca8acc-4fe5-7fbb-3d4d-6bc0814c1e40",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Computes the joint positions, velocities, and forces for the RoboComp kinova arm based on input from sensors and other sources. It also retrieves gripper state information and moves the joints with specified speeds if necessary.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTJoints",
              "description": "An instance of a class that represents the joints information of the kinova arm, including the angles, velocities, and forces of each joint."
            },
            "name": "compute",
            "location": {
              "start": 71,
              "insert": 74,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 31,
            "docLength": null
          },
          {
            "id": "9bd43b40-09eb-e69f-4244-dbe7a95136c2",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Tests RoboCompKinovaArm.TPose and RoboCompKinovaArm.TGripper classes from the ifaces module and then quits the application after a 200 milliseconds delay.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 107,
              "insert": 108,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "fdbb5cba-000c-5e9b-0e4c-0f62d099589e",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Moves the gripper of a robotic arm to a specified position, using the `kinova.gripper_move_to()` method.",
            "params": [
              {
                "name": "position",
                "type_name": "float",
                "description": "Used to specify the desired position of the gripper in terms of the range of motion of the robotic arm."
              }
            ],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 122,
              "insert": 124,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "09f1f0d0-1af7-29b5-4341-a8f4c47f23f0",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Retrieves the center of a tool referenced by `referencedTo`.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to return the center of the tool referenced to a specific position or orientation."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A pose representation of the tool center position relative to the arm's end effector."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 130,
              "insert": 131,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "fd16147b-f769-00bf-af4c-ecb7d798258f",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Opens the gripper of a robotic arm controlled by the `kinova` library.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 144,
              "insert": 149,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ec48246b-c60b-cab8-4f4e-90214ec441f7",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets the center of a tool referenced to a given pose within a Kinova Arm.",
            "params": [
              {
                "name": "pose",
                "type_name": "opencvcoreMat",
                "description": "Used to represent the tool's pose relative to the end effector."
              },
              {
                "name": "referencedTo",
                "type_name": "kinova_msgsmsgReferenceFrame",
                "description": "Used to specify the reference frame for the tool center point."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 161,
              "insert": 166,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "2333643c-5b6e-cf91-2c4b-56472039d929",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets the speeds of joint movements for an arm using a timer to determine the move order and speed.",
            "params": [
              {
                "name": "speeds",
                "type_name": "numpyarray",
                "description": "3D array of float values representing the desired joint speeds for the Kinova arm to move with."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithSpeed",
            "location": {
              "start": 171,
              "insert": 172,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "6e03a331-3fd0-db8c-f645-a3c68f7bd161",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Moves the joints of a Kinova arm to specific angles, using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "Angle",
                "description": "Passed as an instance of the Angle class, containing the desired joint angles in degrees for the Kinova arm to move."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "26ba57a0-c0bc-0aac-bd4b-5357c505612e",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Retrieves the current pose of an object using the `kinova` module and stores it in a variable called `state`.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 188,
              "insert": 189,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "kinovaarmI.py",
    "path": "components/kinova_controller/src/kinovaarmI.py",
    "content": {
      "structured": {
        "description": "A class `KinovaArmI` that inherits from the `KinovaArm` class and provides additional functionality for controlling a Kinova Arm robotic arm. The code imports various packages including `sys`, `os`, and `Ice`, which is likely used for interacting with the RoboComp framework. The class defines several methods for controlling the arm's joints, gripper, and center of tool, as well as setting the arm's position and orientation. Overall, the code provides a way to programmatically control a Kinova Arm robotic arm using the RoboComp framework.",
        "items": [
          {
            "id": "dfb38b51-dfce-a2b9-9945-674cea2f58ed",
            "ancestors": [],
            "description": "Provides methods for controlling a Kinova arm, including closing and opening the gripper, getting the center of tool, gripper state, joints state, and moving the joints with angle or speed.",
            "attributes": [
              {
                "name": "worker",
                "type_name": "KinovaArm",
                "description": "Used to interact with the Arm's API for joints movement, gripper opening and closing, and tool positioning."
              }
            ],
            "name": "KinovaArmI",
            "location": {
              "start": 36,
              "insert": 37,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "test.py",
    "path": "components/kinova_controller/src/test.py",
    "content": {
      "structured": {
        "description": "Two functions: `close_gripper_speed()` and `open_gripper_speed()`. These functions use the `base` object to control a robotic gripper's movement using speed commands. The `close_gripper_speed()` function sets the gripper's speed to close it, while the `open_gripper_speed()` function sets the gripper's speed to open it. Both functions use the `GetMeasuredGripperMovement()` method to check the gripper's current position and speed, and adjust the speed command accordingly.",
        "items": [
          {
            "id": "b1c40329-5339-d8af-c640-a982dab945c3",
            "ancestors": [],
            "description": "Provides methods for getting camera information, intrinsic and extrinsic parameters, and movement actions using the Kinova Gen III SDK. It also includes functions for closing the gripper with a speed command and opening it with a speed command.",
            "attributes": [
              {
                "name": "connection",
                "type_name": "object",
                "description": "Used to establish a connection with the Kinova Gen 3 robot controller. It represents the result of calling the `connect()` method, which returns a connection object that can be used to send commands to the robot and receive data from it."
              },
              {
                "name": "router",
                "type_name": "RoombaRouter",
                "description": "Used to interact with the Robot's ROS2 node, sending and receiving messages."
              },
              {
                "name": "base",
                "type_name": "instance",
                "description": "A reference to an object of the `KinovaBase` class, which provides access to the robot's base functionality such as movement, gripper control, and sensor readings."
              },
              {
                "name": "base_cyclic",
                "type_name": "Base_pb2Base",
                "description": "Used to interact with the Cyclic robotic arm. It provides methods for moving the arm, closing the gripper, and opening the gripper."
              }
            ],
            "name": "KinovaGen3",
            "location": {
              "start": 51,
              "insert": 52,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 342,
            "docLength": null
          },
          {
            "id": "b99b8053-62c2-298b-7d49-87f8a03b69bb",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Establishes connections to an IP address, username, and password using the `utilities.DeviceConnection` class, then creates instances of `BaseClient` and `BaseCyclicClient` using the connected router.",
            "params": [],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 52,
              "insert": 54,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "26e6d7dd-e7b3-9a8a-0645-c46a66e7b070",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3",
              "82de0138-290b-de95-5c45-8c70ba2d91c5"
            ],
            "description": "Takes a `notification` object and an optional `e` parameter, and prints the action event name of the notification. If the action event is either `ACTION_END` or `ACTION_ABORT`, the `e` variable is set to a default value.",
            "params": [
              {
                "name": "notification",
                "type_name": "Base_pb2Notification",
                "description": "Passed an event object containing information about the event that triggered the function, such as the action event name."
              },
              {
                "name": "e",
                "type_name": "Base_pb2Event",
                "description": "Set to an instance of that class by the line `e.set()`."
              }
            ],
            "returns": null,
            "name": "check",
            "location": {
              "start": 77,
              "insert": 78,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "92b95edf-da79-f9b9-3742-31209be9799c",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Within the KinovaGen3 class retrieves refresh feedback from the base cyclic object and returns it.",
            "params": [],
            "returns": {
              "type_name": "RefreshFeedback",
              "description": "An instance of a class that contains information about the state of the system."
            },
            "name": "get_state",
            "location": {
              "start": 86,
              "insert": 87,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "6975f821-eec4-e483-0449-af8605c31e80",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Returns a dictionary containing the position, velocity, and torque of the joints of an object controlled by a Kinova Gen 3 robot.",
            "params": [],
            "returns": {
              "type_name": "dict",
              "description": "A dictionary containing the positions, velocities, and torques of the joints."
            },
            "name": "get_joints",
            "location": {
              "start": 93,
              "insert": 94,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "2aebd117-7ade-259c-5c4a-8400fa9ee964",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves the current state of a gripper, specifically the position of the gripper's finger, as measured by the `Base` class's `GetMeasuredGripperMovement` method.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The measured movement of the gripper in the `finger[0]` position."
            },
            "name": "get_gripper_state",
            "location": {
              "start": 101,
              "insert": 102,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "e7cae492-c359-dd82-544a-e452cbae52fc",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves the current position and orientation of a tool in a robotic system, returning a list of 6 values representing the tool's x, y, z coordinates and theta angles in each dimension.",
            "params": [],
            "returns": {
              "type_name": "5element",
              "description": "A list of five floating-point numbers that represent the tool's pose (position and orientation) in the global coordinate system."
            },
            "name": "get_pose",
            "location": {
              "start": 106,
              "insert": 107,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "69d6404d-a82b-f081-c543-475ecc57a69d",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the movement of a gripper based on a target position, sending a command to the base to move the gripper to that position.",
            "params": [
              {
                "name": "target_position",
                "type_name": "float",
                "description": "Representing the desired position of the gripper to move to."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True if the gripper moves to the target position successfully, otherwise False."
            },
            "name": "gripper_move_to",
            "location": {
              "start": 124,
              "insert": 125,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "ab204fbc-6297-1fb4-7b4c-04922f54df11",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Performs Cartesian specific movement of a robot, which involves moving the robot's end effector to a specified position and orientation using an action message.",
            "params": [
              {
                "name": "x",
                "type_name": "float64",
                "description": "Used to set the x-coordinate of the target position for the Cartesian movement."
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "Used to specify the y coordinate of the target position for the cartesian movement."
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "Used to set the z-coordinate of the target pose in the Cartesian coordinate system."
              },
              {
                "name": "theta_x",
                "type_name": "float",
                "description": "Representing the x-angle of the robot's end effector at the specified position."
              },
              {
                "name": "theta_y",
                "type_name": "float",
                "description": "Representing the yaw angle of the robot, which determines the orientation of the robot's yaw axis relative to its base."
              },
              {
                "name": "theta_z",
                "type_name": "float",
                "description": "Used to specify the z-rotation angle of the robot's end effector during movement."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "1 if the movement was successful and 0 if it timed out."
            },
            "name": "cartesian_move_to",
            "location": {
              "start": 144,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 26,
            "docLength": null
          },
          {
            "id": "9f93db2e-47e3-ab89-004d-09915170dd5c",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Within the KinovaGen3 class takes a list of joint speeds as input and creates a `JointSpeeds` message to send to the robot's base module. It then iterates through the list of speeds, adding each one to the message with the appropriate joint identifier and duration. Finally, it sends the completed message to the base module using the `SendJointSpeedsCommand` method.",
            "params": [
              {
                "name": "speeds",
                "type_name": "Base_pb2JointSpeeds",
                "description": "An iterable containing joint speed values for each joint in a robot."
              }
            ],
            "returns": null,
            "name": "move_joints_with_speeds",
            "location": {
              "start": 178,
              "insert": 182,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "e9254dd7-d93c-be83-2c4a-e86155d56c38",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls movement of joints in an angular action by creating an action object, adding joint angles to it, and executing the action using the `ExecuteAction` method. It also waits for the movement to finish and unsubscribes from the notification handle.",
            "params": [
              {
                "name": "joints",
                "type_name": "list",
                "description": "Used to specify the joint angles for movement."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "1 if the angular movement completed within the specified timeout duration, or 0 if the movement did not complete before the timeout."
            },
            "name": "move_joints_to",
            "location": {
              "start": 196,
              "insert": 197,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 30,
            "docLength": null
          },
          {
            "id": "697a1bc0-f352-e0b5-234e-6b7c831a750e",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Prints the extrinsic parameters (rotation and translation) of an object represented by the `KinovaGen3` class.",
            "params": [
              {
                "name": "extrinsics",
                "type_name": "3x3",
                "description": "Used to represent a rotation matrix followed by a translation vector."
              }
            ],
            "returns": null,
            "name": "print_extrinsic_parameters",
            "location": {
              "start": 231,
              "insert": 232,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "ed500cd4-b2d6-8db3-434f-46ae62c6bbe5",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves the device ID of the vision module in a Kinova Gen3 system. It first reads all devices information, then checks if there is only one vision device, and finally returns its device ID.",
            "params": [
              {
                "name": "device_manager",
                "type_name": "DeviceManager",
                "description": "Used to retrieve information about all devices connected to the system."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "The device identifier of the first vision device found in the devices list or an error message if there are no vision devices registered or more than one vision device is registered."
            },
            "name": "example_vision_get_device_id",
            "location": {
              "start": 245,
              "insert": 246,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "c4d48fde-88cf-44b9-9449-9330762a7878",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves extrinsic parameters for a given vision device ID using the `VisionConfigService`. It then prints the retrieved extrinsics to the console.",
            "params": [
              {
                "name": "vision_config",
                "type_name": "VisionConfig",
                "description": "Used to retrieve extrinsic parameters for a specific vision device ID."
              },
              {
                "name": "vision_device_id",
                "type_name": "int",
                "description": "Used to identify a specific vision device for which extrinsic parameters are being retrieved."
              }
            ],
            "returns": null,
            "name": "example_routed_vision_get_extrinsics",
            "location": {
              "start": 266,
              "insert": 267,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "304fb343-4b3e-2c84-a649-4b0c3869c741",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Within the KinovaGen3 class prints out various parameters associated with intrinsics.",
            "params": [
              {
                "name": "intrinsics",
                "type_name": "IntrinsicParameters",
                "description": "Represented as a object that contains the intrinsic parameters of the camera sensor, including the principal point, resolution, focal length, and distortion coefficients."
              }
            ],
            "returns": null,
            "name": "print_intrinsic_parameters",
            "location": {
              "start": 288,
              "insert": 289,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "647cb6c5-05c7-2e9c-0648-ed5b389e5e00",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves intrinsic parameters of Color and Depth sensors using the Vision Config Service, and also retrieves intrinsic parameters for specific resolutions of Color and Depth sensors.",
            "params": [
              {
                "name": "vision_config",
                "type_name": "VisionConfig_pb2VisionConfig",
                "description": "Used to retrieve intrinsic parameters from the vision config service."
              },
              {
                "name": "vision_device_id",
                "type_name": "int",
                "description": "Used to specify the device ID for which intrinsic parameters are being retrieved."
              }
            ],
            "returns": null,
            "name": "example_routed_vision_get_intrinsics",
            "location": {
              "start": 305,
              "insert": 306,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "dd5b386e-4d39-1e81-5d41-748edae0f6bc",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves device information and extrinsic and intrinsic parameters for a vision device in Kinova Gen3.",
            "params": [],
            "returns": null,
            "name": "get_camera_info",
            "location": {
              "start": 333,
              "insert": 334,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "10acdf05-4fc0-7781-084c-b77b797c0c61",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Performs Cartesian movement based on user-inputted coordinates and angles, using the Kinova Gen3 robot's base API.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "The relative movement of the tool along the x-axis."
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "Represented as feedback.base.tool_pose_y + y, which indicates an additional movement along the Y axis of the tool's pose."
              },
              {
                "name": "z",
                "type_name": "32bit",
                "description": "Representing the relative movement of the tool's Z axis."
              },
              {
                "name": "theta_x",
                "type_name": "float",
                "description": "Part of the target pose's orientation, representing the yaw angle of the tool in the x-y plane."
              },
              {
                "name": "theta_y",
                "type_name": "float",
                "description": "Represented as the yaw angle of the tool relative to its parent link, indicating the direction of movement along the y-axis."
              },
              {
                "name": "theta_z",
                "type_name": "float",
                "description": "Representing the z-axis angle of the tool's orientation relative to its starting position, which is used in calculating the target pose of the tool for the Cartesian action movement."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "1 if the cartesian movement finishes within the given timeout duration, and 0 otherwise."
            },
            "name": "cartesian_move_relative",
            "location": {
              "start": 343,
              "insert": 345,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "dfb5a07b-6879-d3a4-db45-cb4fe6eba1f9",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the movement of a gripper based on its destination position, moving it at a speed determined by the difference between its current position and the destined position.",
            "params": [
              {
                "name": "dest_pos",
                "type_name": "float",
                "description": "Representing the desired position for the gripper to move towards."
              }
            ],
            "returns": null,
            "name": "move_gripper_speed_dest",
            "location": {
              "start": 379,
              "insert": 381,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 30,
            "docLength": null
          },
          {
            "id": "3c0c15b6-f8ae-f782-704f-d4618b57738e",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the speed of a gripper using a speed command. It sets the value of the gripper to -0.1 and sends the command to the base using the `SendGripperCommand` method. The function then sleeps for 0.1 seconds before continuing to monitor the gripper's movement using the `GetMeasuredGripperMovement` method.",
            "params": [],
            "returns": null,
            "name": "close_gripper_speed",
            "location": {
              "start": 414,
              "insert": 416,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "98568a1b-dae3-59a5-ad4a-d646713fe7d9",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the speed and position of a gripper using a Basebot2 interface. It creates a gripper command message, sends it to the Basebot2, and retrieves the measured movement response from the Basebot2.",
            "params": [],
            "returns": null,
            "name": "open_gripper_speed",
            "location": {
              "start": 439,
              "insert": 441,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          }
        ]
      }
    }
  }
]