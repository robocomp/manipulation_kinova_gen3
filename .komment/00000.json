[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A robot arm's movements based on user inputs from a serial port. It uses the `robot2` library to interact with the robot arm and perform various actions such as moving the arm to a specific position or orientation, and controlling the gripper. The code also includes logic for handling different input modes, such as moving the arm to a home position or performing repetitive movements. Overall, the code is designed to automate the movement of a robot arm based on user inputs from a serial port.",
        "items": [
          {
            "id": "b3950ca6-24d1-5893-2349-d871399984d9",
            "ancestors": [],
            "description": "Manages the movement of a robotic arm based on the received data from a sensor and controls the arm's position, orientation, and gripper mode using Python's `robot` module. It also keeps track of the move mode and home positions.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "float|int",
                "description": "4 seconds by default, indicating how often the worker will check for new commands from the robot."
              },
              {
                "name": "rgb",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to represent the current orientation of the robot's end effector in terms of its position on the XY plane."
              },
              {
                "name": "timestamp",
                "type_name": "float|int",
                "description": "Used to store the current time at which the worker is running, allowing for efficient execution of tasks based on time intervals."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to track whether the worker has been started or not. It's initial value is `False`, and it's updated to `True` after the worker has been started, and back to `False` when the worker is stopped or reset."
              },
              {
                "name": "physicsClient",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the position and orientation of a robot's end effector in 3D space."
              },
              {
                "name": "plane",
                "type_name": "Tuple|List[float]",
                "description": "Used to store the target position of the robot's end effector in 3D space, which can be moved along the X, Y, or Z axes using the `move_mode` attribute."
              },
              {
                "name": "table_id",
                "type_name": "int|str",
                "description": "Used to identify a specific worker's position in a table of workers, allowing for efficient handling of multiple workers with different positions."
              },
              {
                "name": "robot_urdf",
                "type_name": "Tuple[float,float,float]",
                "description": "A reference to the robot's URDF (Unified Robot Description Format) definition. It contains the position and orientation of the robot in 3D space."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "Tuple[float,float,float]",
                "description": "Defined as the position of the robot's launch point."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the orientation of the robot's end effector relative to its base."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "int|str",
                "description": "0-based index of the end effector link in the robot's kinematic chain, which represents the position of the gripper or other tool in the robot's workspace."
              },
              {
                "name": "robot_id",
                "type_name": "int|str",
                "description": "4 digits long, representing the unique identifier of the robot in a specific worker's profile."
              },
              {
                "name": "home_angles",
                "type_name": "Tuple[float,float,float]",
                "description": "Defined as a set of angles for each axis (X, Y, Z) to home, which are default angles that the robot will move to when the \"home\" button is pressed."
              },
              {
                "name": "observation_angles",
                "type_name": "Tuple[float,float,float]",
                "description": "3 angles representing the orientation of the robot's end effector relative to its base, used for calculating the target position and orientation of the end effector based on user inputs."
              },
              {
                "name": "table_center",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the center coordinates of a table that the worker moves around."
              },
              {
                "name": "cylinderId",
                "type_name": "int|str",
                "description": "Used to identify a specific cylinder for picking and placing objects."
              },
              {
                "name": "threadKinovaAngles",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to store the current angles of the robot's kinematic chain in degrees."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "Tuple[int,List[str]]",
                "description": "Used to read data from a proxy server. It takes two arguments: the first is the protocol version, which can be either 1, 2, or 3, and the second is a list of strings representing the data from the proxy server. The attribute then parses the data based on the protocol version and returns the parsed data as a tuple of integers and a list of strigns."
              },
              {
                "name": "colorKinova",
                "type_name": "str|int",
                "description": "Set to a color value representing the robot's color, specifically \"red\", \"blue\", or \"green\"."
              },
              {
                "name": "depthKinova",
                "type_name": "int|str",
                "description": "4D depth values from Kinova robot's end effector to the workspace origin in meter units."
              },
              {
                "name": "target_angles",
                "type_name": "Tuple[float]",
                "description": "Used to store the target angles for each axis of movement (X, Y, Z) and gripper, which are obtained from the robot's end effector position data."
              },
              {
                "name": "target_position",
                "type_name": "List[float]",
                "description": "Used to store the target positions of the robot's end effector for the X, Y, and Z axes, as well as the gripper position."
              },
              {
                "name": "target_orientation",
                "type_name": "List[float]",
                "description": "Used to store the target orientation of the robot's end effector, which is represented as a quaternion in the code. The quaternion represents the orientation of the end effector relative to the world coordinate system."
              },
              {
                "name": "target_velocities",
                "type_name": "Tuple[float]",
                "description": "Defined as a list of target velocities for each axis (X, Y, Z) and the gripper. The values in the list represent the desired velocity of the robot at each position and orientation."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "Tuple[float]",
                "description": "0-based indexing for the selected joint (axis) from the Joy device, where each element corresponds to a different axis."
              },
              {
                "name": "move_mode",
                "type_name": "int|str",
                "description": "Used to store the current mode of the worker's movement, which can be one of five options: \"home\", \"forward\", \"backward\", \"left\", or \"right\"."
              },
              {
                "name": "ext_joints",
                "type_name": "Tuple[float]",
                "description": "A list of joint angles for the robot's end effector, which are used to control the movement of the robot's arm."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "Tuple[float,float,float]",
                "description": "A reference to the robot's end effector position in 3D space."
              },
              {
                "name": "ext_gripper",
                "type_name": "Union[float,int]",
                "description": "A variable for gripper position in case 4 of the switch statement. It represents the movement of the gripper in the X, Y, or Z axis."
              },
              {
                "name": "timer",
                "type_name": "float|int",
                "description": "Used to store the elapsed time since the last call to `start_work`."
              },
              {
                "name": "compute",
                "type_name": "function|NoneType",
                "description": "Used to compute the new target position or orientation based on the received data packet from the robot. The function takes into account the current position, orientation, and other parameters such as move mode, home, and axis values, and updates the target position or orientation accordingly."
              },
              {
                "name": "joint_speeds",
                "type_name": "List[float]",
                "description": "Used to store the joint speeds for each axis, which are calculated based on the target position and orientation of the robot."
              },
              {
                "name": "speeds",
                "type_name": "float|int",
                "description": "A list of speeds for each axis (X, Y, Z) and the gripper, which represent the desired speed of the robot's joints and the gripper during movement."
              },
              {
                "name": "angles",
                "type_name": "List[float]",
                "description": "Used to store the angles of the robot's joints in radians."
              },
              {
                "name": "gains",
                "type_name": "float|List[float]",
                "description": "Used to store the gains for each axis, which are used to control the movement of the robot's end effector."
              },
              {
                "name": "posesTimes",
                "type_name": "Tuple[float,]",
                "description": "A list of pairs of position, orientation, and time stamps for each joint of the robot in a specific worker. It contains the current position and orientation of the robot's end effector at different time steps during the task execution."
              },
              {
                "name": "poses",
                "type_name": "Tuple[float,float,float,float]",
                "description": "A list of robot positions in a format compatible with the Robot Operating System (ROS) kinematic tree. It stores the robot's current position and orientation in a form that can be used to calculate the robot's end effector pose relative to its base link."
              },
              {
                "name": "calibrator",
                "type_name": "Union[int,str]",
                "description": "Used to store the current calibration mode of the worker, which can be either 0, 1, 2, 3, or 4."
              },
              {
                "name": "cameraKinovaTimer",
                "type_name": "float|int",
                "description": "0 by default, representing the timer for the camera's kinematic movements."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "Callable[[],Any]",
                "description": "Called when the Kinova camera is read. It takes no arguments and returns any data read from the camera."
              },
              {
                "name": "showKinovaStateTimer",
                "type_name": "int|bool",
                "description": "0 by default, indicating that the worker does not show the Kinova state timer."
              },
              {
                "name": "showKinovaAngles",
                "type_name": "bool",
                "description": "1 when the worker wants to display the angles of the robot's joints, and 0 otherwise."
              },
              {
                "name": "gainsTimer",
                "type_name": "int|float",
                "description": "0 by default, which represents the time it takes for a worker to gain their target position after a move command has been executed."
              },
              {
                "name": "updateGains",
                "type_name": "Callable[Tuple[float],None]",
                "description": "Used to update the gains of the robot's joints based on the current position and orientation of the robot."
              },
              {
                "name": "contactPointTimer",
                "type_name": "float|int",
                "description": "Used to store the time taken for a specific worker to contact a target point, which can be used to calculate the move mode and home position."
              },
              {
                "name": "detectContactPoints",
                "type_name": "float|List[float]",
                "description": "Used to store the contact points detected by the worker's end effector during its motion."
              },
              {
                "name": "aamed",
                "type_name": "str|int",
                "description": "Used to store the name of the current move mode or home position in a robot. It can take on values such as \"move_mode\" or \"home\", indicating the different modes of the robot's movement or its default home position, respectively."
              },
              {
                "name": "pybullet_offset",
                "type_name": "Tuple[float,float,float]",
                "description": "Used to define the offset of the robot's end effector from its initial position in world coordinates."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 66,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 950,
            "docLength": null
          },
          {
            "id": "7a7b9254-b1a1-20aa-4b42-aebb8d8da76b",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Initializes variables and timers to communicate with the Kinova robot arm, retrieve joint angles and velocities, and perform calibration and visualization tasks.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "Dict[str, int]",
                "description": "Used to map the joint names of the Kinova arm to their corresponding indices in the PyBullet robot simulation. It allows to customize the mapping between the joints of the real-world Kinova arm and the virtual joints in PyBullet, which is useful when the real-world arm has a different number of joints or different joint names than the PyBullet robot."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the robot's end effector is within the desired workspace during startup. It is set to `True` by default, which will perform the check. If set to `False`, the check will be skipped, and the robot will proceed with its initialization."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Create an instance of SpecificWorker class\nworker = SpecificWorker(proxy_map, startup_check=False)\n\n# Call the __init__ method with the required arguments\nworker.__init__(proxy_map, startup_check=False)\n\n# Use the methods and variables defined in the SpecificWorker class\nprint(\"Starting physics simulation...\")\nworker.startPhysicsSimulation()\n\nprint(\"Adjusting camera settings...\")\nworker.adjustCameraSettings(1.5, 50, -35, [0, 0, 0.5])\n",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 67,
              "insert": 68,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 144,
            "docLength": null
          },
          {
            "id": "b9ce7407-ff00-12a3-2c4d-1eb7bb1299eb",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Sets parameters for further processing of data.",
            "params": [
              {
                "name": "params",
                "type_name": "ParamType.any",
                "description": "Passed in to update the parameters of an object."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "1 if the parameters are set successfully, otherwise it returns a value of False."
            },
            "usage": {
              "language": "python",
              "code": "import SpecificWorker\n\n# Create a new instance of the SpecificWorker class with default parameters\nworker = SpecificWorker()\n\n# Set the parameters of the worker to use for the task\nparams = {\n    'Period': 100,\n    'rgb': [255, 0, 0],\n}\nworker.setParams(params)\n\n# Execute the task using the updated parameters\nworker.doTask()\n",
              "description": ""
            },
            "name": "setParams",
            "location": {
              "start": 250,
              "insert": 256,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "5893310d-853e-2f86-a94a-9565dbbdbf84",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Computes the joint angles to reach a target position and orientation of the robot's end effector, taking into account the robot's dynamics and constraints. It also handles the communication with the PyBullet and Kinova APIs.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initialize SpecificWorker object with proxy map and startup check as True\nworker = SpecificWorker(proxy_map, startup_check=True)\n\n# Startup check to set up the robot and camera in PyBullet\nworker.startup_check()\n\n# Compute function call to get the image and other data from the simulated environment\nworker.compute(1)\n\n# Print out the image, timestamp, and other data obtained from the compute function\nprint(worker.rgb)\nprint(worker.timestamp)\n",
              "description": ""
            },
            "name": "compute",
            "location": {
              "start": 259,
              "insert": 262,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 339,
            "docLength": null
          },
          {
            "id": "d1726d17-41c9-cfa1-3e4b-80282d804271",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Tests various components and interfaces of the RoboCompKinovaArm library, including TPose, TGripper, TJoint, TJoints, AxisParams, ButtonParams, and TData.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "from SpecificWorker import SpecificWorker\nfrom GenericWorker import GenericWorker\nimport time\nimport pybullet as p\nimport pybullet_data\n\n# Create a new instance of the specific worker class and pass in the proxy map.\nworker = SpecificWorker(proxy_map)\n\n# Set the startup check flag to True so that the startup_check function is called on initialization.\nworker = SpecificWorker(proxy_map, startup_check=True)\n",
              "description": "\nIn this example, we create a new instance of the specific worker class and pass in the proxy map. We also set the startup check flag to True so that the startup_check function is called on initialization. The startup_check function will then run through its code and perform any necessary tests before returning control back to the user."
            },
            "name": "startup_check",
            "location": {
              "start": 633,
              "insert": 634,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "9bfffb0c-8160-b291-394b-b49d5bbe2982",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Modifies the target angles of a robot's grippers to reach a desired distance, using PyBullet's `setJointMotorControl2` function.",
            "params": [
              {
                "name": "distance",
                "type_name": "float",
                "description": "Used to modify the angles of the gripper's joints for proper gripping of an object."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Create a SpecificWorker object\nspecific_worker = SpecificWorker(proxy_map)\n\n# Set the distance for which the gripper will move to\ndistance = 0.1\n\n# Call the function to change the position of the gripper\nspecific_worker.changePybulletGripper(distance)\n",
              "description": "\nIn this example, we first create an object of type SpecificWorker using the proxy_map argument. We then set a variable distance with the desired value for the gripper's position. Finally, we call the changePybulletGripper function with the distance variable as an argument to change the position of the gripper."
            },
            "name": "changePybulletGripper",
            "location": {
              "start": 650,
              "insert": 651,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "a6b7b89b-3880-408e-4845-519aaf1337e3",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Detects contact forces on the left and right fingertips based on data from the robot's end effector joint positions.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Load the URDF files for the robot and the plane\nplane_urdf = \"./URDFs/plane/plane.urdf\"\nrobot_urdf = \"./URDFs/table/table.urdf\"\n\n# Initialize the physics engine\nphysics_client = p.connect(p.GUI)\np.setAdditionalSearchPath(pybullet_data.getDataPath())\n\n# Load the plane and the robot in the simulation\nplane_id = p.loadURDF(plane_urdf, basePosition=[0, 0, 0], baseOrientation=[0, 0, 0, 1])\nrobot_id = p.loadURDF(robot_urdf, basePosition=[0, 0, 0], baseOrientation=[0, 0, 0, 1])\n\n# Set the simulation parameters\np.setRealTimeSimulation(1)\np.setGravity(0, 0, -9.81)\n\n# Detect contact points between the robot and the plane\ncontact_points = detectContactPoints(robot_id, plane_id)\nprint(\"Number of contact points:\", len(contact_points))\n",
              "description": ""
            },
            "name": "detectContactPoints",
            "location": {
              "start": 663,
              "insert": 665,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "529ac2d3-b4b4-f3be-364c-a709f3559bec",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Calculates the difference between the predicted and actual positions of a target based on keypoints detected using the AAMED algorithm, and adjusts the position of a cylinder to minimize the error.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "Ether the error between the estimated position and the actual position or -1 if no keypoints are detected."
            },
            "usage": {
              "language": "python",
              "code": "from SpecificWorker import SpecificWorker\nimport time\n\n# Initialize the worker object\nworker = SpecificWorker()\n\n# Set up the simulation environment and get the reference to the proxy map\nproxy_map = worker.setUpSimulationEnvironment()\n\n# Call the correctTargetPosition method to adjust the position of a cylinder in the simulated environment based on a set of predefined colors\nworker.correctTargetPosition(proxy_map)\n",
              "description": ""
            },
            "name": "correctTargetPosition",
            "location": {
              "start": 687,
              "insert": 688,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "9be3a800-f4e5-97aa-5844-40f07057dd94",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Initializes tools and adds them to the environment, sets up grippers and end effectors, defines axes for movement, and prepares for work.",
            "params": [
              {
                "name": "target_position",
                "type_name": "Tuple[float, float, float]",
                "description": "Used to specify the position where the toolbox should arrive at the end of the simulation."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "from swift import Swift\nfrom rtb import models\nimport sg\nimport sm\n\n# create a new instance of the specific worker class and pass in the target position as an argument\nworker = SpecificWorker(target_position=[0.4, 0.4, 0.8])\n\n# initialize the toolbox with the target position and launch the real-time environment\nworker.initialize_toolbox(target_position)\n",
              "description": ""
            },
            "name": "initialize_toolbox",
            "location": {
              "start": 721,
              "insert": 723,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 33,
            "docLength": null
          },
          {
            "id": "c6e5c26d-8d89-288f-f348-f68736241887",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Computes the joint velocities for the robot to approach its goal position and orientation while avoiding joint limits. It uses the kinematic tree, Jacobian matrix, and velocity damping to compute the joint angles.",
            "params": [
              {
                "name": "target_position",
                "type_name": "Tuple[float, float, float]",
                "description": "Used to specify the desired position of the end effector."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "import numpy as np\nfrom kinova_robot import SpecificWorker\n\n# Create a new instance of the specific worker class\nworker = SpecificWorker(proxy_map={}, startup_check=False)\n\n# Set the target position for the robot to move to\ntarget_position = [0.5, 0.25, 0.1]\n\n# Call the toolbox compute function and pass in the target position as an argument\nworker.toolbox_compute(target_position=target_position)\n",
              "description": ""
            },
            "name": "toolbox_compute",
            "location": {
              "start": 768,
              "insert": 770,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 56,
            "docLength": null
          },
          {
            "id": "406af517-1563-2ebd-2046-4ef59d4cddd2",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Reads camera data from a PyBullet environment and processes it to generate an RGB image, which is displayed in a window using OpenCV functions.",
            "params": [],
            "returns": {
              "type_name": "Tuple[npndarray,float]",
              "description": "The RGB image of the camera and time stamp in milliseconds."
            },
            "usage": {
              "language": "python",
              "code": "from SpecificWorker import SpecificWorker\nimport time\n\n# Create a new instance of the SpecificWorker class\nspecific_worker = SpecificWorker()\n\n# Start the robot simulation\nspecific_worker.start_simulation()\n\nwhile True:\n    # Read the camera image and timestamp\n    rgb, timestamp = specific_worker.read_camera_fixed()\n    \n    # Display the image in a window\n    cv2.imshow(\"Image\", rgb)\n    \n    # Wait for a key press to continue\n    if cv2.waitKey(1) == ord('q'):\n        break\n\n# Close the simulation and clean up resources\nspecific_worker.close()\n",
              "description": "\nThis code creates an instance of the SpecificWorker class, starts the robot simulation, and reads the camera image and timestamp using the read_camera_fixed method in a loop. Finally, it closes the simulation and cleans up resources."
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 903,
              "insert": 904,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 44,
            "docLength": null
          },
          {
            "id": "4e0b29b1-388b-588a-aa4e-88e1755916a1",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Retrieves depth and color images from a Kinova camera and stores them in instance variables for later processing.",
            "params": [],
            "returns": {
              "type_name": "bool",
              "description": "`True` when the operation is successful, and `False` otherwise."
            },
            "usage": {
              "language": "python",
              "code": "from SpecificWorker import SpecificWorker\nimport numpy as np\n\n# Initialize the worker object\nworker = SpecificWorker(proxy_map, startup_check=False)\n\n# Set the camera proxy map\ncamera_proxy_map = {\n    \"CameraRGBDViewer\": {\n        \"depth\": {\n            \"height\": 480,\n            \"width\": 640,\n            \"alivetime\": 10,\n            \"image\": [1329152, 1329152, 1329152, ...],\n        },\n        \"image\": {\n            \"height\": 480,\n            \"width\": 640,\n            \"depth\": 1,\n            \"alivetime\": 10,\n            \"image\": [1329152, 1329152, 1329152, ...],\n        },\n    }\n}\nworker.camerargbdsimple_proxy = camera_proxy_map\n\n# Set the depth and color arrays to empty lists\nworker.depthKinova = []\nworker.colorKinova = []\n\n# Call the readKinovaCamera function to get the latest data\nsuccess = worker.readKinovaCamera()\n\n# If successful, access the depth and color images\ndepth_image = np.asarray(worker.depthKinova[0][0])\ncolor_image = np.asarray(worker.colorKinova[0][0])\n",
              "description": ""
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 974,
              "insert": 975,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "f42601d9-05f6-f6ba-c549-b043a97a12b2",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Computes and prints the angles of Kinova joints, the difference between the current angles and those provided by PyBullet, and the distance of the gripper.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "worker = SpecificWorker()\nworker.showKinovaAngles()\n",
              "description": ""
            },
            "name": "showKinovaAngles",
            "location": {
              "start": 990,
              "insert": 991,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "6bc34c0c-7929-90aa-da4b-a842737b69ec",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Calculates and sets the target velocities for joints external to the robot, based on the robot's internal velocity signals, and then sets those velocities using PyBullet's `setJointMotorControl2` function.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# create a SpecificWorker object\nspecific_worker = SpecificWorker(proxy_map, startup_check=False)\n\n# initialize the worker and physics client\nspecific_worker.startup()\nspecific_worker.physicsClient = p.connect(p.GUI)\np.setAdditionalSearchPath(pybullet_data.getDataPath())\np.configureDebugVisualizer(p.COV_ENABLE_GUI, 0)\np.setGravity(0, 0, -9.81)\n\np.setRealTimeSimulation(1)\n\nflags = p.URDF_USE_INERTIA_FROM_FILE\nspecific_worker.plane = p.loadURDF(\"./URDFs/plane/plane.urdf\")\nspecific_worker.table_id = p.loadURDF(\"./URDFs/table/table.urdf\", basePosition=[0, 0, 0],\n                                       baseOrientation)\n\n# move the robot using external joint velocities\nspecific_worker.movePybulletWithExternalVel(ext_joints=ExtJoints(joints=[1.2, 3.4]))\n",
              "description": ""
            },
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 1001,
              "insert": 1002,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "0ff152aa-9acd-d38c-0a41-dc6853e2e943",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Controls the velocity of joints of a robot using PyBullet's setJointMotorControl2 function, based on target velocities provided in a list.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Create a new instance of the SpecificWorker class\nspecific_worker = SpecificWorker()\n\n# Move the PyBullet robot with toolbox using the movePybulletWithToolbox method\nspecific_worker.movePybulletWithToolbox(target_velocities=[0, 0, 0])\n",
              "description": ""
            },
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 1011,
              "insert": 1013,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "733d93e2-0f04-0c83-8f41-66c51346be0c",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Retrieves joint state and gripper state data from a proxy server, scales the gripper distance by 0.8, and sleeps for 0.05 seconds before repeating the process.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "import time\n\n# Create an instance of SpecificWorker\nworker = SpecificWorker(proxy_map=None, startup_check=False)\n\n# Call the readDataFromProxy method\nwhile True:\n    worker.readDataFromProxy()\n    # Process the data as needed\n    time.sleep(0.05)\n",
              "description": ""
            },
            "name": "readDataFromProxy",
            "location": {
              "start": 1018,
              "insert": 1019,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "1431565b-0bc2-4fb1-8e4b-579132e326b5",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Takes an angle array as input and moves the Kinova arm based on the angles.",
            "params": [
              {
                "name": "angles",
                "type_name": "float | List[float]",
                "description": "Representing the joint angles to move the kinova arm in radians, with values between 0 and 360 degrees."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Initializing the SpecificWorker class and its properties\nworker = SpecificWorker(proxy_map, startup_check=False)\n\n# Setting the joint angles of the Kinova arm using the moveKinovaWithAngles method\nangles = [45, 60, 70, 80, 90, 100]\nworker.moveKinovaWithAngles(angles)\n",
              "description": "\nIn this example, the SpecificWorker class is initialized with its properties and a proxy_map argument. The moveKinovaWithAngles method is then called with an input of angles, which sets the joint angles of the Kinova arm to the specified values."
            },
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 1027,
              "insert": 1028,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "0aeae1ff-1bc1-dea3-1a45-0866ba1aba44",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Computes and sends joint speeds to the Kinova arm proxy for movement based on current joint angles and gain values.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Create an instance of SpecificWorker\nworker = SpecificWorker(proxy_map={})\n\n# Define the joint speeds and angles for the Kinova arm\njoint_speeds = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\njoint_angles = [90, 180, 270, 360, 450, 540, 630]\n\n# Move the Kinova arm with the defined joint speeds and angles\nworker.moveKinovaWithSpeeds(joint_speeds, joint_angles)\n",
              "description": ""
            },
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 1032,
              "insert": 1034,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "974e49b9-e888-e799-4c49-bab29c47a591",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Updates the gains for each joint based on the difference between the robot's current pose and its desired pose, with a maximum gain update of 0.2 radians per step.",
            "params": [],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "import numpy as np\nfrom SpecificWorker import SpecificWorker\n\n# Initialize a SpecificWorker object with proxy_map and startup_check=False\nworker = SpecificWorker(proxy_map, startup_check=False)\n\n# Call the updateGains method of the worker object with some values for i and error\nworker.updateGains(i=7, error=np.deg2rad(45))\n",
              "description": "\nThis code would update the gains for joint 7 in the SpecificWorker object using the given error value. It is assumed that the user has already initialized a SpecificWorker object with proxy_map and startup_check=False."
            },
            "name": "updateGains",
            "location": {
              "start": 1052,
              "insert": 1053,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "5f511f08-b117-a5b7-d549-971a179aceaa",
            "ancestors": [
              "b3950ca6-24d1-5893-2349-d871399984d9"
            ],
            "description": "Receives input data from a joystick and updates the robot's position, orientation, and move mode based on the received data.",
            "params": [
              {
                "name": "data",
                "type_name": "Tuple[Axis, Button]",
                "description": "Passed the raw joystick data from the user's input device."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "# Create a new instance of the SpecificWorker class\nspecific_worker = SpecificWorker()\n\n# Set the move mode to 0 (default)\nspecific_worker.move_mode = 0\n\nwhile True:\n    # Retrieve data from the joystick and send it to the robot\n    specific_worker.JoystickAdapter_sendData(data=specific_worker.getJoystickData())\n",
              "description": "\nThis example creates an instance of the SpecificWorker class, sets the move mode to 0 (default), and retrieves data from the joystick using the getJoystickData() function. It then sends this data to the robot using the JoystickAdapter_sendData() function. Note that this is just a simple example, and you will likely need to modify it to fit your specific needs."
            },
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 1080,
              "insert": 1081,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "A class `RoboCompKinovaArm` that implements various interfaces from the `ifaces` module, which provides a set of abstractions for interacting with the RoboComp Kinova arm. The code provides implementations for methods such as `get_pose`, `move_joints_with_speeds`, `get_gripper_state`, and more. Additionally, it defines several methods for working with joint angles, cartesian moves, and gripper states. Overall, the code appears to provide a way to interact with the RoboComp Kinova arm using Python, including movements and manipulation of objects.",
        "items": [
          {
            "id": "b675b733-f301-1c9b-5843-306040339c2e",
            "ancestors": [],
            "description": "Manages a RoboCompKinovaArm, providing methods for getting and setting joints' state, gripper state, and pose. It also includes a startup check and a method to move joints with speed or angle.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, representing the period of time (in milliseconds) between successive invocations of the `compute()` method."
              },
              {
                "name": "startup_check",
                "type_name": "Python",
                "description": "Used for testing the RoboCompKinovaArm functionality."
              },
              {
                "name": "kinova",
                "type_name": "KinovaGen3",
                "description": "Used to interact with the RoboCompKinovaArm device."
              },
              {
                "name": "flag",
                "type_name": "bool",
                "description": "Used to indicate whether the worker has performed its computation or not, allowing the `compute()` method to be called only once."
              },
              {
                "name": "timer",
                "type_name": "QtCoreQTimer",
                "description": "Used to schedule a callable object (i.e., a slot) to be executed after a specified interval, typically for processing sensor data or other tasks that require periodic updates."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "Used to execute a function when a specific event occurs, such as a timeout. The function executed by the `compute` attribute is responsible for retrieving data from the Kinova arm and updating the worker's internal state."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "A list of objects representing the joint states of the RoboCompKinovaArm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "Used to store the current state of the gripper, such as its position and speed."
              },
              {
                "name": "speeds",
                "type_name": "ifacesRoboCompKinovaArmTJointSpeeds",
                "description": "Used to store the joint speed values for moving the robotic arm with speed."
              },
              {
                "name": "moveWithSpeed",
                "type_name": "bool",
                "description": "Used to control the movement of joints with speed. When set to True, it enables the movement of joints with a predefined speed, otherwise it disables it."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 120,
            "docLength": null
          },
          {
            "id": "86b3b1cc-8637-aeaf-4049-5d25c62b5dbf",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets up an instance of `SpecificWorker`, inheriting from `GenericWorker`. It initializes member variables, including a period for computing and a list of joints and gripper speeds.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to pass a mapping of kinova interface names to their corresponding implementations."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the kinova arm is already started or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "226c1de8-c82c-87b6-a344-6cd3bcfd570a",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets parameters for an instance of `SpecificWorker` subclassing `GenericWorker`. It returns `True` indicating successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "objectinstance",
                "description": "Used to set parameters for an instance of a class."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "The default value returned by the method when no exception occurs."
            },
            "name": "setParams",
            "location": {
              "start": 62,
              "insert": 68,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "cdca8acc-4fe5-7fbb-3d4d-6bc0814c1e40",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Computes the joint positions, velocities, and forces for the RoboComp kinova arm based on input from sensors and other sources. It also retrieves gripper state information and moves the joints with specified speeds if necessary.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTJoints",
              "description": "An instance of a class that represents the joints information of the kinova arm, including the angles, velocities, and forces of each joint."
            },
            "name": "compute",
            "location": {
              "start": 71,
              "insert": 74,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 31,
            "docLength": null
          },
          {
            "id": "9bd43b40-09eb-e69f-4244-dbe7a95136c2",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Tests RoboCompKinovaArm.TPose and RoboCompKinovaArm.TGripper classes from the ifaces module and then quits the application after a 200 milliseconds delay.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 107,
              "insert": 108,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "fdbb5cba-000c-5e9b-0e4c-0f62d099589e",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Moves the gripper of a robotic arm to a specified position, using the `kinova.gripper_move_to()` method.",
            "params": [
              {
                "name": "position",
                "type_name": "float",
                "description": "Used to specify the desired position of the gripper in terms of the range of motion of the robotic arm."
              }
            ],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 122,
              "insert": 124,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "09f1f0d0-1af7-29b5-4341-a8f4c47f23f0",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Retrieves the center of a tool referenced by `referencedTo`.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to return the center of the tool referenced to a specific position or orientation."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A pose representation of the tool center position relative to the arm's end effector."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 130,
              "insert": 131,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "fd16147b-f769-00bf-af4c-ecb7d798258f",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Opens the gripper of a robotic arm controlled by the `kinova` library.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 144,
              "insert": 149,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ec48246b-c60b-cab8-4f4e-90214ec441f7",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets the center of a tool referenced to a given pose within a Kinova Arm.",
            "params": [
              {
                "name": "pose",
                "type_name": "opencvcoreMat",
                "description": "Used to represent the tool's pose relative to the end effector."
              },
              {
                "name": "referencedTo",
                "type_name": "kinova_msgsmsgReferenceFrame",
                "description": "Used to specify the reference frame for the tool center point."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 161,
              "insert": 166,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "2333643c-5b6e-cf91-2c4b-56472039d929",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Sets the speeds of joint movements for an arm using a timer to determine the move order and speed.",
            "params": [
              {
                "name": "speeds",
                "type_name": "numpyarray",
                "description": "3D array of float values representing the desired joint speeds for the Kinova arm to move with."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithSpeed",
            "location": {
              "start": 171,
              "insert": 172,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "6e03a331-3fd0-db8c-f645-a3c68f7bd161",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Moves the joints of a Kinova arm to specific angles, using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "Angle",
                "description": "Passed as an instance of the Angle class, containing the desired joint angles in degrees for the Kinova arm to move."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "26ba57a0-c0bc-0aac-bd4b-5357c505612e",
            "ancestors": [
              "b675b733-f301-1c9b-5843-306040339c2e"
            ],
            "description": "Retrieves the current pose of an object using the `kinova` module and stores it in a variable called `state`.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 188,
              "insert": 189,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "kinovaarmI.py",
    "path": "components/kinova_controller/src/kinovaarmI.py",
    "content": {
      "structured": {
        "description": "A class `KinovaArmI` that inherits from the `KinovaArm` class and provides additional functionality for controlling a Kinova Arm robotic arm. The code imports various packages including `sys`, `os`, and `Ice`, which is likely used for interacting with the RoboComp framework. The class defines several methods for controlling the arm's joints, gripper, and center of tool, as well as setting the arm's position and orientation. Overall, the code provides a way to programmatically control a Kinova Arm robotic arm using the RoboComp framework.",
        "items": [
          {
            "id": "dfb38b51-dfce-a2b9-9945-674cea2f58ed",
            "ancestors": [],
            "description": "Provides methods for controlling a Kinova arm, including closing and opening the gripper, getting the center of tool, gripper state, joints state, and moving the joints with angle or speed.",
            "attributes": [
              {
                "name": "worker",
                "type_name": "KinovaArm",
                "description": "Used to interact with the Arm's API for joints movement, gripper opening and closing, and tool positioning."
              }
            ],
            "name": "KinovaArmI",
            "location": {
              "start": 36,
              "insert": 37,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "test.py",
    "path": "components/kinova_controller/src/test.py",
    "content": {
      "structured": {
        "description": "Two functions: `close_gripper_speed()` and `open_gripper_speed()`. These functions use the `base` object to control a robotic gripper's movement using speed commands. The `close_gripper_speed()` function sets the gripper's speed to close it, while the `open_gripper_speed()` function sets the gripper's speed to open it. Both functions use the `GetMeasuredGripperMovement()` method to check the gripper's current position and speed, and adjust the speed command accordingly.",
        "items": [
          {
            "id": "b1c40329-5339-d8af-c640-a982dab945c3",
            "ancestors": [],
            "description": "Provides methods for getting camera information, intrinsic and extrinsic parameters, and movement actions using the Kinova Gen III SDK. It also includes functions for closing the gripper with a speed command and opening it with a speed command.",
            "attributes": [
              {
                "name": "connection",
                "type_name": "object",
                "description": "Used to establish a connection with the Kinova Gen 3 robot controller. It represents the result of calling the `connect()` method, which returns a connection object that can be used to send commands to the robot and receive data from it."
              },
              {
                "name": "router",
                "type_name": "RoombaRouter",
                "description": "Used to interact with the Robot's ROS2 node, sending and receiving messages."
              },
              {
                "name": "base",
                "type_name": "instance",
                "description": "A reference to an object of the `KinovaBase` class, which provides access to the robot's base functionality such as movement, gripper control, and sensor readings."
              },
              {
                "name": "base_cyclic",
                "type_name": "Base_pb2Base",
                "description": "Used to interact with the Cyclic robotic arm. It provides methods for moving the arm, closing the gripper, and opening the gripper."
              }
            ],
            "name": "KinovaGen3",
            "location": {
              "start": 51,
              "insert": 52,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 342,
            "docLength": null
          },
          {
            "id": "b99b8053-62c2-298b-7d49-87f8a03b69bb",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Establishes connections to an IP address, username, and password using the `utilities.DeviceConnection` class, then creates instances of `BaseClient` and `BaseCyclicClient` using the connected router.",
            "params": [],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 52,
              "insert": 54,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "26e6d7dd-e7b3-9a8a-0645-c46a66e7b070",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3",
              "82de0138-290b-de95-5c45-8c70ba2d91c5"
            ],
            "description": "Takes a `notification` object and an optional `e` parameter, and prints the action event name of the notification. If the action event is either `ACTION_END` or `ACTION_ABORT`, the `e` variable is set to a default value.",
            "params": [
              {
                "name": "notification",
                "type_name": "Base_pb2Notification",
                "description": "Passed an event object containing information about the event that triggered the function, such as the action event name."
              },
              {
                "name": "e",
                "type_name": "Base_pb2Event",
                "description": "Set to an instance of that class by the line `e.set()`."
              }
            ],
            "returns": null,
            "name": "check",
            "location": {
              "start": 77,
              "insert": 78,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "92b95edf-da79-f9b9-3742-31209be9799c",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Within the KinovaGen3 class retrieves refresh feedback from the base cyclic object and returns it.",
            "params": [],
            "returns": {
              "type_name": "RefreshFeedback",
              "description": "An instance of a class that contains information about the state of the system."
            },
            "name": "get_state",
            "location": {
              "start": 86,
              "insert": 87,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "6975f821-eec4-e483-0449-af8605c31e80",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Returns a dictionary containing the position, velocity, and torque of the joints of an object controlled by a Kinova Gen 3 robot.",
            "params": [],
            "returns": {
              "type_name": "dict",
              "description": "A dictionary containing the positions, velocities, and torques of the joints."
            },
            "name": "get_joints",
            "location": {
              "start": 93,
              "insert": 94,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "2aebd117-7ade-259c-5c4a-8400fa9ee964",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves the current state of a gripper, specifically the position of the gripper's finger, as measured by the `Base` class's `GetMeasuredGripperMovement` method.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The measured movement of the gripper in the `finger[0]` position."
            },
            "name": "get_gripper_state",
            "location": {
              "start": 101,
              "insert": 102,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "e7cae492-c359-dd82-544a-e452cbae52fc",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves the current position and orientation of a tool in a robotic system, returning a list of 6 values representing the tool's x, y, z coordinates and theta angles in each dimension.",
            "params": [],
            "returns": {
              "type_name": "5element",
              "description": "A list of five floating-point numbers that represent the tool's pose (position and orientation) in the global coordinate system."
            },
            "name": "get_pose",
            "location": {
              "start": 106,
              "insert": 107,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "69d6404d-a82b-f081-c543-475ecc57a69d",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the movement of a gripper based on a target position, sending a command to the base to move the gripper to that position.",
            "params": [
              {
                "name": "target_position",
                "type_name": "float",
                "description": "Representing the desired position of the gripper to move to."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True if the gripper moves to the target position successfully, otherwise False."
            },
            "name": "gripper_move_to",
            "location": {
              "start": 124,
              "insert": 125,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "ab204fbc-6297-1fb4-7b4c-04922f54df11",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Performs Cartesian specific movement of a robot, which involves moving the robot's end effector to a specified position and orientation using an action message.",
            "params": [
              {
                "name": "x",
                "type_name": "float64",
                "description": "Used to set the x-coordinate of the target position for the Cartesian movement."
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "Used to specify the y coordinate of the target position for the cartesian movement."
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "Used to set the z-coordinate of the target pose in the Cartesian coordinate system."
              },
              {
                "name": "theta_x",
                "type_name": "float",
                "description": "Representing the x-angle of the robot's end effector at the specified position."
              },
              {
                "name": "theta_y",
                "type_name": "float",
                "description": "Representing the yaw angle of the robot, which determines the orientation of the robot's yaw axis relative to its base."
              },
              {
                "name": "theta_z",
                "type_name": "float",
                "description": "Used to specify the z-rotation angle of the robot's end effector during movement."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "1 if the movement was successful and 0 if it timed out."
            },
            "name": "cartesian_move_to",
            "location": {
              "start": 144,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 26,
            "docLength": null
          },
          {
            "id": "9f93db2e-47e3-ab89-004d-09915170dd5c",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Within the KinovaGen3 class takes a list of joint speeds as input and creates a `JointSpeeds` message to send to the robot's base module. It then iterates through the list of speeds, adding each one to the message with the appropriate joint identifier and duration. Finally, it sends the completed message to the base module using the `SendJointSpeedsCommand` method.",
            "params": [
              {
                "name": "speeds",
                "type_name": "Base_pb2JointSpeeds",
                "description": "An iterable containing joint speed values for each joint in a robot."
              }
            ],
            "returns": null,
            "name": "move_joints_with_speeds",
            "location": {
              "start": 178,
              "insert": 182,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "e9254dd7-d93c-be83-2c4a-e86155d56c38",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls movement of joints in an angular action by creating an action object, adding joint angles to it, and executing the action using the `ExecuteAction` method. It also waits for the movement to finish and unsubscribes from the notification handle.",
            "params": [
              {
                "name": "joints",
                "type_name": "list",
                "description": "Used to specify the joint angles for movement."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "1 if the angular movement completed within the specified timeout duration, or 0 if the movement did not complete before the timeout."
            },
            "name": "move_joints_to",
            "location": {
              "start": 196,
              "insert": 197,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 30,
            "docLength": null
          },
          {
            "id": "697a1bc0-f352-e0b5-234e-6b7c831a750e",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Prints the extrinsic parameters (rotation and translation) of an object represented by the `KinovaGen3` class.",
            "params": [
              {
                "name": "extrinsics",
                "type_name": "3x3",
                "description": "Used to represent a rotation matrix followed by a translation vector."
              }
            ],
            "returns": null,
            "name": "print_extrinsic_parameters",
            "location": {
              "start": 231,
              "insert": 232,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "ed500cd4-b2d6-8db3-434f-46ae62c6bbe5",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves the device ID of the vision module in a Kinova Gen3 system. It first reads all devices information, then checks if there is only one vision device, and finally returns its device ID.",
            "params": [
              {
                "name": "device_manager",
                "type_name": "DeviceManager",
                "description": "Used to retrieve information about all devices connected to the system."
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "The device identifier of the first vision device found in the devices list or an error message if there are no vision devices registered or more than one vision device is registered."
            },
            "name": "example_vision_get_device_id",
            "location": {
              "start": 245,
              "insert": 246,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "c4d48fde-88cf-44b9-9449-9330762a7878",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves extrinsic parameters for a given vision device ID using the `VisionConfigService`. It then prints the retrieved extrinsics to the console.",
            "params": [
              {
                "name": "vision_config",
                "type_name": "VisionConfig",
                "description": "Used to retrieve extrinsic parameters for a specific vision device ID."
              },
              {
                "name": "vision_device_id",
                "type_name": "int",
                "description": "Used to identify a specific vision device for which extrinsic parameters are being retrieved."
              }
            ],
            "returns": null,
            "name": "example_routed_vision_get_extrinsics",
            "location": {
              "start": 266,
              "insert": 267,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "304fb343-4b3e-2c84-a649-4b0c3869c741",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Within the KinovaGen3 class prints out various parameters associated with intrinsics.",
            "params": [
              {
                "name": "intrinsics",
                "type_name": "IntrinsicParameters",
                "description": "Represented as a object that contains the intrinsic parameters of the camera sensor, including the principal point, resolution, focal length, and distortion coefficients."
              }
            ],
            "returns": null,
            "name": "print_intrinsic_parameters",
            "location": {
              "start": 288,
              "insert": 289,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "647cb6c5-05c7-2e9c-0648-ed5b389e5e00",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves intrinsic parameters of Color and Depth sensors using the Vision Config Service, and also retrieves intrinsic parameters for specific resolutions of Color and Depth sensors.",
            "params": [
              {
                "name": "vision_config",
                "type_name": "VisionConfig_pb2VisionConfig",
                "description": "Used to retrieve intrinsic parameters from the vision config service."
              },
              {
                "name": "vision_device_id",
                "type_name": "int",
                "description": "Used to specify the device ID for which intrinsic parameters are being retrieved."
              }
            ],
            "returns": null,
            "name": "example_routed_vision_get_intrinsics",
            "location": {
              "start": 305,
              "insert": 306,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 27,
            "docLength": null
          },
          {
            "id": "dd5b386e-4d39-1e81-5d41-748edae0f6bc",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Retrieves device information and extrinsic and intrinsic parameters for a vision device in Kinova Gen3.",
            "params": [],
            "returns": null,
            "name": "get_camera_info",
            "location": {
              "start": 333,
              "insert": 334,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "10acdf05-4fc0-7781-084c-b77b797c0c61",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Performs Cartesian movement based on user-inputted coordinates and angles, using the Kinova Gen3 robot's base API.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "The relative movement of the tool along the x-axis."
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "Represented as feedback.base.tool_pose_y + y, which indicates an additional movement along the Y axis of the tool's pose."
              },
              {
                "name": "z",
                "type_name": "32bit",
                "description": "Representing the relative movement of the tool's Z axis."
              },
              {
                "name": "theta_x",
                "type_name": "float",
                "description": "Part of the target pose's orientation, representing the yaw angle of the tool in the x-y plane."
              },
              {
                "name": "theta_y",
                "type_name": "float",
                "description": "Represented as the yaw angle of the tool relative to its parent link, indicating the direction of movement along the y-axis."
              },
              {
                "name": "theta_z",
                "type_name": "float",
                "description": "Representing the z-axis angle of the tool's orientation relative to its starting position, which is used in calculating the target pose of the tool for the Cartesian action movement."
              }
            ],
            "returns": {
              "type_name": "bool",
              "description": "1 if the cartesian movement finishes within the given timeout duration, and 0 otherwise."
            },
            "name": "cartesian_move_relative",
            "location": {
              "start": 343,
              "insert": 345,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "dfb5a07b-6879-d3a4-db45-cb4fe6eba1f9",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the movement of a gripper based on its destination position, moving it at a speed determined by the difference between its current position and the destined position.",
            "params": [
              {
                "name": "dest_pos",
                "type_name": "float",
                "description": "Representing the desired position for the gripper to move towards."
              }
            ],
            "returns": null,
            "name": "move_gripper_speed_dest",
            "location": {
              "start": 379,
              "insert": 381,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 30,
            "docLength": null
          },
          {
            "id": "3c0c15b6-f8ae-f782-704f-d4618b57738e",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the speed of a gripper using a speed command. It sets the value of the gripper to -0.1 and sends the command to the base using the `SendGripperCommand` method. The function then sleeps for 0.1 seconds before continuing to monitor the gripper's movement using the `GetMeasuredGripperMovement` method.",
            "params": [],
            "returns": null,
            "name": "close_gripper_speed",
            "location": {
              "start": 414,
              "insert": 416,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "98568a1b-dae3-59a5-ad4a-d646713fe7d9",
            "ancestors": [
              "b1c40329-5339-d8af-c640-a982dab945c3"
            ],
            "description": "Controls the speed and position of a gripper using a Basebot2 interface. It creates a gripper command message, sends it to the Basebot2, and retrieves the measured movement response from the Basebot2.",
            "params": [],
            "returns": null,
            "name": "open_gripper_speed",
            "location": {
              "start": 439,
              "insert": 441,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          }
        ]
      }
    }
  }
]