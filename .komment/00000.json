[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a class called `KinovaController` that acts as an interface between a kinova robot and a pybullet environment. The code performs the following actions:\n\n1. It sets up a pybullet environment and connects it to the kinova robot.\n2. It defines methods for moving the robot's arms, legs, and gripper, as well as rotating its orientation.\n3. It listens for button presses and moves the robot's arms, legs, and gripper based on the pressed buttons.\n4. It updates the robot's orientation based on the button presses.\n\nThe code uses various pybullet packages, including `pybullet_core`, `pybullet_kinova`, and `pybullet_button`. It also utilizes the `numpy` and `mathutils` packages for numerical computations and mathematical operations.",
        "items": [
          {
            "id": "122cfec6-2bbe-cd8e-9449-ead8d8ea779a",
            "ancestors": [],
            "description": "Manages communication between a PyBullet environment and an external joystick, allowing for precise control of robotic arms. It receives joystick inputs, updates the arm's position and orientation, and sends the updated positions back to PyBullet.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "instance",
                "description": "200 by default, which represents the duration between successive executions of the `sendData` method. It determines how often the worker sends data to the master."
              },
              {
                "name": "rgb",
                "type_name": "8element",
                "description": "Used to store the RGB values for each pixel of the robot's skin."
              },
              {
                "name": "startup_check",
                "type_name": "Attribute",
                "description": "Defined as a tuple containing a list of functions to be executed when the worker starts up. These functions are \ncalled with the current worker state as their first argument, and can be used to perform any necessary \ninitialization or setup tasks before the worker begins processing tasks."
              },
              {
                "name": "physicsClient",
                "type_name": "PhysicsClient",
                "description": "Used to interact with the Pybullet simulation environment, allowing the worker to send commands to the robot and receive data from the sensor."
              },
              {
                "name": "plane",
                "type_name": "ndarray",
                "description": "Used to store the angles of the robot's joints in radians."
              },
              {
                "name": "table_id",
                "type_name": "int",
                "description": "Used to identify a specific table that the worker is associated with, allowing the worker to handle multiple tables simultaneously."
              },
              {
                "name": "robot_urdf",
                "type_name": "str",
                "description": "Used to store the robot's URDF file path for simulation-based motion planning."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "list",
                "description": "Defined as `list(self.robot2_target_pos)`. It stores the position of the robot's launching position."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "nparray",
                "description": "Used to store the orientation of the robot's end effector relative to its base link, which is calculated based on the joint angles of the robot."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "int",
                "description": "1-based index of the end effector link in the robot's kinematic chain. It indicates the link number of the end effector in the robot's chain."
              },
              {
                "name": "home_angles",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the desired joint angles for each joint of the robot in radians. It is used to set the target joint angles for movement mode 0 and movement mode 1."
              },
              {
                "name": "observation_angles",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the angles of the joints of the robot (Kinova arm) in radians. It stores the angles provided by the PyBullet simulation and will be used to calculate the gains for each joint."
              },
              {
                "name": "observation_angles_2",
                "type_name": "7element",
                "description": "Used to store the angles of a robot's joints after observing the environment, with the angles being rounded to the nearest degree."
              },
              {
                "name": "observation_angles_3",
                "type_name": "ndarray",
                "description": "3D, representing the angles of the robot's joints as observed by the Kinova arm's end effector. It is used in the moveKinovaWithSpeeds method to update the joint angles based on the observation angles from the Kinova arm."
              },
              {
                "name": "observation_angles_cube",
                "type_name": "ndarray",
                "description": "7-dimensional, representing the angles of the robot's joints as observables for the worker to control."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "4, indicating that it belongs to a specific robot with ID 4."
              },
              {
                "name": "pybullet_cup",
                "type_name": "instance",
                "description": "Not defined explicitly in the code snippet provided. It's likely a private attribute used for internal purposes, and its meaning can only be determined by analyzing the class's implementation and documentation."
              },
              {
                "name": "square",
                "type_name": "instance",
                "description": "4-dimensional, representing the square shape of the worker's end effector."
              },
              {
                "name": "hilo_lectura",
                "type_name": "ndarray",
                "description": "Used to store the result of a HIL (Hardware-in-the-Loop) simulation, which is a combination of simulated and real-world data."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "method",
                "description": "Responsible for reading data from the PyBullet proxy. It takes no arguments and returns a tuple containing the read data."
              },
              {
                "name": "target_angles",
                "type_name": "7element",
                "description": "Used to store the target angles of the robot's joints, which are calculated based on the user input and the current pose of the robot."
              },
              {
                "name": "target_position",
                "type_name": "3D",
                "description": "Used to store the target position of the robot's end effector, which can be modified based on user input from a joystick."
              },
              {
                "name": "target_orientation",
                "type_name": "3x3",
                "description": "Defined as `p.getEulerFromQuaternion(self.target_orientation)`. It stores the target orientation of the robot in Euler angles format (roll, pitch, yaw)."
              },
              {
                "name": "target_velocities",
                "type_name": "ndarray",
                "description": "7-dimensional, where each dimension corresponds to a joint of the robot and has a value representing the target velocity of that joint in radians per second."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "int",
                "description": "0-based, representing the selected joint in a robot's arm based on user input from a joystick or other control device."
              },
              {
                "name": "move_mode",
                "type_name": "int",
                "description": "0, 1, or 2 indicating whether the robot should move to a new position (0), orient to a new orientation (1), or move to a new position with gripper open (2)."
              },
              {
                "name": "n_rotations",
                "type_name": "int",
                "description": "4, indicating that the worker has 4 rotational degrees of freedom (joints)."
              },
              {
                "name": "ext_joints",
                "type_name": "8element",
                "description": "Representing the joint angles of a kinova arm. It contains the actual angles of the robot's joints, which are used to calculate the gains for each joint."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "instance",
                "description": "A Kinova arm proxy object used to interact with the robot's joints and move them according to the user input."
              },
              {
                "name": "ext_gripper",
                "type_name": "Optionalint",
                "description": "Used to store the external gripper's position in a list with 7 elements, where each element represents a \njoint in the robot arm."
              },
              {
                "name": "posesTimes",
                "type_name": "ndarray",
                "description": "Used to store the current time of the robot's movements. It stores time in milliseconds since the \nrobot's movement started."
              },
              {
                "name": "poses",
                "type_name": "7D",
                "description": "3D array representing the robot's current positions as a list of 3D vectors for each joint."
              },
              {
                "name": "timestamp",
                "type_name": "ndarray",
                "description": "Used to store the timestamp of each step in the worker's execution. It is used to update the worker's state based on the elapsed time since its last update."
              },
              {
                "name": "timer",
                "type_name": "int",
                "description": "Used to store the current time in milliseconds since the start of the program."
              },
              {
                "name": "compute",
                "type_name": "unbound",
                "description": "Used to compute the target position and orientation based on the provided data from the joystick adapter."
              },
              {
                "name": "timer2",
                "type_name": "int",
                "description": "2 by default, which represents the time interval between updates of the robot's position and orientation in simulation."
              },
              {
                "name": "movePybulletWithExternalVel",
                "type_name": "method",
                "description": "Used to move the robot with velocities provided by an external source, such as a joystick or a script."
              },
              {
                "name": "joint_speeds",
                "type_name": "ndarray",
                "description": "7-dimensional, where each element represents the speed of one of the robot's joints. The speeds are calculated based on the difference between the desired angle and the current angle, and are used to control the movement of the robot."
              },
              {
                "name": "gains",
                "type_name": "7element",
                "description": "Used to store the gains for each joint in a robot arm. The gains are used to control the speed of the joints during movement."
              },
              {
                "name": "speeds",
                "type_name": "ndarray",
                "description": "Used to store the joint speeds for the Kinova robot arm when the user presses a joystick button. The speeds are \nstored as numpy arrays with shape (7,) where each element represents the speed of one of the seven joints \nof the robot arm."
              },
              {
                "name": "angles",
                "type_name": "npndarray",
                "description": "1-dimensional, containing the angles of the joints of the robot in radians."
              },
              {
                "name": "timer3",
                "type_name": "float",
                "description": "3 seconds by default, indicating how often the worker will check for new data from the joystick adapter."
              },
              {
                "name": "moveKinovaWithSpeeds",
                "type_name": "method",
                "description": "Responsible for moving the Kinova arm based on joint angles provided in the `angles` list, and updating the gains of each joint based on the error between the target angle and the actual angle."
              },
              {
                "name": "timer4",
                "type_name": "int",
                "description": "4, indicating that the worker is using timer 4 for communication with the PyBullet environment."
              },
              {
                "name": "movePybulletWithToolbox",
                "type_name": "instance",
                "description": "Defined as a method that moves the robot using PyBullet while synchronizing with the Toolbox GUI. It takes input from the Toolbox GUI and updates the robot's position and orientation accordingly."
              },
              {
                "name": "colorKinova",
                "type_name": "str",
                "description": "Defined as `'#ff0000'`. It represents the default color of the Kinova arm."
              },
              {
                "name": "depthKinova",
                "type_name": "ndarray",
                "description": "1-dimensional, representing the depth values returned by the Kinova robot's sensors."
              },
              {
                "name": "calibrator",
                "type_name": "instance",
                "description": "A function that calibrates the kinova arm based on the joint angles received from the external joint state estimator."
              },
              {
                "name": "timer5",
                "type_name": "int",
                "description": "5 by default, which means that every time a move is performed by the worker, it will take at least 5 seconds to perform the move. This helps to simulate the real-world timing constraints of robotic arms."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "methods",
                "description": "Defined as a function that reads camera data from a Kinova robot and returns it as a list of tuples containing\nthe camera's joint angles, rotation matrix, and extrinsic parameters."
              },
              {
                "name": "timer6",
                "type_name": "int",
                "description": "6 by default, which represents the number of seconds to wait before checking for new data from the joystick adapter. It allows you to adjust the delay time according to your needs."
              },
              {
                "name": "correctCupPosition",
                "type_name": "nparray",
                "description": "Used to store the correct position of the cup during the pick and place task of the robot arm. It is updated based on the angles provided by the user through the joystick adapter."
              },
              {
                "name": "aamed",
                "type_name": "instance",
                "description": "Not a defined word or concept. It is likely a typo or misspelling, and it does not have any meaning or significance in the context of the provided code snippet."
              },
              {
                "name": "flag",
                "type_name": "int",
                "description": "0 by default, indicating that the worker is not flagged for any task."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 64,
              "insert": 65,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 779,
            "docLength": null
          },
          {
            "id": "099fcba2-f766-7b81-654a-ffd3232e4205",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Initializes the SpecificWorker class, setting up the necessary variables and timers for controlling a Kinova robot arm. It also handles the connection to the PyBullet simulator and sets up the movement modes and joint speeds.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to specify the mapping between the robot's joints and the corresponding joints of the external arm."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "Used to check if the robot is properly connected and initialized for the first time, by checking if the getDynamicsInfo method returns the expected values."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 65,
              "insert": 66,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 149,
            "docLength": null
          },
          {
            "id": "f1a25dab-1c5a-298d-5543-d47b25556bb9",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Sets parameters for an instance of a `GenericWorker`. It returns `True` upon successful execution, indicating that the parameter setting was successful.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Passed to the method for configuration purposes."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "A primitive data type of Python"
            },
            "name": "setParams",
            "location": {
              "start": 254,
              "insert": 260,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "8705eb5c-8e8f-1a80-ee49-54a1f70952af",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Computes the angles required to reach a specific target position and orientation for the robot's end effector, based on the observed position and orientation of the cup. It also handles moving the robot to the home position and angle, and correcting the cup position if necessary.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 263,
              "insert": 266,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 175,
            "docLength": null
          },
          {
            "id": "7a579274-fe19-a5bf-ea47-f01eccd1c4a6",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Tests various components of a RoboCompKinovaArm and associated classes, including TPose, TGripper, TJoint, TJoints, AxisParams, ButtonParams, and TData.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 470,
              "insert": 471,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "e9fa5b70-6390-df8d-b647-fa4701f00274",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Determines the position of a cup using computer vision and kinematic information from a PyBullet simulation. It calculates the difference between the cup's position in the simulation and its actual position in the environment, and adjusts the cup's position to minimize this difference.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The difference between the position of the cup and the position of the kinova at a specific time, calculated using the AAMED algorithm."
            },
            "name": "correctCupPosition",
            "location": {
              "start": 487,
              "insert": 488,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 55,
            "docLength": null
          },
          {
            "id": "4f0ff7b6-05d9-af8e-2946-0710617f9ed6",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Initializes the toolbox of a SpecificWorker, setting up the kinematic chain, end-effector pose, and desired goal pose. It also sets the time step and sleeps for 5 seconds to allow the environment to stabilize.",
            "params": [],
            "returns": null,
            "name": "initialize_toolbox",
            "location": {
              "start": 550,
              "insert": 552,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 37,
            "docLength": null
          },
          {
            "id": "91ea4d88-907d-99bd-8f46-e304a56a0489",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Computes the joint angles for a specific robot using its kinematic structure and control parameters. It updates the joint angles based on the error between the desired and actual positions, and implements velocity limits to ensure safe motion.",
            "params": [],
            "returns": null,
            "name": "toolbox_compute",
            "location": {
              "start": 605,
              "insert": 607,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 58,
            "docLength": null
          },
          {
            "id": "cc20ce0e-2f18-44b0-024d-889a84e8d56c",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Reads the state of a camera attached to a robot, including its intrinsic parameters and rotation, and generates a 2D image from the perspective of the camera at a fixed time step.",
            "params": [],
            "returns": {
              "type_name": "2D",
              "description": "An OpenCV image with a size of (1280, 720) and a BGR color space."
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 742,
              "insert": 744,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 40,
            "docLength": null
          },
          {
            "id": "7cf571f6-96bb-ccbe-6345-372649fcf985",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Reads camera data from Kinova and normalizes the depth image, appending it to a list called `depthKinova`. It also reads the color image and appends it to a list called `colorKinova`.",
            "params": [],
            "returns": {
              "type_name": "Boolean",
              "description": "True if successful, otherwise False."
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 804,
              "insert": 805,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 19,
            "docLength": null
          },
          {
            "id": "900bf462-3a80-c698-544b-3812a6c6b145",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Computes and prints the angles of the joints of a Kinova robot in radians, using the `deg2rad` and `rad2deg` functions from NumPy.",
            "params": [],
            "returns": null,
            "name": "showKinovaAngles",
            "location": {
              "start": 829,
              "insert": 830,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "b4df06c0-44e9-25aa-0e49-bfa854296ba3",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Controls the velocity of joints in a robot using external velocities provided by an external joint controller. It converts the external velocities from degrees per second to radians per second and sets them as target velocities for the robot's joint motor control.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 840,
              "insert": 841,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "bf3b7073-111f-8981-2141-cee65018ee41",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Updates the joint velocities of a robot using PyBullet's `setJointMotorControl2` method, based on the `targetVelocities` array passed as an argument.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 850,
              "insert": 852,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ea0244c6-c678-8aa2-474e-01bd31ab8a9d",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Continuously reads joints and gripper states from a Kinova arm proxy and scales the gripper distance by 80% while sleeping for 0.05 seconds between each reading to smooth out the data flow.",
            "params": [],
            "returns": null,
            "name": "readDataFromProxy",
            "location": {
              "start": 857,
              "insert": 858,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "64991f30-9a94-0ea3-8a4e-042831b3ce51",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Sets the joint angles for a Kinova arm based on angles provided, rounds the values to the nearest degree, and passes them to the `moveJointsWithAngle` method of the `kinovaarm_proxy` object.",
            "params": [
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "2D array representing the angles in radians to move the Kinova arm joints."
              }
            ],
            "returns": null,
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 866,
              "insert": 867,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "110363ad-0071-8f84-f141-6fafb16fd4fb",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Determines joint speeds based on gains and moves the Kinova arm with those speeds using the `moveJointsWithSpeed` method of a proxy object.",
            "params": [],
            "returns": null,
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 871,
              "insert": 873,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "7e7e88ee-bfd3-a1b1-5d49-2c91e92198f2",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Updates the joint angle gains for a SpecificWorker instance based on the difference between its current pose and target angles, and prints the gains and error messages to console.",
            "params": [],
            "returns": null,
            "name": "updateGains",
            "location": {
              "start": 884,
              "insert": 885,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "33f5f8f4-1d8d-69a6-d144-816a66fd1394",
            "ancestors": [
              "122cfec6-2bbe-cd8e-9449-ead8d8ea779a"
            ],
            "description": "Manages data from a joystick and sends it to a worker robot, updating the robot's position and orientation based on the received data.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Passed the joystick data as a Python dictionary containing tuples representing the values for each axis and button."
              }
            ],
            "returns": null,
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 913,
              "insert": 914,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An interface `ifaces.RoboCompKinovaArm` that provides methods for interacting with a Kinova Gen3 robot arm, including getting the current pose and gripper state, setting the center of tool, opening and closing the gripper, and moving joints to specific angles or at a specified speed. The code also implements these methods and adds some additional functionality, such as a `buclePrueba` method that demonstrates how to use the `get_pose` and `move_joints_to` methods of the Kinova arm. Overall, the code provides a basic interface for interacting with a Kinova Gen3 robot arm in Python.",
        "items": [
          {
            "id": "24e16778-a09e-aba3-f444-b111e77b1ea0",
            "ancestors": [],
            "description": "Manages a robotic arm and gripper, controlling their movements and joint angles through method calls. It also provides methods for getting joint states, gripper state, and pose information.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, which represents the time interval for the timer in milliseconds."
              },
              {
                "name": "startup_check",
                "type_name": "inline",
                "description": "Defined as a function that tests various aspects of the `RoboCompKinovaArm` interface, including its pose and gripper state."
              },
              {
                "name": "kinova",
                "type_name": "ifacesRoboCompKinovaArmTKinova",
                "description": "Used to interact with the Kinova Gen3 robot arm."
              },
              {
                "name": "flag",
                "type_name": "int",
                "description": "Initialized to False. It is used to indicate whether the startup check has been performed or not."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a call to the `compute` method at regular intervals (period) using the `timeout` method."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "Called when the timer timeout occurs. It initializes variables, gets joints and gripper state from the Kinova arm, and then computes the final pose of the arm based on the joint angles and gripper distance."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "Initialized with joint positions, velocities, and forces from the KinovaGen3 arm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "A representation of the gripper state of the Kinova arm."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 115,
            "docLength": null
          },
          {
            "id": "46026663-0642-68b0-4e47-0df8b45a655b",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Initializes an instance of SpecificWorker, setting up its internal state and starting a timer for periodic computation.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map proxy names to their corresponding kinova objects, allowing for easy interaction with multiple kinova devices through a single interface."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to determine whether to run the `startup_check()` method during initialization."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "c0319a6c-381b-f790-a240-f8be36357038",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Sets parameters for an instance of a `GenericWorker` subclass, `SpecificWorker`. It returns `True` upon successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Used to set parameters for the function."
              }
            ],
            "returns": {
              "type_name": "OptionalTrue",
              "description": "A value that may or may not be present and can have any value."
            },
            "name": "setParams",
            "location": {
              "start": 59,
              "insert": 65,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "8831fd58-2d0f-c7ba-eb4e-669d8da08f4a",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Computes and returns joints and gripper states for an arm robot based on sensor readings.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTJoints",
              "description": "A list of TJoint objects containing information about the robot's joints, followed by a TGripper object containing information about the gripper's state."
            },
            "name": "compute",
            "location": {
              "start": 68,
              "insert": 70,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 28,
            "docLength": null
          },
          {
            "id": "a43cec88-b410-0b98-2347-6a8e12ea0adf",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Tests various aspects of the `ifaces.RoboCompKinovaArm` interface and quits the application after 200 milliseconds.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 98,
              "insert": 99,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "ec921b6f-39a6-5184-eb4b-8194fb82d428",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Is a method of the `SpecificWorker` class that closes the gripper of a Kinova arm at a speed determined by the `close_gripper_speed()` method of the kinova object.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 113,
              "insert": 118,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "31d55e30-7098-7787-cb44-6c9c12419df0",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Retrieves the center of a tool relative to a Kinova Arm, using the arm's pose as reference.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to specify the reference frame for the tool center coordinates."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A pose object representing the center of the tool referenced to the arm."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "242c02ff-b58b-84a0-7c42-004e7b0e519b",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Opens the gripper of a Kinova arm, a type of robotic arm, using the `kinova.open_gripper_speed()` method.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 139,
              "insert": 144,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ab7ceb05-3753-49be-6a49-67f718326591",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Sets the center of a tool referenced to a pose in the KinovaArm framework.",
            "params": [
              {
                "name": "pose",
                "type_name": "kinovaPose",
                "description": "Used to set the center of the tool relative to the arm's end effector."
              },
              {
                "name": "referencedTo",
                "type_name": "object",
                "description": "Used to reference the coordinate system that the tool should be set to."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 156,
              "insert": 161,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "02972692-68d4-5e86-454f-674d81cb8aeb",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Moves the joints of a Kinova arm to specified angles using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "Angle",
                "description": "Used to set the joint angles for movement of the Kinova arm."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 172,
              "insert": 173,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "80f67422-b2bd-2dbe-644b-c23e5a54ce3f",
            "ancestors": [
              "24e16778-a09e-aba3-f444-b111e77b1ea0"
            ],
            "description": "Retrieves and stores the current pose state of an object using the `kinova.get_pose()` method, which is a part of the `GenericWorker` class that the function inherits from.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]