[
  {
    "name": "specificworker.py",
    "path": "components/camera_kinova/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a simple camera module for Robocomp, which is a software framework for robotics and computer vision tasks. The module provides two queues: color_queue and depth_queue, where images and depth maps are stored respectively. The code also defines three methods: startup_check, video_color_thread, and video_depth_thread, which handle the startup of the camera, color image processing, and depth image processing threads.\nThe code also implements the getAll, getDepth, and getImage methods from the CameraRGBDSimple interface, which allow accessing the images and depth maps stored in the queues. The implementation uses Python's threading module to create separate threads for the color and depth image processing, and the QThreadPool class to manage the execution of these threads.",
        "items": [
          {
            "id": "0a7c820c-0c8f-a08a-8845-37a61b4c82f0",
            "ancestors": [],
            "description": "Manages two video streams (color and depth) from a robotic camera, queues the frames for processing, and provides methods to retrieve the frames as `TImage` or `TDepth` objects.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "100, which represents the interval between consecutive updates of the worker's internal state."
              },
              {
                "name": "hide",
                "type_name": "instance",
                "description": "Used to hide or show the worker's GUI element when it is not needed, which helps improve performance by reducing flickering and minimizing CPU usage."
              },
              {
                "name": "depth_queue",
                "type_name": "queueQueue",
                "description": "Used to store depth images read from a video capture device."
              },
              {
                "name": "color_queue",
                "type_name": "queueQueue",
                "description": "Used to store the color frames read from the video capture devices."
              },
              {
                "name": "color_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture color video streams."
              },
              {
                "name": "depth_stream",
                "type_name": "cv2VideoCapture",
                "description": "Used to capture depth stream from a RTSP source."
              },
              {
                "name": "color_thread",
                "type_name": "threadingThread",
                "description": "Used to represent a thread that runs in parallel with the main thread of the program, handling the color stream of the camera."
              },
              {
                "name": "video_color_thread",
                "type_name": "threadingThread",
                "description": "Responsible for processing the color stream of the camera in a separate thread."
              },
              {
                "name": "depth_thread",
                "type_name": "threadingThread",
                "description": "Used to start a separate thread for processing depth images."
              },
              {
                "name": "video_depth_thread",
                "type_name": "threadingThread",
                "description": "Used to run a separate thread for reading depth frames from the camera."
              },
              {
                "name": "startup_check",
                "type_name": "algorithm",
                "description": "Called when the object is initialized. It tests if the RoboCompCameraRGBDSimple interfaces are available."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a function call every `Period` milliseconds to update the worker's state."
              },
              {
                "name": "compute",
                "type_name": "Python",
                "description": "Defined as a slot function that is called by the timer. It performs no operation for now."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 39,
              "insert": 40,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 136,
            "docLength": null
          },
          {
            "id": "a9028f1a-0e59-549d-c446-43861bb6d181",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Initializes member variables and starts two threads to handle video streams for color and depth sensors, respectively.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to store a mapping of proxy servers for each worker instance, allowing for flexible configuration of proxy servers for different workers."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to check if the worker has started correctly or not."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 40,
              "insert": 41,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 32,
            "docLength": null
          },
          {
            "id": "f4f54540-8f58-0384-9e47-9e50e663026b",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Processes two image-like objects, `pix_color` and `pix_depth`, scaling them to the size of the widgets `ui.color` and `ui.depth`. If the object is hidden, it returns `True`.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 86,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e61b1b13-c954-3aa2-a34d-23b9ea374543",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from an opened camera and adds them to a queue for processing, while handling exceptions and keyboard interrupts.",
            "params": [
              {
                "name": "cap",
                "type_name": "Capture",
                "description": "Represented by the object `cap`."
              },
              {
                "name": "inqueue",
                "type_name": "Queue",
                "description": "Used to store the frames read from the video capture device during the video processing thread execution."
              }
            ],
            "returns": null,
            "name": "video_color_thread",
            "location": {
              "start": 108,
              "insert": 109,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "efac0efa-fda3-7487-6e40-afe9f25d2855",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Reads frames from a given video capture object `cap` and enqueues them in a queue `inqueue`. It repeatedly reads frames until the `cap` is closed, then releases the resource.",
            "params": [
              {
                "name": "cap",
                "type_name": "OpenCVVideoCapture",
                "description": "Used to capture video frames from a video file or device."
              },
              {
                "name": "inqueue",
                "type_name": "queueQueue",
                "description": "Used to store frames read from the video capture device."
              }
            ],
            "returns": null,
            "name": "video_depth_thread",
            "location": {
              "start": 126,
              "insert": 128,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "bf555c6c-48eb-b1bb-b844-94a5f66a3632",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Tests various components of a class called `ifaces.RoboCompCameraRGBDSimple`. These include the `TImage`, `TDepth`, and `TRGBD` classes, as well as the `QApplication.instance().quit()` method.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 145,
              "insert": 146,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "af7fdef5-f56b-93a6-4642-3eccc9b6d21c",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves RGB-D data from a camera and stores it in a queue for processing. It returns the entire RGB-D data or `None` if the queue is empty.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "Used to retrieve RGB-D data from a RoboComp camera."
              }
            ],
            "returns": {
              "type_name": "RoboCompCameraRGBDSimple",
              "description": "A RGB-D image representing the depth and color information of a camera."
            },
            "name": "CameraRGBDSimple_getAll",
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "f6cae19f-c8e7-aeae-4247-463fa32264ff",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves depth data from a queue and returns it in the form of a `TDepth` object with dimensions and depth value.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of the RoboCompCameraRGBDSimple class, which represents a camera for depth sensing."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTDepth",
              "description": "A struct containing height, width and depth information of a image."
            },
            "name": "CameraRGBDSimple_getDepth",
            "location": {
              "start": 179,
              "insert": 180,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "e08fd8a1-3807-47af-684b-32c2b38826d5",
            "ancestors": [
              "0a7c820c-0c8f-a08a-8845-37a61b4c82f0"
            ],
            "description": "Retrieves an image from a color queue and returns a `TImage` object with the appropriate dimensions and contents.",
            "params": [
              {
                "name": "camera",
                "type_name": "ifacesRoboCompCameraRGBDSimple",
                "description": "An instance of a class representing a camera device."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompCameraRGBDSimpleTImage",
              "description": "A struct containing height, width, depth and image values of a RGB-D camera frame."
            },
            "name": "CameraRGBDSimple_getImage",
            "location": {
              "start": 193,
              "insert": 194,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "pybullet_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "a robot control system that can be controlled using a serial port. It uses the `robot2` library to interact with the robot and receives input from the user through a serial port. The code processes user inputs and sends corresponding commands to the robot's motors and gripper, as well as adjusting the robot's orientation based on user input. The system has four modes of operation:\n\n* Mode 1: Moves the robot to a predefined position using the `move_mode` command and the `X`, `Y`, and `Z` axes.\n* Mode 2: Adjusts the robot's orientation using the `home` command and the `gripper` axis.\n* Mode 3: Moves the robot to a predefined position using the `move_mode` command and the `X`, `Y`, and `Z` axes, but with a different speed than in mode 1.\n* Mode 4: Adjusts the robot's orientation using the `home` command and the `gripper` axis, but with a different speed than in mode 2.\n\nThe code also includes error handling to ensure that the robot moves smoothly and safely.",
        "items": [
          {
            "id": "b686e38b-8a44-a0ae-154d-f9fb6f9325ed",
            "ancestors": [],
            "description": "Is a Python script that implements a robot's specific work instructions, such as moving to specific positions or orientations and performing specific actions based on buttons pressed by an operator.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "enumeration",
                "description": "Used to specify the period of the robot's movements based on the move mode selected by the user, with a possible value of either `1`, `2`, `3`, `4`, or `5`."
              },
              {
                "name": "rgb",
                "type_name": "3element",
                "description": "Used to represent the current position, orientation, and gripper state of a robot."
              },
              {
                "name": "timestamp",
                "type_name": "int",
                "description": "Used to store the timestamp of when the worker was created or updated."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "4 by default, indicating that the worker will check for startup-related data on every iteration of the main loop."
              },
              {
                "name": "physicsClient",
                "type_name": "int",
                "description": "4, indicating that the worker is a physics client with 4 axes."
              },
              {
                "name": "plane",
                "type_name": "instance",
                "description": "A plane object that stores the orientation of the worker's end effector in 3D space relative to the robot's base."
              },
              {
                "name": "table_id",
                "type_name": "str",
                "description": "Used to identify the worker's table in a specific environment."
              },
              {
                "name": "robot_urdf",
                "type_name": "obb",
                "description": "Used to store the robot's URDF file, which defines the robot's geometry and kinematics."
              },
              {
                "name": "robot_launch_pos",
                "type_name": "tuple",
                "description": "Used to store the position of the robot at the beginning of a launch."
              },
              {
                "name": "robot_launch_orien",
                "type_name": "numpyarray",
                "description": "Used to store the orientation of the robot in a specific launch configuration."
              },
              {
                "name": "end_effector_link_index",
                "type_name": "int",
                "description": "0-based indexing for the end effector link of the robot, indicating which link the end effector is attached to."
              },
              {
                "name": "robot_id",
                "type_name": "int",
                "description": "0-based index of the specific worker, indicating which robot it belongs to."
              },
              {
                "name": "home_angles",
                "type_name": "list",
                "description": "A set of angles representing the home positions for each axis of the robot, used to move the robot to its starting position when the mode is changed."
              },
              {
                "name": "observation_angles",
                "type_name": "ndarray",
                "description": "2D, representing the orientation angles of the robot's end effector in the world frame, as observed by a set of cameras."
              },
              {
                "name": "square",
                "type_name": "instance",
                "description": "Used to store the square distance between the worker's current position and its target position."
              },
              {
                "name": "cylinderId",
                "type_name": "str",
                "description": "5-digit unique identifier for each cylinder in a specific worker's workcell."
              },
              {
                "name": "threadKinovaAngles",
                "type_name": "tuple",
                "description": "4-element list of angles representing the target positions of the robot's end effector for each axis (X, Y, Z, and gripper) in the Kinova manipulator."
              },
              {
                "name": "readDataFromProxy",
                "type_name": "instance",
                "description": "A method that reads data from a proxy server and updates the robot's position, orientation, and move mode based on the received data."
              },
              {
                "name": "colorKinova",
                "type_name": "str",
                "description": "A reference to a color name specific to Kinova manipulators, used for visual identification of the robot's end effector."
              },
              {
                "name": "depthKinova",
                "type_name": "int",
                "description": "0 by default, indicating that the worker is a Kinova Robot."
              },
              {
                "name": "target_angles",
                "type_name": "list",
                "description": "Used to store the target angles for each axis (X, Y, Z, and gripper) as Euler angles in radians."
              },
              {
                "name": "target_position",
                "type_name": "list",
                "description": "A target position for the robot to reach, which can be modified based on the axis values received from the robot's interface."
              },
              {
                "name": "target_orientation",
                "type_name": "3D",
                "description": "Used to store the target orientation of the robot, which represents the desired orientation of the robot's end effector. It is updated based on the values received from the sensors and actuators of the robot."
              },
              {
                "name": "target_velocities",
                "type_name": "ndarray",
                "description": "5-dimensional, where each element represents the target velocity for a specific axis (X, Y, or Z) and gripper. It stores the desired velocities for the robot to move its end effector to the desired position."
              },
              {
                "name": "joy_selected_joint",
                "type_name": "str",
                "description": "Used to store the selected joint name from the joystick input. It stores the name of the joint that was selected by the user in the current mode (move, home, or configure)."
              },
              {
                "name": "move_mode",
                "type_name": "int",
                "description": "0 by default, which determines the move mode of the robot (0 - home, 1 - move, 2 - turn, 3 - tool change, 4 - teach)."
              },
              {
                "name": "ext_joints",
                "type_name": "list",
                "description": "A list of joints that are extended beyond their usual range of motion to accommodate external devices such as grippers or sensors."
              },
              {
                "name": "kinovaarm_proxy",
                "type_name": "object",
                "description": "Used to store the KINOVA arm's proxy, which is a Python object that represents the robot's end effector."
              },
              {
                "name": "ext_gripper",
                "type_name": "instance",
                "description": "Not described in the provided code snippet. Its purpose or value is unknown without additional context or information."
              },
              {
                "name": "timer",
                "type_name": "int",
                "description": "0 by default, representing the number of milliseconds to wait before updating the robot's position and orientation based on the received data from the robot."
              },
              {
                "name": "compute",
                "type_name": "Callable",
                "description": "Responsible for computing the robot's new position based on the received data."
              },
              {
                "name": "joint_speeds",
                "type_name": "ndarray",
                "description": "4D, representing the joint speeds for each axis (X, Y, Z, and gripper) as floating-point values between 0 and 1."
              },
              {
                "name": "speeds",
                "type_name": "int",
                "description": "Used to store the speed values for each axis of movement, which are used to control the robot's movements."
              },
              {
                "name": "angles",
                "type_name": "list",
                "description": "3-element list containing values for X, Y, and Z axes representing robot's current angle relative to its home position."
              },
              {
                "name": "gains",
                "type_name": "list",
                "description": "Used to store the gains for each axis of movement, which determine how quickly or slowly the robot moves when a button is pressed."
              },
              {
                "name": "posesTimes",
                "type_name": "ndarray",
                "description": "3D array of shape (N, 3) where N is the number of poses in the sequence, representing the robot's position and orientation at each pose."
              },
              {
                "name": "poses",
                "type_name": "ndarray",
                "description": "3D array representing the current pose of the robot (position and orientation) as a set of 3 values for each axis (X, Y, Z) or gripper."
              },
              {
                "name": "calibrator",
                "type_name": "instance",
                "description": "Responsible for handling calibration data and updating the robot's position and orientation based on that data."
              },
              {
                "name": "cameraKinovaTimer",
                "type_name": "int",
                "description": "0, indicating that the worker uses a camera from Kinova, which is a company specialized in robotics and automation."
              },
              {
                "name": "readKinovaCamera",
                "type_name": "method",
                "description": "Used to read the camera data from the Kinova robot's built-in camera. It takes no arguments and returns a dictionary containing the camera data."
              },
              {
                "name": "showKinovaStateTimer",
                "type_name": "int",
                "description": "4 by default, indicating that the worker will show the Kinova state timer every 4 seconds when running in Move mode."
              },
              {
                "name": "showKinovaAngles",
                "type_name": "Optionalfloat",
                "description": "Used to display the angles of the Kinova robot's joints, which are calculated based on the current position and orientation of the end effector."
              },
              {
                "name": "gainsTimer",
                "type_name": "float",
                "description": "Used to control the speed of the robot's movement based on the timer value, with higher values resulting in slower movements."
              },
              {
                "name": "updateGains",
                "type_name": "instance",
                "description": "Used to update the gains of the robot's joints based on the current position and orientation of the robot, as well as the position of the end effector."
              },
              {
                "name": "aamed",
                "type_name": "attribute",
                "description": "Used to store the name of the action mode that was active when the worker started its task."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 66,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 760,
            "docLength": null
          },
          {
            "id": "69adaf86-0f07-889e-b342-62a11174e091",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Of `SpecificWorker` initializes various kinova arm properties, timers and variables for controlling the kinova arm's movement based on a calibration sequence.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map Kinova's joint names to OpenRTM's joint names. It allows to customize the mapping between the two different joint spaces."
              },
              {
                "name": "startup_check",
                "type_name": "int",
                "description": "5 by default. It controls whether to run the robot's home position and initial angles computation during the startup process."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 67,
              "insert": 68,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 132,
            "docLength": null
          },
          {
            "id": "19d5a863-ea00-82a7-644f-f2b4cc220f77",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Sets parameters for an instance of the `SpecificWorker` class, which inherits from `GenericWorker`. The function returns `True` upon successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "object",
                "description": "Passed in to set instance parameters."
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "True when successful and an exception otherwise."
            },
            "name": "setParams",
            "location": {
              "start": 236,
              "insert": 242,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "1cfb7a36-360f-b387-d64a-567613ffa9c9",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Performs computation for a specific robot and moves it to the desired position using PyBullet, while also tracking the time elapsed since initialization.",
            "params": [],
            "returns": null,
            "name": "compute",
            "location": {
              "start": 245,
              "insert": 248,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 185,
            "docLength": null
          },
          {
            "id": "b17207d8-e94a-e28b-ca4f-6d600484a04c",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Tests various components and methods of the `ifaces` module, including `RoboCompKinovaArm`, `TGripper`, `TJoint`, `TJoints`, `RoboCompJoystickAdapter`, and `AxisParams`.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 471,
              "insert": 472,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "271c4668-1202-d08b-4c48-c7d45ce118e8",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Determines the difference between the position of a target object detected by the camera and the corresponding position of the same object in a pre-defined kinematic model. It then adjusts the base position and orientation of the robot to minimize the difference.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "The distance between the target position and the estimated position of the kinova marker."
            },
            "name": "correctTargetPosition",
            "location": {
              "start": 488,
              "insert": 491,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 38,
            "docLength": null
          },
          {
            "id": "d6e37669-a722-288d-4d45-11f6017edd88",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Sets up the toolbox environment, including adding grippers, end-effector, and a cylinder object, as well as defining the desired end-effector pose. It also sets parameters such as the step time and the arrived flag to False.",
            "params": [],
            "returns": null,
            "name": "initialize_toolbox",
            "location": {
              "start": 550,
              "insert": 552,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 39,
            "docLength": null
          },
          {
            "id": "684a923c-7660-61a9-6b40-4b75dd0a4204",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Computes the worker's joint velocities based on its target position and orientation, using a PID controller to regulate its motion. It also updates the worker's ee axes and the environment's time step.",
            "params": [],
            "returns": null,
            "name": "toolbox_compute",
            "location": {
              "start": 611,
              "insert": 613,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 59,
            "docLength": null
          },
          {
            "id": "977937af-ed16-84bd-f942-b7ff3e1091d6",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Captures and processes images from a camera using PyBullet, a Python library for robotics and computer vision. It retrieves camera intrinsic parameters, projects the image, rotates the view matrix, and displays the resulting image in an image window.",
            "params": [],
            "returns": {
              "type_name": "2D",
              "description": "A grayscale image of the camera sensor."
            },
            "name": "read_camera_fixed",
            "location": {
              "start": 752,
              "insert": 753,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 44,
            "docLength": null
          },
          {
            "id": "d872d076-fd7e-ebb5-784e-4cd75a328fe0",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Retrieves camera data from Kinova and processes it by normalizing depth images and storing them along with livetime values.",
            "params": [],
            "returns": {
              "type_name": "True",
              "description": "1 when the function execution is successful, and False otherwise."
            },
            "name": "readKinovaCamera",
            "location": {
              "start": 823,
              "insert": 824,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "a8cb7fe5-2de5-2fab-354b-a500dd076473",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Calculates and prints the angles of the robot's joints using the `ext_joints` attribute, and also computes and prints the difference between the angles and the corresponding values from PyBullet.",
            "params": [],
            "returns": null,
            "name": "showKinovaAngles",
            "location": {
              "start": 838,
              "insert": 839,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "7f2caf57-ce9b-e08a-e44f-5bfc9f59e8c8",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Adjusts the velocities of a robot's joints based on external velocity commands, converts the velocities to radians, and sets the motor control targets for each joint using the PyBullet library.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithExternalVel",
            "location": {
              "start": 848,
              "insert": 849,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "7d484f3f-3323-14b1-384b-e308c6f9b28c",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Sets the velocities of joints in a robot using PyBullet's `setJointMotorControl2` method. It loops through the robot's joints and sets their velocities to the target velocities provided as an argument.",
            "params": [],
            "returns": null,
            "name": "movePybulletWithToolbox",
            "location": {
              "start": 858,
              "insert": 860,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "bb281131-ff06-daa7-3e4b-a5ac47c93e6a",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Obtains joint and gripper states from an external proxy, scales down the gripper distance by 80%, and sleeps for 0.05 seconds before repeating the process.",
            "params": [],
            "returns": null,
            "name": "readDataFromProxy",
            "location": {
              "start": 865,
              "insert": 866,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "e8338b86-6508-c994-0346-54d658dd0195",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Updates joint angles for a Kinova arm based on angles passed as argument, and then calls the `moveJointsWithAngle` method of the `kinovaarm_proxy` object to move the arm with the new angles.",
            "params": [
              {
                "name": "angles",
                "type_name": "ndarray",
                "description": "360-degree angle values represented as radians."
              }
            ],
            "returns": null,
            "name": "moveKinovaWithAngles",
            "location": {
              "start": 874,
              "insert": 875,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "2734ec4f-f231-f7bf-4844-4ab1ec81861c",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Controls the speed of robot joints based on error angles and gains, then moves the joints with those speeds using the `kinovaarm_proxy`.",
            "params": [],
            "returns": null,
            "name": "moveKinovaWithSpeeds",
            "location": {
              "start": 879,
              "insert": 881,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "911fcf2b-2ae6-a0b7-ef49-cbac0632068c",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Updates the gains for each joint in the robot's arm based on the difference between the current pose and the desired pose, with a maximum update rate of 0.2 degrees per iteration.",
            "params": [],
            "returns": null,
            "name": "updateGains",
            "location": {
              "start": 899,
              "insert": 900,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "f9b277d1-e114-58b1-ef43-22247a1b25e7",
            "ancestors": [
              "b686e38b-8a44-a0ae-154d-f9fb6f9325ed"
            ],
            "description": "Receives data from a joystick and updates the position, orientation, and mode of a robot based on the received data.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Passed data from a joystick, containing axes and buttons values."
              }
            ],
            "returns": null,
            "name": "JoystickAdapter_sendData",
            "location": {
              "start": 927,
              "insert": 928,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 112,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "specificworker.py",
    "path": "components/kinova_controller/src/specificworker.py",
    "content": {
      "structured": {
        "description": "An interface `ifaces.RoboCompKinovaArm` that provides several methods for interacting with a Robocomp Kinova arm, including `startup`, `get_pose`, `get_gripper_state`, `move_joints_with_speed`, and `set_center_of_tool`. The code also implements these methods and provides additional functionality such as `buclePrueba` which demonstrates how to use the `get_pose` method to retrieve the current state of the arm and move it to a new position. Overall, the code provides a way for developers to interact with a Robocomp Kinova arm using Python.",
        "items": [
          {
            "id": "33f83743-73ae-b295-0445-708a86481b58",
            "ancestors": [],
            "description": "Manages a robotic arm's joints and gripper, providing methods for computing the arm's pose, getting the joints and gripper state, and moving the joints with speed or angle.",
            "attributes": [
              {
                "name": "Period",
                "type_name": "int",
                "description": "1 by default, indicating the interval between timer timeouts for computing joint positions."
              },
              {
                "name": "startup_check",
                "type_name": "unbound",
                "description": "Called when the worker is initialized. It performs some testing and checks to ensure that the robotic arm is working correctly."
              },
              {
                "name": "kinova",
                "type_name": "ifacesRoboCompKinovaArm",
                "description": "A reference to an instance of the KinovaGen3 class, which provides access to the RoboCompKinovaArm API."
              },
              {
                "name": "flag",
                "type_name": "bool",
                "description": "Used to indicate when the worker should perform its job."
              },
              {
                "name": "timer",
                "type_name": "QTimer",
                "description": "Used to schedule a callable object at a specific interval, in this case, the function `compute`."
              },
              {
                "name": "compute",
                "type_name": "QtCoreSlot",
                "description": "A method that runs periodically to retrieve joint information from the Kinova arm."
              },
              {
                "name": "joints",
                "type_name": "ifacesRoboCompKinovaArmTJoints",
                "description": "A list of objects representing the joint states of the Kinova arm."
              },
              {
                "name": "gripper",
                "type_name": "ifacesRoboCompKinovaArmTGripper",
                "description": "A representation of the gripper state of the RoboCompKinovaArm."
              }
            ],
            "name": "SpecificWorker",
            "location": {
              "start": 42,
              "insert": 43,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 112,
            "docLength": null
          },
          {
            "id": "a54b7c1e-4f11-7bb1-8b42-eead5f562197",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Initializes an instance of the SpecificWorker class by setting up its properties and event handlers. It creates a KinovaGen3 object, sets a flag to False, and starts a timer to trigger computation every `Period` seconds.",
            "params": [
              {
                "name": "proxy_map",
                "type_name": "dict",
                "description": "Used to map proxy objects to their corresponding worker objects."
              },
              {
                "name": "startup_check",
                "type_name": "bool",
                "description": "Used to enable or disable a check when the SpecificWorker initializes."
              }
            ],
            "returns": null,
            "name": "__init__",
            "location": {
              "start": 43,
              "insert": 44,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "66eeb551-e7a1-2cbd-f545-ccdaf5390ef3",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets parameters for an instance of the `SpecificWorker` class, which inherits from `GenericWorker`. It returns `True` indicating successful parameter setting.",
            "params": [
              {
                "name": "params",
                "type_name": "objectinstance",
                "description": "Passed to the method for modification or alteration."
              }
            ],
            "returns": {
              "type_name": "True",
              "description": "100% true."
            },
            "name": "setParams",
            "location": {
              "start": 59,
              "insert": 65,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f3cb01cb-8c05-e8a9-0a4d-ad750e3d481c",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and updates the positions, velocities, and forces of joints and gripper of a Robocomp Kinova arm based on sensor readings and returns True if successful.",
            "params": [],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTGripper",
              "description": "A struct consisting of distance and timestamp, and another value of type ifacesRoboCompKinovaArmTJoints which is also a struct consisting of joint angles, velocities, forces, and timestamp."
            },
            "name": "compute",
            "location": {
              "start": 68,
              "insert": 71,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "a05d1afd-2aa2-6a87-3e46-22fb2506f129",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Tests the RoboCompKinovaArm TPose and TGripper classes, and then calls QTimer.singleShot(200, QApplication.instance().quit) to quit the application after a delay of 200 milliseconds.",
            "params": [],
            "returns": null,
            "name": "startup_check",
            "location": {
              "start": 98,
              "insert": 99,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "01df8849-6ec2-0789-564d-0e0e573b4987",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Closes the gripper of a robotic arm with the `kinova` module.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_closeGripper",
            "location": {
              "start": 113,
              "insert": 118,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "30554e28-9096-3f80-3346-24812daec6f0",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Computes and returns the center of a tool referenced to a specific interface, using the `RoboCompKinovaArm` interface.",
            "params": [
              {
                "name": "referencedTo",
                "type_name": "ifacesRoboCompKinovaArmTPose",
                "description": "Used to specify the reference frame for the tool center point calculation."
              }
            ],
            "returns": {
              "type_name": "ifacesRoboCompKinovaArmTPose",
              "description": "A Pose object representing the center of the tool referenced to the arm."
            },
            "name": "KinovaArm_getCenterOfTool",
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "ee72a45f-0dc9-1f83-2c4b-1f36ab1420c1",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Opens the gripper of a Kinova arm, a robotic arm used for material handling and manipulation tasks, using the `kinova.open_gripper_speed()` method.",
            "params": [],
            "returns": null,
            "name": "KinovaArm_openGripper",
            "location": {
              "start": 139,
              "insert": 144,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "90e4fc0f-8760-5b9e-b846-4c49ef362865",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Sets the center of a tool referenced to a given pose within a specific worker class, inheriting from `GenericWorker`.",
            "params": [
              {
                "name": "pose",
                "type_name": "kinovageometryPose",
                "description": "Used to specify the position and orientation of the tool relative to the arm."
              },
              {
                "name": "referencedTo",
                "type_name": "KinovaArm_ReferencePoint",
                "description": "Used to specify the reference point for the tool center coordinate calculation."
              }
            ],
            "returns": null,
            "name": "KinovaArm_setCenterOfTool",
            "location": {
              "start": 156,
              "insert": 161,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7960f2a5-1f08-9d9e-f640-ac6e796a90e5",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Moves the joints of a robot arm to specified angles, using the `kinova.move_joints_to()` method.",
            "params": [
              {
                "name": "angles",
                "type_name": "angles",
                "description": "A joint angle representation containing multiple angles for different joints of the robot arm to move to."
              }
            ],
            "returns": null,
            "name": "KinovaArm_moveJointsWithAngle",
            "location": {
              "start": 172,
              "insert": 173,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "74e70278-a86d-1591-4648-0387e24923b8",
            "ancestors": [
              "33f83743-73ae-b295-0445-708a86481b58"
            ],
            "description": "Retrieves the current pose of an object using the `kinova.get_pose()` method and stores it in a variable called `state`.",
            "params": [],
            "returns": null,
            "name": "buclePrueba",
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 12,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]