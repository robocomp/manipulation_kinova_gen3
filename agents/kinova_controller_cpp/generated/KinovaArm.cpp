//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `KinovaArm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <KinovaArm.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_ids[2] =
{
    "::Ice::Object",
    "::RoboCompKinovaArm::KinovaArm"
};
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_ops[] =
{
    "closeGripper",
    "getCenterOfTool",
    "getGripperState",
    "getJointsState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "moveJointsWithAngle",
    "moveJointsWithSpeed",
    "openGripper",
    "setCenterOfTool"
};
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name = "closeGripper";
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name = "getCenterOfTool";
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name = "getGripperState";
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name = "getJointsState";
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithAngle_name = "moveJointsWithAngle";
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithSpeed_name = "moveJointsWithSpeed";
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_openGripper_name = "openGripper";
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_setCenterOfTool_name = "setCenterOfTool";

}

bool
RoboCompKinovaArm::KinovaArm::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompKinovaArm_KinovaArm_ids, iceC_RoboCompKinovaArm_KinovaArm_ids + 2, s);
}

::std::vector<::std::string>
RoboCompKinovaArm::KinovaArm::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompKinovaArm_KinovaArm_ids[0], &iceC_RoboCompKinovaArm_KinovaArm_ids[2]);
}

::std::string
RoboCompKinovaArm::KinovaArm::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompKinovaArm::KinovaArm::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompKinovaArm::KinovaArm";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_closeGripper(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->closeGripper(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_getCenterOfTool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ArmJoints iceP_referencedTo;
    istr->readAll(iceP_referencedTo);
    inS.endReadParams();
    TPose ret = this->getCenterOfTool(iceP_referencedTo, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_getGripperState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    TGripper ret = this->getGripperState(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_getJointsState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    TJoints ret = this->getJointsState(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_moveJointsWithAngle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TJointAngles iceP_angles;
    istr->readAll(iceP_angles);
    inS.endReadParams();
    this->moveJointsWithAngle(::std::move(iceP_angles), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_moveJointsWithSpeed(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TJointSpeeds iceP_speeds;
    istr->readAll(iceP_speeds);
    inS.endReadParams();
    this->moveJointsWithSpeed(::std::move(iceP_speeds), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_openGripper(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->openGripper(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_setCenterOfTool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TPose iceP_pose;
    ArmJoints iceP_referencedTo;
    istr->readAll(iceP_pose, iceP_referencedTo);
    inS.endReadParams();
    this->setCenterOfTool(::std::move(iceP_pose), iceP_referencedTo, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompKinovaArm_KinovaArm_ops, iceC_RoboCompKinovaArm_KinovaArm_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompKinovaArm_KinovaArm_ops)
    {
        case 0:
        {
            return _iceD_closeGripper(in, current);
        }
        case 1:
        {
            return _iceD_getCenterOfTool(in, current);
        }
        case 2:
        {
            return _iceD_getGripperState(in, current);
        }
        case 3:
        {
            return _iceD_getJointsState(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_moveJointsWithAngle(in, current);
        }
        case 9:
        {
            return _iceD_moveJointsWithSpeed(in, current);
        }
        case 10:
        {
            return _iceD_openGripper(in, current);
        }
        case 11:
        {
            return _iceD_setCenterOfTool(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_closeGripper(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name);
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_getCenterOfTool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompKinovaArm::TPose>>& outAsync, ArmJoints iceP_referencedTo, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name);
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_referencedTo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_getGripperState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompKinovaArm::TGripper>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name);
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_getJointsState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompKinovaArm::TJoints>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name);
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_moveJointsWithAngle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const TJointAngles& iceP_angles, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithAngle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_angles);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_moveJointsWithSpeed(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const TJointSpeeds& iceP_speeds, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithSpeed_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_speeds);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_openGripper(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_openGripper_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::KinovaArmPrx::_iceI_setCenterOfTool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const TPose& iceP_pose, ArmJoints iceP_referencedTo, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompKinovaArm_KinovaArm_setCenterOfTool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pose, iceP_referencedTo);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompKinovaArm::KinovaArmPrx::_newInstance() const
{
    return ::IceInternal::createProxy<KinovaArmPrx>();
}
/// \endcond

const ::std::string&
RoboCompKinovaArm::KinovaArmPrx::ice_staticId()
{
    return KinovaArm::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name = "closeGripper";

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name = "getCenterOfTool";

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name = "getGripperState";

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name = "getJointsState";

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithAngle_name = "moveJointsWithAngle";

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithSpeed_name = "moveJointsWithSpeed";

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_openGripper_name = "openGripper";

const ::std::string iceC_RoboCompKinovaArm_KinovaArm_setCenterOfTool_name = "setCenterOfTool";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompKinovaArm::upCast(KinovaArm* p) { return p; }

void
::IceProxy::RoboCompKinovaArm::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< KinovaArm>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new KinovaArm;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_closeGripper(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompKinovaArm::KinovaArm::end_closeGripper(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompKinovaArm_KinovaArm_closeGripper_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_getCenterOfTool(::RoboCompKinovaArm::ArmJoints iceP_referencedTo, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_referencedTo);
        result->endWriteParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompKinovaArm::TPose
IceProxy::RoboCompKinovaArm::KinovaArm::end_getCenterOfTool(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompKinovaArm_KinovaArm_getCenterOfTool_name);
    ::RoboCompKinovaArm::TPose ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_getGripperState(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompKinovaArm::TGripper
IceProxy::RoboCompKinovaArm::KinovaArm::end_getGripperState(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompKinovaArm_KinovaArm_getGripperState_name);
    ::RoboCompKinovaArm::TGripper ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_getJointsState(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompKinovaArm::TJoints
IceProxy::RoboCompKinovaArm::KinovaArm::end_getJointsState(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompKinovaArm_KinovaArm_getJointsState_name);
    ::RoboCompKinovaArm::TJoints ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles& iceP_angles, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithAngle_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithAngle_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_angles);
        result->endWriteParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithAngle_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompKinovaArm::KinovaArm::end_moveJointsWithAngle(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithAngle_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds& iceP_speeds, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithSpeed_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithSpeed_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_speeds);
        result->endWriteParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithSpeed_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompKinovaArm::KinovaArm::end_moveJointsWithSpeed(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompKinovaArm_KinovaArm_moveJointsWithSpeed_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_openGripper(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_openGripper_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_openGripper_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_openGripper_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompKinovaArm::KinovaArm::end_openGripper(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompKinovaArm_KinovaArm_openGripper_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompKinovaArm::KinovaArm::_iceI_begin_setCenterOfTool(const ::RoboCompKinovaArm::TPose& iceP_pose, ::RoboCompKinovaArm::ArmJoints iceP_referencedTo, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompKinovaArm_KinovaArm_setCenterOfTool_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompKinovaArm_KinovaArm_setCenterOfTool_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pose);
        ostr->write(iceP_referencedTo);
        result->endWriteParams();
        result->invoke(iceC_RoboCompKinovaArm_KinovaArm_setCenterOfTool_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompKinovaArm::KinovaArm::end_setCenterOfTool(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompKinovaArm_KinovaArm_setCenterOfTool_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompKinovaArm::KinovaArm::_newInstance() const
{
    return new KinovaArm;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompKinovaArm::KinovaArm::ice_staticId()
{
    return ::RoboCompKinovaArm::KinovaArm::ice_staticId();
}

RoboCompKinovaArm::KinovaArm::~KinovaArm()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompKinovaArm::upCast(KinovaArm* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_ids[2] =
{
    "::Ice::Object",
    "::RoboCompKinovaArm::KinovaArm"
};

}

bool
RoboCompKinovaArm::KinovaArm::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompKinovaArm_KinovaArm_ids, iceC_RoboCompKinovaArm_KinovaArm_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompKinovaArm::KinovaArm::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompKinovaArm_KinovaArm_ids[0], &iceC_RoboCompKinovaArm_KinovaArm_ids[2]);
}

const ::std::string&
RoboCompKinovaArm::KinovaArm::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompKinovaArm::KinovaArm::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompKinovaArm::KinovaArm";
    return typeId;
#else
    return iceC_RoboCompKinovaArm_KinovaArm_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_closeGripper(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->closeGripper(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_getCenterOfTool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ArmJoints iceP_referencedTo;
    istr->read(iceP_referencedTo);
    inS.endReadParams();
    TPose ret = this->getCenterOfTool(iceP_referencedTo, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_getGripperState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    TGripper ret = this->getGripperState(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_getJointsState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    TJoints ret = this->getJointsState(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_moveJointsWithAngle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TJointAngles iceP_angles;
    istr->read(iceP_angles);
    inS.endReadParams();
    this->moveJointsWithAngle(iceP_angles, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_moveJointsWithSpeed(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TJointSpeeds iceP_speeds;
    istr->read(iceP_speeds);
    inS.endReadParams();
    this->moveJointsWithSpeed(iceP_speeds, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_openGripper(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->openGripper(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceD_setCenterOfTool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TPose iceP_pose;
    ArmJoints iceP_referencedTo;
    istr->read(iceP_pose);
    istr->read(iceP_referencedTo);
    inS.endReadParams();
    this->setCenterOfTool(iceP_pose, iceP_referencedTo, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompKinovaArm_KinovaArm_all[] =
{
    "closeGripper",
    "getCenterOfTool",
    "getGripperState",
    "getJointsState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "moveJointsWithAngle",
    "moveJointsWithSpeed",
    "openGripper",
    "setCenterOfTool"
};

}

/// \cond INTERNAL
bool
RoboCompKinovaArm::KinovaArm::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompKinovaArm_KinovaArm_all, iceC_RoboCompKinovaArm_KinovaArm_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompKinovaArm_KinovaArm_all)
    {
        case 0:
        {
            return _iceD_closeGripper(in, current);
        }
        case 1:
        {
            return _iceD_getCenterOfTool(in, current);
        }
        case 2:
        {
            return _iceD_getGripperState(in, current);
        }
        case 3:
        {
            return _iceD_getJointsState(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_moveJointsWithAngle(in, current);
        }
        case 9:
        {
            return _iceD_moveJointsWithSpeed(in, current);
        }
        case 10:
        {
            return _iceD_openGripper(in, current);
        }
        case 11:
        {
            return _iceD_setCenterOfTool(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompKinovaArm::KinovaArm::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< KinovaArm, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompKinovaArm::KinovaArm::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< KinovaArm, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompKinovaArm::_icePatchObjectPtr(KinovaArmPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = KinovaArmPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(KinovaArm::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
