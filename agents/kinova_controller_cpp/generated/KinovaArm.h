//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `KinovaArm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __KinovaArm_h__
#define __KinovaArm_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompKinovaArm
{

class KinovaArm;
class KinovaArmPrx;

}

namespace RoboCompKinovaArm
{

enum class ArmJoints : unsigned char
{
    base,
    shoulderOne,
    shoulderTwo,
    elbowOne,
    elbowTwo,
    wristOne,
    wristTwo
};

struct TPose
{
    float x;
    float y;
    float z;
    float rx;
    float ry;
    float rz;
    float qta;
    float qtb;
    float qtc;
    float qtd;
    ::std::string parent;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const ::std::string&> ice_tuple() const
    {
        return std::tie(x, y, z, rx, ry, rz, qta, qtb, qtc, qtd, parent);
    }
};

struct TGripper
{
    float opening;
    float lforce;
    float ltipforce;
    float rforce;
    float rtipforce;
    float distance;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(opening, lforce, ltipforce, rforce, rtipforce, distance);
    }
};

struct TJoint
{
    int id;
    float angle;
    float velocity;
    float torque;
    float current;
    float voltage;
    float motorTemperature;
    float coreTemperature;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const float&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(id, angle, velocity, torque, current, voltage, motorTemperature, coreTemperature);
    }
};

using TJointSeq = ::std::vector<TJoint>;

struct TJoints
{
    ::RoboCompKinovaArm::TJointSeq joints;
    long long int timestamp;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompKinovaArm::TJointSeq&, const long long int&> ice_tuple() const
    {
        return std::tie(joints, timestamp);
    }
};

using Speeds = ::std::vector<float>;

struct TJointSpeeds
{
    ::RoboCompKinovaArm::Speeds jointSpeeds;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompKinovaArm::Speeds&> ice_tuple() const
    {
        return std::tie(jointSpeeds);
    }
};

using Angles = ::std::vector<float>;

struct TJointAngles
{
    ::RoboCompKinovaArm::Angles jointAngles;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompKinovaArm::Angles&> ice_tuple() const
    {
        return std::tie(jointAngles);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompKinovaArm
{

class KinovaArm : public virtual ::Ice::Object
{
public:

    using ProxyType = KinovaArmPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool closeGripper(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_closeGripper(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TPose getCenterOfTool(ArmJoints referencedTo, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getCenterOfTool(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TGripper getGripperState(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getGripperState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TJoints getJointsState(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getJointsState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void moveJointsWithAngle(TJointAngles angles, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_moveJointsWithAngle(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void moveJointsWithSpeed(TJointSpeeds speeds, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_moveJointsWithSpeed(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void openGripper(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_openGripper(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setCenterOfTool(TPose pose, ArmJoints referencedTo, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setCenterOfTool(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompKinovaArm
{

class KinovaArmPrx : public virtual ::Ice::Proxy<KinovaArmPrx, ::Ice::ObjectPrx>
{
public:

    bool closeGripper(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &KinovaArmPrx::_iceI_closeGripper, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto closeGripperAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &KinovaArmPrx::_iceI_closeGripper, context);
    }

    ::std::function<void()>
    closeGripperAsync(::std::function<void(bool)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_closeGripper, context);
    }

    /// \cond INTERNAL
    void _iceI_closeGripper(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    TPose getCenterOfTool(ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompKinovaArm::TPose>(true, this, &KinovaArmPrx::_iceI_getCenterOfTool, referencedTo, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getCenterOfToolAsync(ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompKinovaArm::TPose>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompKinovaArm::TPose, P>(false, this, &KinovaArmPrx::_iceI_getCenterOfTool, referencedTo, context);
    }

    ::std::function<void()>
    getCenterOfToolAsync(ArmJoints referencedTo,
                         ::std::function<void(::RoboCompKinovaArm::TPose)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompKinovaArm::TPose>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_getCenterOfTool, referencedTo, context);
    }

    /// \cond INTERNAL
    void _iceI_getCenterOfTool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompKinovaArm::TPose>>&, ArmJoints, const ::Ice::Context&);
    /// \endcond

    TGripper getGripperState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompKinovaArm::TGripper>(true, this, &KinovaArmPrx::_iceI_getGripperState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getGripperStateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompKinovaArm::TGripper>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompKinovaArm::TGripper, P>(false, this, &KinovaArmPrx::_iceI_getGripperState, context);
    }

    ::std::function<void()>
    getGripperStateAsync(::std::function<void(::RoboCompKinovaArm::TGripper)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompKinovaArm::TGripper>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_getGripperState, context);
    }

    /// \cond INTERNAL
    void _iceI_getGripperState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompKinovaArm::TGripper>>&, const ::Ice::Context&);
    /// \endcond

    TJoints getJointsState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompKinovaArm::TJoints>(true, this, &KinovaArmPrx::_iceI_getJointsState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getJointsStateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompKinovaArm::TJoints>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompKinovaArm::TJoints, P>(false, this, &KinovaArmPrx::_iceI_getJointsState, context);
    }

    ::std::function<void()>
    getJointsStateAsync(::std::function<void(::RoboCompKinovaArm::TJoints)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompKinovaArm::TJoints>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_getJointsState, context);
    }

    /// \cond INTERNAL
    void _iceI_getJointsState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompKinovaArm::TJoints>>&, const ::Ice::Context&);
    /// \endcond

    void moveJointsWithAngle(const TJointAngles& angles, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &KinovaArmPrx::_iceI_moveJointsWithAngle, angles, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto moveJointsWithAngleAsync(const TJointAngles& angles, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &KinovaArmPrx::_iceI_moveJointsWithAngle, angles, context);
    }

    ::std::function<void()>
    moveJointsWithAngleAsync(const TJointAngles& angles,
                             ::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_moveJointsWithAngle, angles, context);
    }

    /// \cond INTERNAL
    void _iceI_moveJointsWithAngle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TJointAngles&, const ::Ice::Context&);
    /// \endcond

    void moveJointsWithSpeed(const TJointSpeeds& speeds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &KinovaArmPrx::_iceI_moveJointsWithSpeed, speeds, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto moveJointsWithSpeedAsync(const TJointSpeeds& speeds, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &KinovaArmPrx::_iceI_moveJointsWithSpeed, speeds, context);
    }

    ::std::function<void()>
    moveJointsWithSpeedAsync(const TJointSpeeds& speeds,
                             ::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_moveJointsWithSpeed, speeds, context);
    }

    /// \cond INTERNAL
    void _iceI_moveJointsWithSpeed(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TJointSpeeds&, const ::Ice::Context&);
    /// \endcond

    void openGripper(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &KinovaArmPrx::_iceI_openGripper, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto openGripperAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &KinovaArmPrx::_iceI_openGripper, context);
    }

    ::std::function<void()>
    openGripperAsync(::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_openGripper, context);
    }

    /// \cond INTERNAL
    void _iceI_openGripper(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void setCenterOfTool(const TPose& pose, ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &KinovaArmPrx::_iceI_setCenterOfTool, pose, referencedTo, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setCenterOfToolAsync(const TPose& pose, ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &KinovaArmPrx::_iceI_setCenterOfTool, pose, referencedTo, context);
    }

    ::std::function<void()>
    setCenterOfToolAsync(const TPose& pose, ArmJoints referencedTo,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompKinovaArm::KinovaArmPrx::_iceI_setCenterOfTool, pose, referencedTo, context);
    }

    /// \cond INTERNAL
    void _iceI_setCenterOfTool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TPose&, ArmJoints, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    KinovaArmPrx() = default;
    friend ::std::shared_ptr<KinovaArmPrx> IceInternal::createProxy<KinovaArmPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompKinovaArm::ArmJoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 6;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::RoboCompKinovaArm::TPose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 41;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompKinovaArm::TPose, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TPose& v)
    {
        istr->readAll(v.x, v.y, v.z, v.rx, v.ry, v.rz, v.qta, v.qtb, v.qtc, v.qtd, v.parent);
    }
};

template<>
struct StreamableTraits<::RoboCompKinovaArm::TGripper>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompKinovaArm::TGripper, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TGripper& v)
    {
        istr->readAll(v.opening, v.lforce, v.ltipforce, v.rforce, v.rtipforce, v.distance);
    }
};

template<>
struct StreamableTraits<::RoboCompKinovaArm::TJoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompKinovaArm::TJoint, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJoint& v)
    {
        istr->readAll(v.id, v.angle, v.velocity, v.torque, v.current, v.voltage, v.motorTemperature, v.coreTemperature);
    }
};

template<>
struct StreamableTraits<::RoboCompKinovaArm::TJoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompKinovaArm::TJoints, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJoints& v)
    {
        istr->readAll(v.joints, v.timestamp);
    }
};

template<>
struct StreamableTraits<::RoboCompKinovaArm::TJointSpeeds>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompKinovaArm::TJointSpeeds, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJointSpeeds& v)
    {
        istr->readAll(v.jointSpeeds);
    }
};

template<>
struct StreamableTraits<::RoboCompKinovaArm::TJointAngles>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompKinovaArm::TJointAngles, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJointAngles& v)
    {
        istr->readAll(v.jointAngles);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompKinovaArm
{

using KinovaArmPtr = ::std::shared_ptr<KinovaArm>;
using KinovaArmPrxPtr = ::std::shared_ptr<KinovaArmPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompKinovaArm
{

class KinovaArm;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< KinovaArm>&);
::IceProxy::Ice::Object* upCast(KinovaArm*);
/// \endcond

}

}

namespace RoboCompKinovaArm
{

class KinovaArm;
/// \cond INTERNAL
::Ice::Object* upCast(KinovaArm*);
/// \endcond
typedef ::IceInternal::Handle< KinovaArm> KinovaArmPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompKinovaArm::KinovaArm> KinovaArmPrx;
typedef KinovaArmPrx KinovaArmPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(KinovaArmPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompKinovaArm
{

enum ArmJoints
{
    base,
    shoulderOne,
    shoulderTwo,
    elbowOne,
    elbowTwo,
    wristOne,
    wristTwo
};

struct TPose
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;
    ::Ice::Float qta;
    ::Ice::Float qtb;
    ::Ice::Float qtc;
    ::Ice::Float qtd;
    ::std::string parent;
};

struct TGripper
{
    ::Ice::Float opening;
    ::Ice::Float lforce;
    ::Ice::Float ltipforce;
    ::Ice::Float rforce;
    ::Ice::Float rtipforce;
    ::Ice::Float distance;
};

struct TJoint
{
    ::Ice::Int id;
    ::Ice::Float angle;
    ::Ice::Float velocity;
    ::Ice::Float torque;
    ::Ice::Float current;
    ::Ice::Float voltage;
    ::Ice::Float motorTemperature;
    ::Ice::Float coreTemperature;
};

typedef ::std::vector<TJoint> TJointSeq;

struct TJoints
{
    ::RoboCompKinovaArm::TJointSeq joints;
    ::Ice::Long timestamp;
};

typedef ::std::vector< ::Ice::Float> Speeds;

struct TJointSpeeds
{
    ::RoboCompKinovaArm::Speeds jointSpeeds;
};

typedef ::std::vector< ::Ice::Float> Angles;

struct TJointAngles
{
    ::RoboCompKinovaArm::Angles jointAngles;
};

}

namespace RoboCompKinovaArm
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_closeGripper.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_closeGripper.
 */
class Callback_KinovaArm_closeGripper_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_closeGripper_Base> Callback_KinovaArm_closeGripperPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getCenterOfTool.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getCenterOfTool.
 */
class Callback_KinovaArm_getCenterOfTool_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_getCenterOfTool_Base> Callback_KinovaArm_getCenterOfToolPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getGripperState.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getGripperState.
 */
class Callback_KinovaArm_getGripperState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_getGripperState_Base> Callback_KinovaArm_getGripperStatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getJointsState.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getJointsState.
 */
class Callback_KinovaArm_getJointsState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_getJointsState_Base> Callback_KinovaArm_getJointsStatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_moveJointsWithAngle.
 */
class Callback_KinovaArm_moveJointsWithAngle_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_moveJointsWithAngle_Base> Callback_KinovaArm_moveJointsWithAnglePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_moveJointsWithSpeed.
 */
class Callback_KinovaArm_moveJointsWithSpeed_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_moveJointsWithSpeed_Base> Callback_KinovaArm_moveJointsWithSpeedPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_openGripper.
 */
class Callback_KinovaArm_openGripper_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_openGripper_Base> Callback_KinovaArm_openGripperPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_setCenterOfTool.
 */
class Callback_KinovaArm_setCenterOfTool_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KinovaArm_setCenterOfTool_Base> Callback_KinovaArm_setCenterOfToolPtr;

}

namespace IceProxy
{

namespace RoboCompKinovaArm
{

class KinovaArm : public virtual ::Ice::Proxy<KinovaArm, ::IceProxy::Ice::Object>
{
public:

    bool closeGripper(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_closeGripper(_iceI_begin_closeGripper(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_closeGripper(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_closeGripper(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeGripper(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeGripper(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeGripper(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeGripper(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeGripper(const ::RoboCompKinovaArm::Callback_KinovaArm_closeGripperPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeGripper(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeGripper(const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_closeGripperPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeGripper(context, cb, cookie);
    }

    bool end_closeGripper(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_closeGripper(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompKinovaArm::TPose getCenterOfTool(::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getCenterOfTool(_iceI_begin_getCenterOfTool(referencedTo, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getCenterOfTool(::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getCenterOfTool(referencedTo, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCenterOfTool(::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCenterOfTool(referencedTo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCenterOfTool(::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCenterOfTool(referencedTo, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCenterOfTool(::RoboCompKinovaArm::ArmJoints referencedTo, const ::RoboCompKinovaArm::Callback_KinovaArm_getCenterOfToolPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCenterOfTool(referencedTo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCenterOfTool(::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_getCenterOfToolPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCenterOfTool(referencedTo, context, cb, cookie);
    }

    ::RoboCompKinovaArm::TPose end_getCenterOfTool(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getCenterOfTool(::RoboCompKinovaArm::ArmJoints, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompKinovaArm::TGripper getGripperState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getGripperState(_iceI_begin_getGripperState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getGripperState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getGripperState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGripperState(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGripperState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGripperState(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGripperState(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGripperState(const ::RoboCompKinovaArm::Callback_KinovaArm_getGripperStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGripperState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGripperState(const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_getGripperStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGripperState(context, cb, cookie);
    }

    ::RoboCompKinovaArm::TGripper end_getGripperState(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getGripperState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompKinovaArm::TJoints getJointsState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getJointsState(_iceI_begin_getJointsState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getJointsState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getJointsState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJointsState(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointsState(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsState(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointsState(const ::RoboCompKinovaArm::Callback_KinovaArm_getJointsStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsState(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointsState(const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_getJointsStatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsState(context, cb, cookie);
    }

    ::RoboCompKinovaArm::TJoints end_getJointsState(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getJointsState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles& angles, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_moveJointsWithAngle(_iceI_begin_moveJointsWithAngle(angles, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles& angles, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_moveJointsWithAngle(angles, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles& angles, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithAngle(angles, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles& angles, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithAngle(angles, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles& angles, const ::RoboCompKinovaArm::Callback_KinovaArm_moveJointsWithAnglePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithAngle(angles, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles& angles, const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_moveJointsWithAnglePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithAngle(angles, context, cb, cookie);
    }

    void end_moveJointsWithAngle(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_moveJointsWithAngle(const ::RoboCompKinovaArm::TJointAngles&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds& speeds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_moveJointsWithSpeed(_iceI_begin_moveJointsWithSpeed(speeds, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds& speeds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_moveJointsWithSpeed(speeds, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds& speeds, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithSpeed(speeds, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds& speeds, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithSpeed(speeds, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds& speeds, const ::RoboCompKinovaArm::Callback_KinovaArm_moveJointsWithSpeedPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithSpeed(speeds, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds& speeds, const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_moveJointsWithSpeedPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveJointsWithSpeed(speeds, context, cb, cookie);
    }

    void end_moveJointsWithSpeed(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_moveJointsWithSpeed(const ::RoboCompKinovaArm::TJointSpeeds&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void openGripper(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_openGripper(_iceI_begin_openGripper(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_openGripper(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_openGripper(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openGripper(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openGripper(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openGripper(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openGripper(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openGripper(const ::RoboCompKinovaArm::Callback_KinovaArm_openGripperPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openGripper(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openGripper(const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_openGripperPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openGripper(context, cb, cookie);
    }

    void end_openGripper(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_openGripper(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setCenterOfTool(const ::RoboCompKinovaArm::TPose& pose, ::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setCenterOfTool(_iceI_begin_setCenterOfTool(pose, referencedTo, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setCenterOfTool(const ::RoboCompKinovaArm::TPose& pose, ::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setCenterOfTool(pose, referencedTo, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCenterOfTool(const ::RoboCompKinovaArm::TPose& pose, ::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCenterOfTool(pose, referencedTo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setCenterOfTool(const ::RoboCompKinovaArm::TPose& pose, ::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCenterOfTool(pose, referencedTo, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setCenterOfTool(const ::RoboCompKinovaArm::TPose& pose, ::RoboCompKinovaArm::ArmJoints referencedTo, const ::RoboCompKinovaArm::Callback_KinovaArm_setCenterOfToolPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCenterOfTool(pose, referencedTo, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setCenterOfTool(const ::RoboCompKinovaArm::TPose& pose, ::RoboCompKinovaArm::ArmJoints referencedTo, const ::Ice::Context& context, const ::RoboCompKinovaArm::Callback_KinovaArm_setCenterOfToolPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCenterOfTool(pose, referencedTo, context, cb, cookie);
    }

    void end_setCenterOfTool(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setCenterOfTool(const ::RoboCompKinovaArm::TPose&, ::RoboCompKinovaArm::ArmJoints, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompKinovaArm
{

class KinovaArm : public virtual ::Ice::Object
{
public:

    typedef KinovaArmPrx ProxyType;
    typedef KinovaArmPtr PointerType;

    virtual ~KinovaArm();

#ifdef ICE_CPP11_COMPILER
    KinovaArm() = default;
    KinovaArm(const KinovaArm&) = default;
    KinovaArm& operator=(const KinovaArm&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool closeGripper(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_closeGripper(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TPose getCenterOfTool(ArmJoints referencedTo, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getCenterOfTool(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TGripper getGripperState(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getGripperState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TJoints getJointsState(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getJointsState(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void moveJointsWithAngle(const TJointAngles& angles, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_moveJointsWithAngle(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void moveJointsWithSpeed(const TJointSpeeds& speeds, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_moveJointsWithSpeed(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void openGripper(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_openGripper(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setCenterOfTool(const TPose& pose, ArmJoints referencedTo, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setCenterOfTool(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const KinovaArm& lhs, const KinovaArm& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const KinovaArm& lhs, const KinovaArm& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompKinovaArm::ArmJoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 6;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompKinovaArm::TPose>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 41;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompKinovaArm::TPose, S>
{
    static void write(S* ostr, const ::RoboCompKinovaArm::TPose& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.rx);
        ostr->write(v.ry);
        ostr->write(v.rz);
        ostr->write(v.qta);
        ostr->write(v.qtb);
        ostr->write(v.qtc);
        ostr->write(v.qtd);
        ostr->write(v.parent);
    }
};

template<typename S>
struct StreamReader< ::RoboCompKinovaArm::TPose, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TPose& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.rx);
        istr->read(v.ry);
        istr->read(v.rz);
        istr->read(v.qta);
        istr->read(v.qtb);
        istr->read(v.qtc);
        istr->read(v.qtd);
        istr->read(v.parent);
    }
};

template<>
struct StreamableTraits< ::RoboCompKinovaArm::TGripper>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompKinovaArm::TGripper, S>
{
    static void write(S* ostr, const ::RoboCompKinovaArm::TGripper& v)
    {
        ostr->write(v.opening);
        ostr->write(v.lforce);
        ostr->write(v.ltipforce);
        ostr->write(v.rforce);
        ostr->write(v.rtipforce);
        ostr->write(v.distance);
    }
};

template<typename S>
struct StreamReader< ::RoboCompKinovaArm::TGripper, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TGripper& v)
    {
        istr->read(v.opening);
        istr->read(v.lforce);
        istr->read(v.ltipforce);
        istr->read(v.rforce);
        istr->read(v.rtipforce);
        istr->read(v.distance);
    }
};

template<>
struct StreamableTraits< ::RoboCompKinovaArm::TJoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompKinovaArm::TJoint, S>
{
    static void write(S* ostr, const ::RoboCompKinovaArm::TJoint& v)
    {
        ostr->write(v.id);
        ostr->write(v.angle);
        ostr->write(v.velocity);
        ostr->write(v.torque);
        ostr->write(v.current);
        ostr->write(v.voltage);
        ostr->write(v.motorTemperature);
        ostr->write(v.coreTemperature);
    }
};

template<typename S>
struct StreamReader< ::RoboCompKinovaArm::TJoint, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJoint& v)
    {
        istr->read(v.id);
        istr->read(v.angle);
        istr->read(v.velocity);
        istr->read(v.torque);
        istr->read(v.current);
        istr->read(v.voltage);
        istr->read(v.motorTemperature);
        istr->read(v.coreTemperature);
    }
};

template<>
struct StreamableTraits< ::RoboCompKinovaArm::TJoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompKinovaArm::TJoints, S>
{
    static void write(S* ostr, const ::RoboCompKinovaArm::TJoints& v)
    {
        ostr->write(v.joints);
        ostr->write(v.timestamp);
    }
};

template<typename S>
struct StreamReader< ::RoboCompKinovaArm::TJoints, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJoints& v)
    {
        istr->read(v.joints);
        istr->read(v.timestamp);
    }
};

template<>
struct StreamableTraits< ::RoboCompKinovaArm::TJointSpeeds>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompKinovaArm::TJointSpeeds, S>
{
    static void write(S* ostr, const ::RoboCompKinovaArm::TJointSpeeds& v)
    {
        ostr->write(v.jointSpeeds);
    }
};

template<typename S>
struct StreamReader< ::RoboCompKinovaArm::TJointSpeeds, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJointSpeeds& v)
    {
        istr->read(v.jointSpeeds);
    }
};

template<>
struct StreamableTraits< ::RoboCompKinovaArm::TJointAngles>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompKinovaArm::TJointAngles, S>
{
    static void write(S* ostr, const ::RoboCompKinovaArm::TJointAngles& v)
    {
        ostr->write(v.jointAngles);
    }
};

template<typename S>
struct StreamReader< ::RoboCompKinovaArm::TJointAngles, S>
{
    static void read(S* istr, ::RoboCompKinovaArm::TJointAngles& v)
    {
        istr->read(v.jointAngles);
    }
};

}
/// \endcond

namespace RoboCompKinovaArm
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_closeGripper.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_closeGripper.
 */
template<class T>
class CallbackNC_KinovaArm_closeGripper : public Callback_KinovaArm_closeGripper_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_KinovaArm_closeGripper(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_closeGripper(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_closeGripper.
 */
template<class T> Callback_KinovaArm_closeGripperPtr
newCallback_KinovaArm_closeGripper(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_closeGripper<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_closeGripper.
 */
template<class T> Callback_KinovaArm_closeGripperPtr
newCallback_KinovaArm_closeGripper(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_closeGripper<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_closeGripper.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_closeGripper.
 */
template<class T, typename CT>
class Callback_KinovaArm_closeGripper : public Callback_KinovaArm_closeGripper_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_KinovaArm_closeGripper(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_closeGripper(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_closeGripper.
 */
template<class T, typename CT> Callback_KinovaArm_closeGripperPtr
newCallback_KinovaArm_closeGripper(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_closeGripper<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_closeGripper.
 */
template<class T, typename CT> Callback_KinovaArm_closeGripperPtr
newCallback_KinovaArm_closeGripper(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_closeGripper<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getCenterOfTool.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getCenterOfTool.
 */
template<class T>
class CallbackNC_KinovaArm_getCenterOfTool : public Callback_KinovaArm_getCenterOfTool_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TPose&);

    CallbackNC_KinovaArm_getCenterOfTool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        TPose ret;
        try
        {
            ret = proxy->end_getCenterOfTool(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getCenterOfTool.
 */
template<class T> Callback_KinovaArm_getCenterOfToolPtr
newCallback_KinovaArm_getCenterOfTool(const IceUtil::Handle<T>& instance, void (T::*cb)(const TPose&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_getCenterOfTool<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getCenterOfTool.
 */
template<class T> Callback_KinovaArm_getCenterOfToolPtr
newCallback_KinovaArm_getCenterOfTool(T* instance, void (T::*cb)(const TPose&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_getCenterOfTool<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getCenterOfTool.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getCenterOfTool.
 */
template<class T, typename CT>
class Callback_KinovaArm_getCenterOfTool : public Callback_KinovaArm_getCenterOfTool_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TPose&, const CT&);

    Callback_KinovaArm_getCenterOfTool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        TPose ret;
        try
        {
            ret = proxy->end_getCenterOfTool(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getCenterOfTool.
 */
template<class T, typename CT> Callback_KinovaArm_getCenterOfToolPtr
newCallback_KinovaArm_getCenterOfTool(const IceUtil::Handle<T>& instance, void (T::*cb)(const TPose&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_getCenterOfTool<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getCenterOfTool.
 */
template<class T, typename CT> Callback_KinovaArm_getCenterOfToolPtr
newCallback_KinovaArm_getCenterOfTool(T* instance, void (T::*cb)(const TPose&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_getCenterOfTool<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getGripperState.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getGripperState.
 */
template<class T>
class CallbackNC_KinovaArm_getGripperState : public Callback_KinovaArm_getGripperState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TGripper&);

    CallbackNC_KinovaArm_getGripperState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        TGripper ret;
        try
        {
            ret = proxy->end_getGripperState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getGripperState.
 */
template<class T> Callback_KinovaArm_getGripperStatePtr
newCallback_KinovaArm_getGripperState(const IceUtil::Handle<T>& instance, void (T::*cb)(const TGripper&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_getGripperState<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getGripperState.
 */
template<class T> Callback_KinovaArm_getGripperStatePtr
newCallback_KinovaArm_getGripperState(T* instance, void (T::*cb)(const TGripper&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_getGripperState<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getGripperState.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getGripperState.
 */
template<class T, typename CT>
class Callback_KinovaArm_getGripperState : public Callback_KinovaArm_getGripperState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TGripper&, const CT&);

    Callback_KinovaArm_getGripperState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        TGripper ret;
        try
        {
            ret = proxy->end_getGripperState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getGripperState.
 */
template<class T, typename CT> Callback_KinovaArm_getGripperStatePtr
newCallback_KinovaArm_getGripperState(const IceUtil::Handle<T>& instance, void (T::*cb)(const TGripper&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_getGripperState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getGripperState.
 */
template<class T, typename CT> Callback_KinovaArm_getGripperStatePtr
newCallback_KinovaArm_getGripperState(T* instance, void (T::*cb)(const TGripper&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_getGripperState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getJointsState.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getJointsState.
 */
template<class T>
class CallbackNC_KinovaArm_getJointsState : public Callback_KinovaArm_getJointsState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TJoints&);

    CallbackNC_KinovaArm_getJointsState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        TJoints ret;
        try
        {
            ret = proxy->end_getJointsState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getJointsState.
 */
template<class T> Callback_KinovaArm_getJointsStatePtr
newCallback_KinovaArm_getJointsState(const IceUtil::Handle<T>& instance, void (T::*cb)(const TJoints&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_getJointsState<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getJointsState.
 */
template<class T> Callback_KinovaArm_getJointsStatePtr
newCallback_KinovaArm_getJointsState(T* instance, void (T::*cb)(const TJoints&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_getJointsState<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_getJointsState.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_getJointsState.
 */
template<class T, typename CT>
class Callback_KinovaArm_getJointsState : public Callback_KinovaArm_getJointsState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TJoints&, const CT&);

    Callback_KinovaArm_getJointsState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        KinovaArmPrx proxy = KinovaArmPrx::uncheckedCast(result->getProxy());
        TJoints ret;
        try
        {
            ret = proxy->end_getJointsState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getJointsState.
 */
template<class T, typename CT> Callback_KinovaArm_getJointsStatePtr
newCallback_KinovaArm_getJointsState(const IceUtil::Handle<T>& instance, void (T::*cb)(const TJoints&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_getJointsState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_getJointsState.
 */
template<class T, typename CT> Callback_KinovaArm_getJointsStatePtr
newCallback_KinovaArm_getJointsState(T* instance, void (T::*cb)(const TJoints&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_getJointsState<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_moveJointsWithAngle.
 */
template<class T>
class CallbackNC_KinovaArm_moveJointsWithAngle : public Callback_KinovaArm_moveJointsWithAngle_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KinovaArm_moveJointsWithAngle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithAngle<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithAngle<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithAngle<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithAngle<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_moveJointsWithAngle.
 */
template<class T, typename CT>
class Callback_KinovaArm_moveJointsWithAngle : public Callback_KinovaArm_moveJointsWithAngle_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KinovaArm_moveJointsWithAngle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithAngle<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithAngle<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithAngle<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithAngle.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithAnglePtr
newCallback_KinovaArm_moveJointsWithAngle(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithAngle<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_moveJointsWithSpeed.
 */
template<class T>
class CallbackNC_KinovaArm_moveJointsWithSpeed : public Callback_KinovaArm_moveJointsWithSpeed_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KinovaArm_moveJointsWithSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithSpeed<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithSpeed<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithSpeed<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_moveJointsWithSpeed<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_moveJointsWithSpeed.
 */
template<class T, typename CT>
class Callback_KinovaArm_moveJointsWithSpeed : public Callback_KinovaArm_moveJointsWithSpeed_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KinovaArm_moveJointsWithSpeed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithSpeed<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithSpeed<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithSpeed<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_moveJointsWithSpeed.
 */
template<class T, typename CT> Callback_KinovaArm_moveJointsWithSpeedPtr
newCallback_KinovaArm_moveJointsWithSpeed(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_moveJointsWithSpeed<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_openGripper.
 */
template<class T>
class CallbackNC_KinovaArm_openGripper : public Callback_KinovaArm_openGripper_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KinovaArm_openGripper(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_openGripper<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_openGripper<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_openGripper<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_openGripper<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_openGripper.
 */
template<class T, typename CT>
class Callback_KinovaArm_openGripper : public Callback_KinovaArm_openGripper_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KinovaArm_openGripper(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T, typename CT> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_openGripper<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T, typename CT> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_openGripper<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T, typename CT> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_openGripper<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_openGripper.
 */
template<class T, typename CT> Callback_KinovaArm_openGripperPtr
newCallback_KinovaArm_openGripper(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_openGripper<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_setCenterOfTool.
 */
template<class T>
class CallbackNC_KinovaArm_setCenterOfTool : public Callback_KinovaArm_setCenterOfTool_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KinovaArm_setCenterOfTool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_setCenterOfTool<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_setCenterOfTool<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_setCenterOfTool<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KinovaArm_setCenterOfTool<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 * Create a wrapper instance by calling ::RoboCompKinovaArm::newCallback_KinovaArm_setCenterOfTool.
 */
template<class T, typename CT>
class Callback_KinovaArm_setCenterOfTool : public Callback_KinovaArm_setCenterOfTool_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KinovaArm_setCenterOfTool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T, typename CT> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_setCenterOfTool<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T, typename CT> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_setCenterOfTool<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T, typename CT> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_setCenterOfTool<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompKinovaArm::KinovaArm::begin_setCenterOfTool.
 */
template<class T, typename CT> Callback_KinovaArm_setCenterOfToolPtr
newCallback_KinovaArm_setCenterOfTool(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KinovaArm_setCenterOfTool<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
